//////////////////////////////////////////////////////////////////////
//               This file is generated by coder.                   //
//               Please do not change it directly!                  // 
//////////////////////////////////////////////////////////////////////

var NetData = require("netdata");

var P = {
    GM_CHAR_BIT : 8,
    GM_SCHAR_MIN : -128,
    GM_SCHAR_MAX : 127,
    GM_UCHAR_MIN : 0,
    GM_UCHAR_MAX : 255,
    GM_SHRT_BTT : 16,
    GM_SSHRT_MIN : -32768,
    GM_SSHRT_MAX : 32767,
    GM_USHRT_MIN : 0,
    GM_USHRT_MAX : 65535,
    GM_INT_BIT : 32,
    GM_SINT_MIN : -2147483648,
    GM_SINT_MAX : 2147483647,
    GM_UINT_MIN : 0,
    GM_UINT_MAX : 4294967295,
    GM_LONG_BIT : 64,
    GM_SLONG_MIN : -9223372036854775808,
    GM_SLONG_MAX : 9223372036854775807,
    GM_ULONG_MIN : 0,
    GM_ULONG_MAX : 18446744073709551615,
    GM_ONEK_LEN : 1024,
    PT_CONST_0 : 0,
    PT_CONST_1 : 1,
    PT_CONST_100 : 100,
    PT_CONST_1000 : 1000,
    PT_MAX_INT32 : 2147483647,
    PT_SERVER_VERSION : 100,
    PT_SVRTYPE_ALL : 0,
    PT_SVRTYPE_GAMESERVER : 1,
    PT_SVRTYPE_DBSERVER : 2,
    PT_SVRTYPE_AGENT : 3,
    PT_SVRTYPE_LOGSERVER : 4,
    PT_GROUP_SVRCOUNT_MAX : 999,
    PT_SERVER_STAT_INIT : 1,
    PT_SERVER_STAT_RUNNING : 2,
    PT_SERVER_STAT_UNINIT : 3,
    PT_OPERATE_GETCFG : 1,
    PT_OPERATE_START : 2,
    PT_OPERATE_STOP : 3,
    PT_OPERATE_RESTART : 4,
    PT_OPERATE_FORCE_STOP : 5,
    PT_OPERATE_CLEAR : 6,
    PT_OPERATE_UPDATE_CODE : 7,
    PT_OPERATE_DBTUP : 8,
    PT_OPERATE_GAMEINIT : 9,
    PT_STOP_SERVER_NORMAL : 1,
    PT_STOP_SERVER_FORCE : 2,
    PT_PING_BIGDATA_LEN : 1000000,
    PT_REGION_MODEL : 1000,
    PT_GENDER_MALE : 1,
    PT_GENDER_FEMALE : 0,
    PT_MONEY_GOLD : 1,
    PT_MONEY_DIAMOND : 2,
    PT_MONEY_ZIZUAN : 3,
    PT_MONEY_ARENA_POINT : 4,
    PT_MONEY_PIECE_CRYSTAL : 5,
    PT_MONEY_TOWER_POINT : 6,
    PT_MONEY_ITEM_35001 : 7,
    PT_MONEY_WAR_POINT : 8,
    PT_MONEY_FLYING_CHESS : 9,
    PT_LOGTYPE_LOGIN : 1,
    PT_LOGTYPE_MONEY : 2,
    PT_LOGTYPE_ACTION : 3,
    PT_LOGTYPE_GM : 4,
    PT_LOGTYPE_CHAT : 5,
    PT_LOGTYPE_ITEM : 6,
    PT_LOG_MAX_LEN : 4096,
    PT_LOG_RET_MAX : 20000000,
    PT_LOGINTYPE_NORMAL : 1,
    PT_LOGINTYPE_SDK : 2,
    PT_LOGINTYPE_GUEST : 3,
    PTERR_SUCCESS : 0,
    PTERR_FAIL : 1,
    PTERR_SYS_ERROR : 2,
    PTERR_SERVER_SHUTDOWN : 3,
    PTERR_SERVER_NOTEXIST : 4,
    PTERR_NOTICE_NOTEXIST : 5,
    PTERR_NOTICE_EXIST : 6,
    PTERR_SYSTEM_IS_NOT_OPEN : 7,
    PTERR_PROG_VER_WRONG : 8,
    PTERR_RES_VER_WRONG : 9,
    PTERR_SYSTEM_BUSY : 10,
    PTERR_REPEAT_LOGIN : 11,
    PTERR_KICK_PLAYER : 12,
    PTERR_PLAYER_NOTONLINE : 13,
    PTERR_FORBID_PLAYER : 14,
    PTERR_PLAYER_NOT_EXIST : 15,
    PTERR_PLAYER_ONLINE : 16,
    PTERR_PLAYER_TAKE_OVER : 17,
    PTERR_PLAYER_DATA_CHANGE : 18,
    PTERR_PLAYER_LOCK : 19,
    PTERR_PLAYER_BINDLOCK : 20,
    PTERR_ROLENAME_NULL : 21,
    PTERR_ROLENAME_INVALID_WORD : 22,
    PTERR_ROLENAME_EXIST : 23,
    PTERR_ROLENAME_TOOLONG : 24,
    PTERR_ROLENAME_TOOSHORT : 25,
    PTERR_PASSWD_INCORRECT : 26,
    PTERR_PASSWD_EXPIRED : 27,
    PTERR_MAX_LEVEL : 28,
    PTERR_CREATEROLE_WRONG_ICON : 31,
    PTERR_CREATEROLE_WRONG_MEMBER : 32,
    PTERR_SAVING_PLAYER_FAIL : 41,
    PTERR_ACCOUNT_EXIST : 42,
    PTERR_SERVER_NOTOPEN : 51,
    PTERR_WRONG_SERVER : 52,
    PTERR_SYSTEM_OPEN_LACK : 60,
    PTERR_LEVEL_LOW : 61,
    PTERR_BAG_FULL : 62,
    PTERR_DIAMOND_LACK : 63,
    PTERR_GOLD_LACK : 64,
    PTERR_VIPLEVEL_LOW : 65,
    PTERR_ITEM_LACK : 66,
    PTERR_QUALITY_LOW : 67,
    PTERR_SKILLPOINT_LACK : 68,
    PTERR_SP_LACK : 69,
    PTERR_COMBAT_POINT_LOW : 70,
    PTERR_ITEM_COMPOSE_INVALID : 71,
    PTERR_ITEM_NOT_EXIST : 72,
    PTERR_ITEM_HECHENG_COUNT_WRONG : 73,
    PTERR_ITEM_HECHENG_INVALID : 74,
    PTERR_ITEM_ZHUANHUA_COUNT_WRONG : 75,
    PTERR_ITEM_ZHUANHUA_INVALID : 76,
    PTERR_ITEM_CANNOT_USE : 77,
    PTERR_ITEM_NOT_IN_CHEST : 78,
    PTERR_ITEM_COMPOSE_NO_BUYTIMES : 79,
    PTERR_ITEMBAG_UNLOCK_MAX : 80,
    PTERR_LEADEREQUIP_NOTEXIST : 81,
    PTERR_LEADEREQUIP_LEVEL_MAX : 82,
    PTERR_LEADEREQUIP_QUALITY_MAX : 83,
    PTERR_MEMBER_NOTEXIST : 91,
    PTERR_MEMBER_ALREADY_ACTIVE : 92,
    PTERR_MEMBERLEVEL_PLAYER_LIMIT : 93,
    PTERR_MEMBERLEVEL_MAX_LIMIT : 94,
    PTERR_MEMBERQUALITY_MAX : 95,
    PTERR_STONE_LACK : 96,
    PTERR_STONEID_NOTMATCH : 97,
    PTERR_STONE_CANNOT_MERGE : 98,
    PTERR_STONE_CANNOT_SPLIT : 99,
    PTERR_MEMBER_SKILL_NOTACTIVE : 100,
    PTERR_MEMBER_SKILL_LEVEL_CURLIMIT : 101,
    PTERR_XILIANSHI_LACK : 102,
    PTERR_MEMBEREQUIP_POS_WRONG : 103,
    PTERR_MEMBEREQUIP_QUALITY_MAX : 104,
    PTERR_MEMBEREQUIP_CANNOT_SPLIT : 105,
    PTERR_MEMBEREQUIP_CANNOT_CUIQU : 106,
    PTERR_MEMBEREQUIP_LEVEL_MAX : 107,
    PTERR_MEMBEREQUIP_ELEM_LEVEL_MAX : 108,
    PTERR_MEMBEREQUIP_QIANGHUA_LEVEL_MAX : 109,
    PTERR_MEMBER_TECH_PROP_FULL : 110,
    PTERR_MEMBER_TECH_ITEM_LACK : 111,
    PTERR_MEMBER_TECH_ALL_NONNEGATIVE : 112,
    PTERR_MEMBER_TECH_NOT_REFORM : 113,
    PTERR_MEMBER_STAR_MAX : 114,
    PTERR_MEMBEREQUIP_STAR_MAX : 115,
    PTERR_MEMBEREQUIP_CANNOT_REBIRTH : 116,
    PTERR_MEMBER_CANNOT_REBIRTH : 117,
    PTERR_MEMBEREQUIP_QUALITY_LACK : 118,
    PTERR_MEMBER_NOT_ACTIVED : 118,
    PTERR_MEMBER_WEAPON_HAS_ACTIVED : 119,
    PTERR_MEMBER_WEAPON_NOT_ACTIVED : 120,
    PTERR_MEMBER_WEAPON_QUALITY_MAX : 121,
    PTERR_MEMBER_WEAPON_LEVEL_MAX : 122,
    PTERR_MEMBER_WEAPON_QUALITY_LACK : 123,
    PTERR_MEMBEREQUIP_REFINE_COUNT_MAX : 124,
    PTERR_MEMBEREQUIP_REFINE_COUNT_LACK : 125,
    PTERR_MEMBEREQUIP_REFINE_LEVEL_MAX : 126,
    PTERR_MIX_LEVEL_MAX : 251,
    PTERR_BUY_REWARD_MAX : 252,
    PTERR_BATTLE_DATA_WRONG : 400,
    PTERR_CAMP_STATUS_WRONG : 401,
    PTERR_CAMP_NOT_OPEN : 402,
    PTERR_CAMP_DAILY_LIMIT : 403,
    PTERR_CAMP_DRAW_REWARD_FAIL : 404,
    PTERR_CAMP_BUYCOUNT_LIMIT : 405,
    PTERR_CAMP_STAR_LOW : 406,
    PTERR_CAMP_NOT_FULLSTAR : 407,
    PTERR_CAMP_SAODANG_TICKET_LACK : 408,
    PTERR_CAMP_TYPE_WRONG : 409,
    PTERR_CAMP_REWARD_ALREADY_DRAWN : 410,
    PTERR_CAMP_NO_REVIVE_COUNT : 411,
    PTERR_ENDLESS_BATTLE_NOTSTART : 451,
    PTERR_ENDLESS_RANK_MAX : 452,
    PTERR_ENDLESS_SCORECOUNT_LOW : 453,
    PTERR_ENDLESS_POWER_POINT_FULL : 454,
    PTERR_ENDLESS_POWER_POINT_NO_BUY_COUNT : 455,
    PTERR_ENDLESS_CHAN_ALREADY_HASTASK : 456,
    PTERR_ENDLESS_CHAN_NOTASK : 457,
    PTERR_ENDLESS_CHAN_TASK_NOTFIN : 458,
    PTERR_ENDLESS_QH_LEVEL_MAX : 459,
    PTERR_ENDLESS_CHARGE_REWARD_MAX : 460,
    PTERR_BOSSTOWER_CAMP_EXPLORED : 461,
    PTERR_BOSSTOWER_NOT_BOSS_CAMP : 462,
    PTERR_BOSSTOWER_NO_BUFF_REFRESH_COUNT : 463,
    PTERR_BOSSTOWER_CAMP_NOT_EXPLORED : 464,
    PTERR_BOSSTOWER_BATTLE_NOT_START : 465,
    PTERR_BOSSTOWER_FLOOR_NOT_PASS : 466,
    PTERR_BOSSTOWER_FLOOR_MAX : 467,
    PTERR_BOSSTOWER_NO_RESET_COUNT : 468,
    PTERR_BOSSTOWER_ALREADY_UNLOCK : 469,
    PTERR_BOSSTOWER_NOT_UNLOCK : 470,
    PTERR_BOSSTOWER_FLOOR_CANNOT_RESET : 471,
    PTERR_NUCLEAR_NO_PLAY_COUNT : 481,
    PTERR_NUCLEAR_BATTLE_NOT_START : 482,
    PTERR_NUCLEAR_REWARD_NOT_ACTIVE : 483,
    PTERR_NUCLEAR_REWARD_ALREADY_GET : 484,
    PTERR_RCG_TIMECARD_NOTEXIST : 501,
    PTERR_RCG_TIMECARD_ALREADYDRAWN : 502,
    PTERR_VIP_PACKAGE_ALREADYDRAWN : 503,
    PTERR_RCG_HUIKUI_NOTACTIVE : 504,
    PTERR_RCG_HUIKUI_INVALID : 505,
    PTERR_RCG_HUIKUI_ALREADYGET : 506,
    PTERR_RCG_VOUCHER_LACK : 507,
    PTERR_RCG_FREE_DIAMOND_LACK : 508,
    PTERR_RCG_FREE_GOLD_LACK : 509,
    PTERR_SP_FULL : 551,
    PTERR_SP_NOBUYTIMES : 552,
    PTERR_SP_NOBACK : 553,
    PTERR_SP_FREE_LACK : 554,
    PTERR_STORE_NOT_EXPIRES : 601,
    PTERR_STORE_HAS_EXPIRED : 602,
    PTERR_STORE_ALREADY_BUY : 603,
    PTERR_STORE_BUY_LIMIT : 604,
    PTERR_STORE_RANK_LOW : 605,
    PTERR_STORE_HERO_CAMP_LIMIT : 606,
    PTERR_TRIAL_LACK : 607,
    PTERR_ITEM_35001_LACK : 608,
    PTERR_STORE_REFRESH_MAX : 609,
    PTERR_TREASURE_TIMES_LACK : 610,
    PTERR_TREASURE_LUCKY_POINT_LACK : 611,
    PTERR_TREASURE_TIMES_REWARD_ALREADY : 612,
    PTERR_TREASURE_ONE_FREE_LACK : 613,
    PTERR_TREASURE_GOLD_FREE_LACK : 614,
    PTERR_LOTTERY_HAS_EXPIRED : 620,
    PTERR_LOTTERY_CAN_NOT : 621,
    PTERR_SIGNIN_ALREADY_SIGNIN : 630,
    PTERR_SIGNIN_NOT : 631,
    PTERR_SIGNIN_ALREADY_REWARD : 632,
    PTERR_SIGNIN_NOT_HEAP : 633,
    PTERR_SIGNIN_ALREADY_HEAP : 634,
    PTERR_DAILY_ACTIVE_LACK : 640,
    PTERR_DAILY_ACTIVE_ALREADY_REWARD : 641,
    PTERR_DAILY_ALREADY_REWARD : 642,
    PTERR_DAILY_NOT_INTIME : 643,
    PTERR_DAILY_LEVEL_LACK : 644,
    PTERR_DAILY_VAL_LACK : 645,
    PTERR_ACHIEVE_ALREADY_REWARD : 650,
    PTERR_ACHIEVE_FINISH : 651,
    PTERR_ACHIEVE_LEVEL_LACK : 652,
    PTERR_ACHIEVE_VAL_LACK : 653,
    PTERR_ARENA_DB_RANKINGYESTERDAY_ISNOT_MATCH : 665,
    PTERR_ARENA_DB_CANT_GET_REWARD : 666,
    PTERR_FULI_GIFT_LIMIT_MAX : 670,
    PTERR_FULI_NOT_COND : 671,
    PTERR_FULI_ALREADY_GET : 672,
    PTERR_FULI_NOT_CZ : 673,
    PTERR_FULI_SEVEN_DARE_LACK : 674,
    PTERR_FULI_SEVEN_CZ_LACK : 675,
    PTERR_FULI_NOT_OPEN : 679,
    PTERR_FULI_TODAY_NOT_CZ : 680,
    PTERR_FULI_MILLION_LOGIN_HEAP_LACK : 681,
    PTERR_FULI_MILLION_ALREADY_GET : 682,
    PTERR_FULI_CZ_INVITE_TICKET_ERR : 683,
    PTERR_FULI_CZ_INVITE_LACK : 684,
    PTERR_FULI_SHARE_ALREADY_GET : 685,
    PTERR_MAIL_NO_ATTACHMENT : 931,
    PTERR_MAIL_ATTACHMENT_ALREADYGOT : 932,
    PTERR_MAIL_NOT_EXIST : 933,
    PTERR_PLAYER_NOT_IN_GUILD : 940,
    PTERR_GUILD_NAME_EXIST : 941,
    PTERR_GUILD_CREATE_DIAMOND_LACK : 942,
    PTERR_GUILDNAME_NULL : 943,
    PTERR_GUILDNAME_TOOLONG : 944,
    PTERR_GUILDNAME_TOOSHORT : 945,
    PTERR_GUILDNAME_INVALID : 946,
    PTERR_GUILD_CREATE_LEVEL_NOT_ACHIVE : 947,
    PTERR_GUILD_SEARCH_NOTEXIST : 948,
    PTERR_GUILD_APPLY_ALREADY_INGUILD : 949,
    PTERR_GUILD_APPLY_QUITTIME_TOOSOON : 950,
    PTERR_GUILD_NOTEXIST : 951,
    PTERR_GUILD_APPLY_REQ_ALREADYEXIST : 952,
    PTERR_GUILD_APPLY_REQ_FULL : 953,
    PTERR_GUILD_NORIGHT : 954,
    PTERR_GUILD_ANNOUNCEMENT_TOOLONG : 955,
    PTERR_GUILD_NOTMEMBER_INTHISGUILD : 956,
    PTERR_GUILD_CANDIDATE_INGUILD : 957,
    PTERR_GUILD_CANDIDATE_REQ_NOT_EXIST : 958,
    PTERR_GUILD_CAPACITY_LACK : 959,
    PTERR_GUILD_NOT_IN_THIS_GUILD : 960,
    PTERR_GUILD_LIMIT_INVALID : 961,
    PTERR_GUILD_ALREADY_ADMIN : 962,
    PTERR_GUILD_CANDIDATE_NOT_ADMIN : 963,
    PTERR_GUILD_DISMISS_HASMEMBER : 964,
    PTERR_GUILD_CONTRIBUTE_NOT_ENOUGH_ITEM : 965,
    PTERR_GUILD_CONTRIBUTE_ITEM_NOTEXIST : 966,
    PTERR_GUILD_ACTIVE_MEDAL_ALREADYHAVE : 967,
    PTERR_GUILD_ACTIVE_MEDAL_NOTEXIST : 968,
    PTERR_GUILD_ACTIVE_MEDAL_TYPE_INVALID : 969,
    PTERR_GUILD_ACTIVE_MEDAL_LEVEL_LACK : 970,
    PTERR_GUILD_ACTIVE_MEDAL_HISCONTRIBUTE_LACK : 971,
    PTERR_GUILD_UPGRADE_MEDAL_NOTOWN : 972,
    PTERR_GUILD_UPGRADE_MEDAL_ALREADY_MAX_LEVEL : 973,
    PTERR_GUILD_MEDAL_UPGRADE_TYPE_INVALID : 974,
    PTERR_CONTRIBUTE_LACK : 975,
    PTERR_GOLD_OR_CONTRIBUTE_LACK : 976,
    PTERR_GUILD_TOO_MANY_ADMIN : 977,
    PTERR_GUILD_AUTO_JOIN : 978,
    PTERR_GUILD_TOO_SOON : 979,
    PTERR_GUILD_ANNOUNCEMENT_INVALID_WORD : 980,
    PTERR_GUILD_OTHER_PARTY_NOT_EXIST_OR_NOT_IN_SAME_GUILD : 981,
    PTERR_GUILD_CANNOT_LIKE_YOURSELF : 982,
    PTERR_GUILD_LIKE_COUNT_LIMIT : 983,
    PTERR_GUILD_LIKE_POWERPOINT_LIMIT : 984,
    PTERR_GUILD_LUCKYDRAW_NOT_ENOUGH_LICK_CLICKS : 985,
    PTERR_GUILD_LUCKYDRAW_LIMIT : 986,
    PTERR_GUILD_CANNOT_TRANSFER_TO_YOURSELF : 987,
    PTERR_GUILD_ALREADY_CAPTAIN : 988,
    PTERR_GUILD_GET_CAPTAIN_NOT_MEET_REQMENT : 989,
    PTERR_LOGIN_XUWAN_FAIL : 1001,
    PTERR_LOGIN_TICKET_FAIL : 1002,
    PTERR_ARENA_REPORT_TAG_ERR : 1101,
    PTERR_ARENA_CANNOT_LIKE_YOURSELF : 1102,
    PTERR_ARENA_CANNOT_CHALLENGE_YOURSELF : 1103,
    PTERR_ARENA_LIKE_COUNT_LIMIT : 1104,
    PTERR_ARENA_CHALLENGE_COUNT_LIMIT : 1105,
    PTERR_ARENA_CHALLENGE_FREE_LIMIT : 1106,
    PTERR_ARENA_CHALLENGE_TICKET_LIMIT : 1107,
    PTERR_ARENA_CHALLENGE_FREE_ENOUGH : 1108,
    PTERR_ARENA_POINT_LACK : 1109,
    PTERR_ARENA_OTHERPARTY_IS_ROBOT : 1110,
    PTERR_ARENA_SAODANG_COMBAT_LOWER : 1111,
    PTERR_ARENA_SAODANG_RANKING_NOT_IN_500 : 1112,
    PTERR_ARENA_SAODANG_RANKING_LOWER : 1113,
    PTERR_ARENA_REWARD_WRONG_DAY : 1114,
    PTERR_AMS_ACT_NOT_OPEN : 1200,
    PTERR_AMS_ACT_STATUS_ERR : 1201,
    PTERR_AMS_ACT_HAS_JOIN : 1202,
    PTERR_AMS_ACT_OP_ERR : 1203,
    PTERR_AMS_LIST_NULL : 1204,
    PTERR_AMS_VAST_NO_CZ : 1205,
    PTERR_AMS_VAST_TIMES_LACK : 1206,
    PTERR_AMS_TOTAL_LIMIT : 1207,
    PTERR_AMS_HONGBAO_LIMIT : 1208,
    PTERR_AMS_EXCHANGE_LIMIT : 1209,
    PTERR_AMS_INTEGRAL_LACK : 1210,
    PTERR_AMS_REAL_MAX_LIMIT : 1211,
    PTERR_AMS_WEEKFUND_NO_RCG : 1212,
    PTERR_AMS_WEEKFUND_DAY_LACK : 1213,
    PTERR_AMS_LOTT_LIMIT : 1214,
    PTERR_AMS_RULE_LEVEL_NOT_MATCH : 1300,
    PTERR_AMS_RULE_VIP_NOT_MATCH : 1301,
    PTERR_AMS_RULE_CREATE_DAY_NOT_MATCH : 1302,
    PTERR_AMS_RULE_COMBATE_NOT_MATCH : 1303,
    PTERR_AMS_RULE_DAY_CONSUME_DIAMOND_NOT_MATCH : 1304,
    PTERR_AMS_RULE_DAY_CZ_DIAMOND_NOT_MATCH : 1305,
    PTERR_AMS_RULE_TOTAL_CONSUME_DIAMOND_NOT_MATCH : 1306,
    PTERR_AMS_RULE_TOTAL_CZ_DIAMOND_NOT_MATCH : 1307,
    PTERR_AMS_RULE_MEMBER_LEVEL_NOT_MATCH : 1308,
    PTERR_AMS_RULE_PET_LEVEL_NOT_MATCH : 1309,
    PTERR_AMS_RULE_ENDLESS_HEAP_SCORE_NOT_MATCH : 1310,
    PTERR_AMS_RULE_ITEM_NOT_MATCH : 1311,
    PTERR_AMS_RULE_ACTIVE_NOT_MATCH : 1312,
    PTERR_AMS_RULE_DURING_CONSUME_DIAMOND_NOT_MATCH : 1313,
    PTERR_AMS_RULE_DURING_CZ_DIAMOND_NOT_MATCH : 1314,
    PTERR_AMS_RULE_LOGIN_CONTINUE_NOT_MATCH : 1315,
    PTERR_AMS_RULE_LOGIN_HEAP_NOT_MATCH : 1316,
    PTERR_AMS_RULE_ARENA_MAXRANK_NOT_MATCH : 1318,
    PTERR_AMS_RULE_BUY_SP_NOT_MATCH : 1319,
    PTERR_AMS_RULE_TREASURE_GOLD_NOT_MATCH : 1320,
    PTERR_AMS_RULE_TREASURE_WARM_NOT_MATCH : 1321,
    PTERR_AMS_RULE_TREASURE_HOT_NOT_MATCH : 1322,
    PTERR_AMS_RULE_DURING_MAX_CZ_NOT_MATCH : 1323,
    PTERR_AMS_RULE_CONSUME_SP_NOT_MATCH : 1324,
    PTERR_AMS_RULE_CYCLE_CZ_NOT_MATCH : 1325,
    PTERR_AMS_RULE_ENDLESS_RANK_NOT_MATCH : 1326,
    PTERR_AMS_RULE_ENDLESS_WEEK_SCORE_NOT_MATCH : 1327,
    PTERR_AMS_RULE_DAY_ENDLESS_NOT_MATCH : 1328,
    PTERR_AMS_RULE_DAY_ENDLESS_PACK_NOT_MATCH : 1329,
    PTERR_AMS_RULE_DAY_ARENA_POINT_NOT_MATCH : 1330,
    PTERR_AMS_RULE_CURRENT_TIME_NOT_MATCH : 1331,
    PTERR_AMS_RULE_DAY_STORE_CONSUME_DIAMOND_NOT_MATCH : 1332,
    PTERR_AMS_RULE_DURING_STORE_CONSUME_DIAMOND_NOT_MATCH : 1333,
    PTERR_AMS_RULE_DURING_TREASURE_GOLD_NOT_MATCH : 1335,
    PTERR_AMS_RULE_DURING_TREASURE_WARM_NOT_MATCH : 1336,
    PTERR_AMS_RULE_DURING_TREASURE_HOT_NOT_MATCH : 1337,
    PTERR_AMS_RULE_DAY_SAODANG_NOT_MATCH : 1338,
    PTERR_AMS_RULE_DURING_SAODANG_NOT_MATCH : 1344,
    PTERR_AMS_RULE_DAY_LEADER_EQUIP_ITEM_COST_NOT_MATCH : 1339,
    PTERR_AMS_RULE_DURING_LEADER_EQUIP_ITEM_COST_NOT_MATCH : 1340,
    PTERR_AMS_RULE_DAY_LOTT_NOT_MATCH : 1341,
    PTERR_AMS_RULE_DURING_LOTT_NOT_MATCH : 1342,
    PTERR_AMS_RULE_DURING_COMBAT_UP_NOT_MATCH : 1343,
    PTERR_AMS_RULE_DAY_SINGLE_CZ_NOT_MATCH : 1345,
    PTERR_AMS_RULE_DURING_ARENA_MAXRANK_NOT_MATCH : 1346,
    PTERR_AMS_RULE_DAY_BUY_HERO_SP_NOT_MATCH : 1347,
    PTERR_AMS_RULE_DURING_BUY_HERO_SP_NOT_MATCH : 1348,
    PTERR_AMS_RULE_DAY_BOSSTOWER_NOT_MATCH : 1349,
    PTERR_AMS_RULE_DURING_BOSSTOWER_NOT_MATCH : 1350,
    PTERR_AMS_RULE_DURING_CZ_HEAP_NOT_MATCH : 1351,
    PTERR_AMS_RULE_DAY_TREASURE_GUAZAI_TEN_NOT_MATCH : 1352,
    PTERR_AMS_RULE_DURING_TREASURE_GUAZAI_TEN_NOT_MATCH : 1353,
    PTERR_AMS_RULE_DAY_ZIZUAN_CONSUME_NOT_MATCH : 1354,
    PTERR_AMS_RULE_DURING_ZIZUAN_CONSUME_NOT_MATCH : 1355,
    PTERR_AMS_RULE_DAY_ARENA_TIMES_NOT_MATCH : 1356,
    PTERR_AMS_RULE_DURING_ARENA_TIMES_NOT_MATCH : 1357,
    PTERR_AMS_RULE_DAY_EXPLORE_TIMES_NOT_MATCH : 1358,
    PTERR_AMS_RULE_DURING_EXPLORE_TIMES_NOT_MATCH : 1359,
    PTERR_AMS_RULE_DAY_DARK_TIMES_NOT_MATCH : 1360,
    PTERR_AMS_RULE_DURING_DARK_TIMES_NOT_MATCH : 1361,
    PTERR_AMS_RULE_DAY_PATROL_TIMES_NOT_MATCH : 1362,
    PTERR_AMS_RULE_DURING_PATROL_TIMES_NOT_MATCH : 1363,
    PTERR_AMS_RULE_AMS_JOIN_NOT_MATCH : 1364,
    PTERR_AMS_RULE_ENDLESS_MAX_SCORE_NOT_MATCH : 1365,
    PTERR_AMS_RULE_DAY_FLYINGCHESS_DICE_NOT_MATCH : 1366,
    PTERR_AMS_RULE_DURING_FLYINGCHESS_DICE_NOT_MATCH : 1367,
    PTERR_AMS_RULE_PLAT_NOT_MATCH : 1370,
    PTERR_AMS_RULE_INVITE_NOT_MATCH : 1371,
    PTERR_PIECE_CRYSTAL_LACK : 1400,
    PTERR_TOWER_POINT_LACK : 1420,
    PTERR_ROLEEQUIP_NOT_EXIST : 1501,
    PTERR_ROLEEQUIP_WRONG_POS : 1502,
    PTERR_ROLEEQUIP_BAG_FULL : 1503,
    PTERR_ROLEEQUIP_LINGWU_MAX : 1504,
    PTERR_ROLEEQUIP_GEM_LEVEL_MAX : 1505,
    PTERR_ROLEEQUIP_QIANGHUA_MAX : 1506,
    PTERR_HEROCAMP_DAILY_LIMIT : 1551,
    PTERR_HEROSP_LACK : 1552,
    PTERR_HEROCAMP_NOT_START : 1553,
    PTERR_HEROCAMP_NO_REVIVE_COUNT : 1554,
    PTERR_HEROCAMP_NOT_PASS : 1555,
    PTERR_HEROCAMP_PRECAMP_NOT_PASS : 1556,
    PTERR_HEROCAMP_NOT_CHEST : 1557,
    PTERR_HEROCAMP_BUY_LIMIT : 1558,
    PTERR_HEROCAMP_BUYSP_LIMIT : 1559,
    PTERR_MIBAO_STORE_NOT_OPEN : 1601,
    PTERR_MIBAO_STORE_ALL_BUY : 1602,
    PTERR_VIP_STORE_ALL_BUY : 1604,
    PTERR_NEBULA_ZIZUAN_LACK : 1651,
    PTERR_NEBULA_ENERGY_LACK : 1652,
    PTERR_NEBULA_ENERGY_NO_BUYTIMES : 1653,
    PTERR_NEBULA_SCORE_LACK : 1654,
    PTERR_WAR_NOT_START : 1680,
    PTERR_WAR_POS_LACK : 1681,
    PTERR_WAR_POS_HAS_PASS : 1682,
    PTERR_WAR_HAS_GET_REWARD : 1683,
    PTERR_WAR_POS_HAS_NO_PASS : 1684,
    PTERR_WAR_NEED_PRE_REWARD : 1685,
    PTERR_WAR_POINT_LACK : 1686,
    PTERR_ZIZUAN_EXCHANGE_LACK : 1690,
    PTERR_FUND_HAS_BUY : 1700,
    PTERR_FUND_CZ_LACK : 1701,
    PTERR_FUND_NOT_BUY : 1702,
    PTERR_FUND_HAS_GOT : 1703,
    PTERR_FUND_GET_ENDLESS_RANK_LOW : 1704,
    PTERR_TOWER_FLOOR_STORE_ALLBUY : 1710,
    PTERR_TOWER_FLOOR_STORE_MAXFLOOR : 1711,
    PTERR_TOWER_FLOOR_STORE_FLOOR_LACK : 1712,
    PTERR_TOWER_FLOOR_STORE_NEED_BUY_ONE : 1713,
    PTERR_REWARD_CENTER_REWARD_NOT_EXIST : 1751,
    PTERR_GUILD_BOSS_ALL_KILL : 1801,
    PTERR_GUILD_BOSS_NO_PLAY_COUNT : 1802,
    PTERR_GUILD_BOSS_NOT_OPEN : 1803,
    PTERR_GUILD_BOSS_REWARD_NOT_ACTIVE : 1804,
    PTERR_GUILD_BOSS_REWARD_ALREADY_GET : 1805,
    PTERR_GUILD_BOSS_NO_BUY_COUNT : 1806,
    PTERR_DARK_BATTLE_STATUS_WRONG : 1901,
    PTERR_DARK_NO_PLAY_COUNT : 1902,
    PTERR_DARK_NO_REFRESH_COUNT : 1903,
    PTERR_DARK_POINT_LACK : 1904,
    PTERR_DARK_LEVEL_MAX : 1905,
    PTERR_DARK_NO_DRAW_COUNT : 1906,
    PTERR_DARK_BATTLE_NOT_START : 1907,
    PTERR_GUAZAI_QUALITY_MAX : 2001,
    PTERR_GUAZAI_LEVEL_MAX : 2002,
    PTERR_GUAZAI_STAR_MAX : 2003,
    PTERR_GUAZAI_POS_WRONG : 2004,
    PTERR_GUAZAI_PIECE_LACK : 2005,
    PTERR_GUAZAI_SRCITEM_ERR : 2006,
    PTERR_GUAZAI_CANNOT_REBIRTH : 2007,
    PTERR_GUAZAI_CANNOT_SPLIT : 2008,
    PTERR_GUAZAI_QUALITY_LACK : 2009,
    PTERR_GUAZAI_AWAKE_EXP_MAX : 2010,
    PTERR_GUAZAI_AWAKE_EXP_LACK : 2011,
    PTERR_GUAZAI_AWAKE_LEVEL_MAX : 2012,
    PTERR_GUAZAI_CANNOT_HECHENG : 2013,
    PTERR_GUAZAI_HECHENG_QUALITY_NOT_SAME : 2014,
    PTERR_GUAZAI_HECHENG_ITEM_LACK : 2015,
    PTERR_MYSTERY_ALREADY_ACTIVE : 2101,
    PTERR_MYSTERY_MIXLEVEL_LACK : 2102,
    PTERR_MYSTERY_LEVEL_MAX : 2103,
    PTERR_DRESS_ALREADY_GET : 2151,
    PTERR_DRESS_LEVEL_MAX : 2152,
    PTERR_MEMBER_SPECIAL_LEVEL_MAX : 2201,
    PTERR_MEMBER_SPECIAL_QUALITY_MAX : 2202,
    PTERR_MEMBER_SPECIAL_QUALITY_LACK : 2203,
    PTERR_MEMBER_SPECIAL_LEVEL_LACK : 2204,
    PTERR_MEMBER_SPECIAL_LEVEL_PLAYER_LIMIT : 2205,
    PTERR_COMMANDER_BATTLEFIELD_ALREADY_ACTIVE : 2251,
    PTERR_COMMANDER_BATTLEFIELD_NOT_ACTIVE : 2252,
    PTERR_COMMANDER_BATTLEFIELD_COND_LACK : 2253,
    PTERR_COMMANDER_ALREADY_ACTIVE : 2254,
    PTERR_COMMANDER_NOT_ACTIVE : 2255,
    PTERR_COMMANDER_LEVEL_MAX : 2256,
    PTERR_COMMANDER_QUALITY_MAX : 2257,
    PTERR_COMMANDER_STAR_MAX : 2258,
    PTERR_COMMANDER_MAINBATTLE_NOT_PUTOFF : 2259,
    PTERR_COMMANDER_ALREADY_PUTON : 2260,
    PTERR_PATROL_TASK_ALREADY_HAVE_MEMBER : 2301,
    PTERR_PATROL_TASK_ALREADY_FINISH : 2302,
    PTERR_PATROL_TASK_NOT_START : 2303,
    PTERR_PATROL_TASK_NOT_FINISH : 2304,
    PTERR_PATROL_MEMBER_ALREADY_ON : 2305,
    PTERR_PATROL_MEMBER_SP_LACK : 2306,
    PTERR_PATROL_MEMBER_SP_MAX : 2307,
    PTERR_PATROL_MEMBER_SP_BUY_MAX : 2308,
    PTERR_PATROL_NO_TASK_REFRESH : 2309,
    PTERR_EXPLORE_CAMP_NOT_PASS : 2401,
    PTERR_EXPLORE_NAILI_LACK : 2402,
    PTERR_EXPLORE_PROGRESS_MAX : 2403,
    PTERR_EXPLORE_PROGRESS_LACK : 2404,
    PTERR_EXPLORE_GEM_CLOSE : 2405,
    PTERR_EXPLORE_NAILI_MAX : 2406,
    PTERR_EXPLORE_GEM_TIMES_LACK : 2407,
    PTERR_HONOR_LACK : 2451,
    PTERR_HONOR_RANK_MAX : 2452,
    PTERR_HONOR_ALREADY_GIVEN : 2453,
    PTERR_HONOR_TONGSHUAI_LEVEL_PLAYER_MAX : 2454,
    PTERR_HONOR_TONGSHUAI_LEVEL_MAX : 2455,
    PTERR_MAINTASK_MAINCAMP_NOT_PASS : 2461,
    PTERR_MAINTASK_ALREADY_GOT : 2462,
    PTERR_MAINTASK_PROGRESS_LACK : 2463,
    PTERR_MAINTASK_ENDLESS_RANK_LACK : 2464,
    PTERR_MAINTASK_BUILD_BASE_LEVEL_LACK : 2465,
    PTERR_MAINTASK_BUILD_RES_LEVEL_LACK : 2466,
    PTERR_MAINTASK_BUILD_TECH_LEVEL_LACK : 2467,
    PTERR_MAINTASK_BUILD_EQUIP_LEVEL_LACK : 2468,
    PTERR_MAINTASK_BUILD_BOOM_LACK : 2469,
    PTERR_MAINTASK_BOSSTOWER_FLOOR_LACK : 2470,
    PTERR_MAINTASK_HEROCAMP_NOT_PASS : 2471,
    PTERR_BUILD_IS_BUILDING : 2501,
    PTERR_BUILD_NOT_BUILDING : 2502,
    PTERR_BUILD_FINISH : 2503,
    PTERR_BUILD_QUEUE_FULL : 2504,
    PTERR_BUILD_IRON_LACK : 2505,
    PTERR_BUILD_COPPER_LACK : 2506,
    PTERR_BUILD_QUARTZ_LACK : 2507,
    PTERR_BUILD_BASE_LEVEL_LACK : 2508,
    PTERR_BUILD_ISLOCK : 2509,
    PTERR_BUILD_RES_LEVEL_LACK : 2510,
    PTERR_BUILD_TECH_LEVEL_LACK : 2511,
    PTERR_BUILD_EQUIP_LEVEL_LACK : 2512,
    PTERR_BUILD_UNLOCK_BEFORE : 2513,
    PTERR_BUILD_BEFORE_LEVEL_LACK : 2514,
    PTERR_BUILD_LEVEL_MAX : 2515,
    PTERR_BUILD_EQUIP_PAPER_LACK : 2516,
    PTERR_BUILD_NOT_FINISH : 2517,
    PTERR_BUILD_EQUIP_REWARD_ALREADY_GET : 2518,
    PTERR_BUILD_EQUIP_REWARD_RESET_MAX : 2519,
    PTERR_BUILD_TASK_FINISH : 2520,
    PTERR_BUILD_TASK_NOT_COND : 2521,
    PTERR_FULI_FEEDBACK_HEAPCZ_LACK : 2551,
    PTERR_NEW_TASK_VAR_LACK : 2620,
    PTERR_FLYING_CHESS_DICE_STEP_ERROR : 2700,
    PTERR_FLYING_CHESS_DICE_COUNT_ERROR : 2701,
    PTERR_FLYING_CHESS_REACH_MAX_STEP : 2702,
    PTERR_FLYING_CHESS_WRONG_EVENT : 2703,
    PTERR_FLYING_CHESS_HONOR_LACK : 2704,
    PTERR_FLYING_CHESS_DICE_LACK : 2705,
    PTERR_FLYING_CHESS_REMOTE_DICE_LACK : 2706,
    PTERR_FLYING_CHESS_HAS_EXCHANGED : 2707,
    PTERR_FLYING_CHESS_INTEGRATION_LACK : 2708,
    PTERR_RANK_DIANZAN_ALREADY : 2751,
    PTERR_FULL_BOSS_ATTACK_TIMES_LACK : 2800,
    PTERR_FULL_BOSS_NOT_OPEN : 2801,
    PTERR_FULL_BOSS_NOT_OPEN_ATTACK : 2802,
    PTERR_FULL_BOSS_NOT_OPEN_JUJI : 2803,
    PTERR_FULL_BOSS_ALREADY_REWARD : 2804,
    PTERR_FULL_BOSS_GOLD_QH_MAX : 2805,
    PTERR_FULL_BOSS_DIAMOND_QH_MAX : 2806,
    PTERR_FULL_BOSS_NOT_START : 2807,
    PTERR_FULL_BOSS_REWARD_DAMAGE_LACK : 2808,
    PTERR_FULL_BOSS_NOT_OPEN_QH : 2809,
    PTERR_FULL_BOSS_JUJI_MAX : 2810,
    PTPARAM_SP_INIT : 11,
    PTPARAM_SP_MAX : 12,
    PTPARAM_SKILLPOINT_MAX : 21,
    PTPARAM_SKILLPOINT_DIAMON : 22,
    PTPARAM_SKILLPOINT_BUYCOUNT : 23,
    PTPARAM_LEADEREQUIP_QH_ITEMID : 31,
    PTPARAM_LEADER_DEFAULT_ICON : 32,
    PTPARAM_MEMBER_EQUIP_CUIQU_LEVEL : 35,
    PTPARAM_ENDLESS_POWERPOINT_MAX : 37,
    PTPARAM_SAODANG_LEVEL_REQ : 38,
    PTPARAM_INIT_MEMBER : 39,
    PTPARAM_LEADEREQUIP_QH_QUALITY : 40,
    PTPARAM_MEMBER_EQUIP_STARUP_QUALITY : 41,
    PTPARAM_GUAZAI_STARUP_QUALITY : 42,
    PTPARAM_FULI_GEM_KEY_DIAMOND : 111,
    PTPARAM_EQUIP_COMBAT_POINT : 121,
    PTPARAM_MAX_NO_OF_PICS_WHEN_UPGRADE : 141,
    PTPARAM_GUILD_LUCKY_DRAW_NEED_LIKE_CLICKS : 151,
    PTPARAM_GUILD_AUTO_JOIN_LEVEL : 156,
    PTPARAM_GUILD_GET_CAPTAIN_CONDITION_TIME_IN_HOUR : 157,
    PTPARAM_GUILD_GET_CAPTAIN_CONDITION_COMBAT_RANKING_NO : 158,
    PTPARAM_GUILD_CREATE_DIAMOND : 160,
    PTPARAM_GUILD_ENDLESS_RANKING_LIKE_CLICKS_LIMIT : 161,
    PTPARAM_GUILD_BOSS_START_SECOND : 162,
    PTPARAM_GUILD_BOSS_END_SECOND : 163,
    PTPARAM_GUILD_BOSS_FREE_COUNT : 164,
    PTPARAM_ENDLESS_PACKAGE_DROP_MAX : 170,
    PTPARAM_ENDLESS_COMBATPOINT_SUPRESS_ROUND : 190,
    PTPARAM_ARENA_COMBAT_ADDTION : 200,
    PTPARAM_ARENA_BETTER_CHALLENGER_WIN_PROB : 201,
    PTPARAM_MONTH_CARD_LIMIT_DAY : 210,
    PTPARAM_ENDLESS_CHAN_TIME : 220,
    PTPARAM_ENDLESS_CHAN_ITEM_ID : 221,
    PTPARAM_ENDLESS_CHAN_ITEM_COUNT : 222,
    PTPARAM_ENDLESS_CHAN_REFRESH_COST : 223,
    PTPARAM_ROLEEQUIP_BAG_SIZE : 231,
    PTPARAM_NEBULA_ROB_REFRESH_TYPE : 249,
    PTPARAM_DARK_PLAY_COUNT : 261,
    PTPARAM_DARK_SAODANG_DIAMOND : 262,
    PTPARAM_DARK_SAODANG_VIP_LEVEL : 263,
    PTPARAM_COMMANDER_BATTLEFIELD1_LEVEL : 264,
    PTPARAM_COMMANDER_BATTLEFIELD2_LEVEL : 265,
    PTPARAM_COMMANDER_BATTLEFIELD3_LEVEL : 266,
    PTPARAM_COMMANDER_TREASURE_ITEMID : 267,
    PTPARAM_PATROL_MEMBER_INITSP : 268,
    PTPARAM_PATROL_TIME_TO_DIAMOND : 269,
    PTPARAM_PATROL_REFRESH_TYPE : 270,
    PTPARAM_EXPLORE_NAILI_RECOVER_TIME : 271,
    PTPARAM_BUILD_TIME_TO_DIAMOND : 272,
    PTPARAM_BUILD_CANCEL_PER : 273,
    PTPARAM_BUILD_LEVEL_PER : 274,
    PTPARAM_EXPLORE_YJ_VIP : 275,
    PTPARAM_MEMBER_EQUIP_YJ_LEVELUP_VIP : 276,
    PTPARAM_ZIZUAN_EXCHANGE_VIP : 280,
    PTPARAM_WAR_BUYREWARD_TYPE : 282,
    PTPARAM_BOSSTOWER_MTBOXOPEN_TYPE : 283,
    PTPARAM_FLYING_CHESS_TEN_GO_VIP : 284,
    PTPARAM_FLYING_CHESS_TEN_VALUE : 285,
    PTPARAM_DIANZAN_DIAMOND : 287,
    PTPARAM_DIANZAN_DROP_PACKAGE : 288,
    PTPARAM_AMS_LOTT_VIP : 289,
    PTPARAM_AMS_LOTT_LIMIT : 290,
    PTPARAM_FULL_BOSS_JUJI_TYPE : 292,
    PTPARAM_FULL_BOSS_DIAMOND_QH_TYPE : 293,
    PTPARAM_FULL_BOSS_GOLD_QH : 294,
    PTPARAM_FULL_BOSS_DIAMOND_QH_ADD_REWARD : 295,
    PTPARAM_MEMBER_EQUIP_REFINE_QUALITY : 296,
    PTPARAM_GUAZAI_AWAKE_QUALITY : 297,
    PTPARAM_FULL_BOSS_ATTACK_COST_TYPE : 298,
    PTPARAM_FULI_CZ_INVITE_USER : 300,
    PTPARAM_TREASURE_ONE_FREE_MAX : 301,
    PTPARAM_RCG_FREE_DIAMOND_MAX : 302,
    PTPARAM_TREASURE_GOLD_FREE_MAX : 303,
    PTPARAM_SP_FREE_GET_MAX : 304,
    PTPARAM_RCG_FREE_DIAMOND : 305,
    PTPARAM_FULI_SHARE_DAILY_PACKAGE : 306,
    PTPARAM_ENDLESS_GOLD_DAYMAX : 307,
    PTPARAM_ENDLESS_CHARGE_DAYMAX : 308,
    PTPARAM_ENDLESS_CHARGE_ITEMID : 309,
    PT_MAX_ACCOUNT_LEN : 101,
    PT_MAX_PASSWORD_LEN : 33,
    PT_MAX_DEVICEID_LEN : 200,
    PT_MAX_VER_LEN : 32,
    PT_MAX_ROLENAME_LEN : 32,
    PT_MAX_AVATAR_LEN : 1024,
    PT_MIN_ROLENAME_WORD : 2,
    PT_MAX_ROLENAME_WORD : 6,
    PT_TOKEN_LEN : 128,
    PT_MAX_ICON : 50,
    PT_MAX_XUWAN_SESSION_LEN : 64,
    PT_XUWAN_ERRDESC_LEN : 64,
    PTPROP_HP : 1,
    PTPROP_SkillTime : 2,
    PTPROP_Attack : 3,
    PTPROP_Defence : 4,
    PTPROP_CritDamage : 5,
    PTPROP_CritRate : 6,
    PTPROP_HPAddPer : 7,
    PTPROP_AttackAddPer : 8,
    PTPROP_DefenceAddPer : 9,
    PTPROP_EndlessAddPer : 10,
    PTPROP_WingManAttack : 11,
    PTPROP_ThrowingPower : 12,
    PTPROP_MissilePower : 13,
    PTPROP_AssistAttack : 14,
    PTPROP_HPGrowUp : 15,
    PTPROP_AttackGrowUp : 16,
    PTPROP_DefenceGrowUp : 17,
    PTPROP_WingManPromotion : 18,
    PTPROP_ThrowingPromotion : 19,
    PTPROP_MissilePromotion : 20,
    PTPROP_AssistPromotion : 21,
    PTPROP_COUNT : 50,
    PTPROP_REQ_ALL : 0,
    PT_DEVICE_IOS : 1,
    PT_DEVICE_ANDROID : 2,
    PT_MAX_SDK_TICKET_LEN : 1024,
    PT_MAX_SDK_ID_LEN : 256,
    PT_DAYPASS_CLOCKTIME : 18000,
    PT_DAYPASS_22_CLOCKTIME : 75600,
    PT_DAYPASS_2230_CLOCKTIME : 81000,
    PT_DAYPASS_2330_CLOCKTIME : 84600,
    PT_DBPLAYER_REQTYPE_VIEW : 1,
    PT_DBPLAYER_ACTIVITY_DATA : 2,
    PT_DBPLAYER_REQTYPE_ARENA : 3,
    PT_DBPLAYER_REQTYPE_DIANZAN : 4,
    PT_SYSTEM_MEMBER : 1,
    PT_SYSTEM_BAG : 5,
    PT_SYSTEM_STORE : 8,
    PT_SYSTEM_TREASURE : 9,
    PT_SYSTEM_DAILY : 10,
    PT_SYSTEM_MAIL : 13,
    PT_SYSTEM_SETTING : 14,
    PT_SYSTEM_SIGNIN : 15,
    PT_SYSTEM_LOTTERY : 16,
    PT_SYSTEM_FULI_CZ : 17,
    PT_SYSTEM_FULI_SEVEN : 18,
    PT_SYSTEM_FULI_GIFT : 21,
    PT_SYSTEM_CAMP_MAIN : 22,
    PT_SYSTEM_CAMP_JY : 23,
    PT_SYSTEM_ENDLESS : 24,
    PT_SYSTEM_ARENA : 25,
    PT_SYSTEM_MIXPLANES : 28,
    PT_SYSTEM_GUILD : 29,
    PT_SYSTEM_ACHIEVE : 30,
    PT_SYSTEM_SAODANG : 31,
    PT_SYSTEM_BOSSTOWER : 32,
    PT_SYSTEM_MEMBER_STORE : 36,
    PT_SYSTEM_NUCLEAR : 37,
    PT_SYSTEM_ARENA_STORE : 39,
    PT_SYSTEM_BOSSTOWER_STORE : 40,
    PT_SYSTEM_ENDLESS_CHANLLEGE : 42,
    PT_SYSTEM_ROLEEQUIP : 43,
    PT_SYSTEM_MIBAO_STORE : 44,
    PT_SYSTEM_MEMBER_TECH : 45,
    PT_SYSTEM_HEROCAMP : 46,
    PT_SYSTEM_NEBULA : 47,
    PT_SYSTEM_VIP_STORE : 48,
    PT_SYSTEM_WAR : 49,
    PT_SYSTEM_ZIZUAN : 50,
    PT_SYSTEM_RANK : 51,
    PT_SYSTEM_FUND : 52,
    PT_SYSTEM_NUCLEAR_STORE : 53,
    PT_SYSTEM_TOWER_FLOOR_STORE : 54,
    PT_SYSTEM_GUILD_BOSS : 56,
    PT_SYSTEM_DARK : 57,
    PT_SYSTEM_MYSTERY : 58,
    PT_SYSTEM_DRESS : 59,
    PT_SYSTEM_COMMANDER : 60,
    PT_SYSTEM_PATROL : 61,
    PT_SYSTEM_DIFFICULT_CAMP : 62,
    PT_SYSTEM_EXPLORE : 63,
    PT_SYSTEM_MEMBER_EQUIP_STARUP : 64,
    PT_SYSTEM_BUILD : 65,
    PT_SYSTEM_BOSSTOWER_SAODANG : 66,
    PT_SYSTEM_MEMBER_SPECIAL : 67,
    PT_SYSTEM_GUAZAI_QUALITYUP : 68,
    PT_SYSTEM_GUAZAI_STARUP : 69,
    PT_SYSTEM_GUAZAI_HECHENG : 70,
    PT_SYSTEM_RONGLU : 71,
    PT_SYSTEM_GIVEN : 72,
    PT_SYSTEM_FULI_VIP : 73,
    PT_SYSTEM_MEMBER_EQUIP_TECH_LEVEL : 74,
    PT_SYSTEM_GUAZAI_TREASURE : 75,
    PT_SYSTEM_FEEDBACK : 76,
    PT_SYSTEM_MEMBER_STARUP : 77,
    PT_SYSTEM_ENDLESS_QH : 78,
    PT_SYSTEM_ITEM_TREASURE : 79,
    PT_SYSTEM_COMMANDER_TREASURE : 80,
    PT_SYSTEM_MEMBER_PIECE_COM : 81,
    PT_SYSTEM_EXPLORE_OPEN : 82,
    PT_SYSTEM_NEBULA_STORE : 83,
    PT_SYSTEM_FLYING_CHESS : 84,
    PT_SYSTEM_MEMBER_WEAPON : 85,
    PT_SYSTEM_FULL_BOSS : 86,
    PT_SYSTEM_MEMBER_EQUIP_REFINE : 87,
    PT_SYSTEM_GUAZAI_AWAKE : 88,
    PT_CLIENT_EVENT_NEWUSER_GUIDE : 1,
    PT_CLIENT_EVENT_ENTER_GAME : 2,
    PT_CLIENT_EVENT_CLICK_NOTICE : 3,
    PT_CLIENT_EVENT_NORESPONSE : 4,
    PT_PLAYER_MAX_LEVEL : 100,
    PT_MEMBER_MAX_COUNT : 30,
    PT_MEMBER_WEAPON_MAX_COUNT : 99,
    PT_GUAZAI_MAX_COUNT : 4,
    PT_GUAZAI_STARUP_TYPE_1 : 1,
    PT_GUAZAI_STARUP_TYPE_2 : 2,
    PT_ITEMTYPE_LEADEREQUIP : 1,
    PT_ITEMTYPE_LEADEREQUIP_COMPONENT : 2,
    PT_ITEMTYPE_STONE : 3,
    PT_ITEMTYPE_MEMBER_EQUIP : 9,
    PT_ITEMTYPE_QIANGHUASHI : 10,
    PT_ITEMTYPE_ROLEEQUIP : 13,
    PT_ITEMTYPE_ROLEEQUIP_PIECE : 14,
    PT_ITEMTYPE_ROLEEQUIP_GEM : 15,
    PT_ITEMTYPE_PET_PIECE : 16,
    PT_ITEMTYPE_MATERIAL : 20,
    PT_ITEMTYPE_MEMBER_FRAG : 30,
    PT_ITEMTYPE_MEMBER_EXP_POTION : 31,
    PT_ITEMTYPE_ENERGY_SCROLL : 32,
    PT_ITEMTYPE_MEMBER_EQUIP_QH : 40,
    PT_ITEMTYPE_MATERIAL_OTHER : 41,
    PT_ITEMTYPE_CHEST : 50,
    PT_ITEMTYPE_DROPPACKAGE : 51,
    PT_ITEMTYPE_SELECT_CHEST : 52,
    PT_ITEMTYPE_GUAZAI : 53,
    PT_ITEMTYPE_GUAZAI_EXPITEM : 54,
    PT_ITEMTYPE_RENAME_CARD : 62,
    PT_ITEMTYPE_REAL : 63,
    PT_ITEMTYPE_LIFE : 64,
    PT_ITEMTYPE_AMS_INTEGRAL : 65,
    PT_ITEMTYPE_ENDLESS_STATUS : 98,
    PT_ITEMTYPE_VALUE : 99,
    PT_ITEMID_GOLD_1 : 1,
    PT_ITEMID_GOLD_1W : 2,
    PT_ITEMID_DIAMOND_1 : 3,
    PT_ITEMID_PIECE_CRYSTAL : 4,
    PT_ITEMID_ARENA_POINT : 7,
    PT_ITEMID_ZIZUAN : 10,
    PT_ITEMID_NEBULA_ENERGY : 11,
    PT_ITEMID_EXP_1 : 13,
    PT_ITEMID_ACTIVE_1 : 14,
    PT_ITEMID_SP_1 : 15,
    PT_ITEMID_VIPEXP : 17,
    PT_ITEMID_EXPLORE_NAILI : 28,
    PT_ITEMID_HONOR : 29,
    PT_ITEMID_IRON : 30,
    PT_ITEMID_COPPER : 31,
    PT_ITEMID_QUARTZ : 32,
    PT_ITEMID_TRIAL : 35,
    PT_ITEMID_RENAME_CARD : 5500,
    PT_ITEMID_MONEY_MAX : 5,
    PT_ITEMID_SAODANG_TICKET : 211,
    PT_ITEMID_ARENA_CHALLENGE_TICKET : 213,
    PT_ITEMID_WARM_STONE : 502,
    PT_ITEMID_HOT_STONE : 503,
    PT_ITEMID_TECH_CRYSTAL : 600,
    PT_ITEMID_EXPLORE_CHEST1 : 41002,
    PT_ITEMID_EXPLORE_KEY1 : 41003,
    PT_ITEMID_EXPLORE_CHEST2 : 41004,
    PT_ITEMID_EXPLORE_KEY2 : 41005,
    PT_ITEMID_EXPLORE_CHEST3 : 41006,
    PT_ITEMID_EXPLORE_KEY3 : 41007,
    PT_ITEMID_AMS_INTEGRAL : 45003,
    PT_ITEMID_MEMBER_WEAPON_EXP1 : 95,
    PT_ITEMID_MEMBER_WEAPON_EXP2 : 96,
    PT_ITEMID_MEMBER_WEAPON_EXP3 : 97,
    PT_ITEMID_WAR_POINT : 36500,
    PT_ITEMID_FLYING_CHESS_HONOR : 99,
    PT_ITEMID_FLYING_CHESS_DICE : 47000,
    PT_ITEMID_FLYING_CHESS_REMOTE_DICE : 47001,
    PT_ITEM_HECHENG_COUNT : 4,
    PT_ITEM_ZHUANHUA_COUNT : 2,
    PT_ITEM_SELLTYPE_NORMAL : 1,
    PT_ITEM_SELLTYPE_NOTSELL : 2,
    PT_ITEM_SELLTYPE_CONFIRM : 3,
    PT_COMPOSE_TYPE_ITEM : 1,
    PT_COMPOSE_TYPE_PACKAGE : 2,
    PT_SP_RECOVER_TIME : 360,
    PT_SP_GOLD_GETBACK : 1,
    PT_SP_DIAMOND_GETBACK : 2,
    PT_LEADEREQUIP_POS_MAX : 6,
    PT_ROLEEQUIP_PART_MAX : 8,
    PT_ROLEEQUIP_BAG_MAX : 999,
    PT_ROLEEQUIP_SPLIT_NORMAL : 0,
    PT_ROLEEQUIP_SPLIT_DIAMOND : 1,
    PT_ROLEEQUIP_QIANGHUA_NORMAL : 0,
    PT_ROLEEQUIP_QIANGHUA_DIAMOND : 1,
    PT_MEMBER_QUALITY_GREEN : 1,
    PT_MEMBER_QUALITY_BLUE : 5,
    PT_MEMBER_QUALITY_PURPLE : 9,
    PT_MEMBER_EQUIP_POSCOUNT : 6,
    PT_MEMBER_SKILL_COUNT : 5,
    PT_MEMBER_TECH_COUNT : 3,
    PT_MEMBER_EQUIP_TECH_LEVEL : 1,
    PT_MEMBER_EQUIP_TECH_QUALITY : 2,
    PT_MEMBER_EQUIP_TECH_STAR : 3,
    PT_MEMBER_EQUIP_STARUP_TYPE_1 : 1,
    PT_MEMBER_EQUIP_STARUP_TYPE_2 : 2,
    PT_BAGTYPE_NONE : 0,
    PT_BAGTYPE_BAG : 1,
    PT_BAG_MAX_SIZE : 999,
    PT_BAG_ITEM_MAX : 999,
    PT_GMCMD_PARAM_COUNT : 5,
    PT_GMCMD_PARAM_LEN : 32,
    PT_CAMPAIGN_MAX_COUNT : 100,
    PT_CHAPTER_MAX_COUNT : 100,
    PT_REWARD_NOTACTIVE : 0,
    PT_REWARD_ACTIVE : 1,
    PT_REWARD_DRAWN : 2,
    PT_CAMPTYPE_NONE : 0,
    PT_CAMPTYPE_MAIN : 1,
    PT_CAMPTYPE_JINGYING : 2,
    PT_CAMPTYPE_ENDLESS : 4,
    PT_CAMPTYPE_BOSSTOWER : 5,
    PT_CAMPTYPE_NUCLEAR : 6,
    PT_CAMPTYPE_HERO : 7,
    PT_CAMPTYPE_WAR : 8,
    PT_CAMPTYPE_DARK : 9,
    PT_CAMPTYPE_DIFFICULT : 10,
    PT_CAMPTYPE_FULLBOSS : 11,
    PT_CAMP_RESULT_WIN : 1,
    PT_CAMP_RESULT_LOSE : 2,
    PT_CAMP_BAGSLOT_RESERVED : 3,
    PT_CAMP_CHAPTER_REWARD_SIZE : 1000,
    PT_QUIT_BATTLE_WIN : 0,
    PT_QUIT_BATTLE_LOSE : 1,
    PT_QUIT_BATTLE_GIVEUP : 2,
    PT_QUIT_BATTLE_ERROR : 3,
    PT_QUIT_BATTLE_DISCONNECT : 43,
    PT_ENDLESS_STATUS_MAX_COUNT : 100,
    PT_BOSSTOWER_CAMP_COUNT : 5,
    PT_BOSSTOWER_BUFF_COUNT : 6,
    PT_NUCLEAR_REWARD_FLAG_SIZE : 10,
    PT_NUCLEAR_RANK_LIST_SIZE : 10,
    PT_HEROCAMP_COUNT : 1000,
    PT_HEROCAMP_TYPE_NORMAL : 1,
    PT_HEROCAMP_TYPE_BOSS : 2,
    PT_HEROCAMP_TYPE_CHEST : 3,
    PT_STORE_NORMAL : 1,
    PT_STORE_BLACK : 2,
    PT_STORE_TENDER : 3,
    PT_STORE_ARENA : 4,
    PT_STORE_MEMBER : 5,
    PT_STORE_BOSSTOWER : 6,
    PT_STORE_NUCLEAR : 7,
    PT_STORE_TOWER_FLOOR : 8,
    PT_STORE_NEBULA : 9,
    PT_STORE_WAR : 10,
    PT_STORE_MIBAO : 21,
    PT_STORE_VIP : 22,
    PT_STORE_ITEM_MAX : 8,
    PT_STORE_NUCLEAR_ITEM_MAX : 50,
    PT_STORE_TOWER_FLOOR_ITEM_MAX : 5,
    PT_STORE_RANK_ITEM_MAX : 100,
    PT_STORE_DEVIL_ITEM_MAX : 100,
    PT_STORE_ARENA_RANK_STOREID1 : 1,
    PT_STORE_ARENA_RANK_STOREID2 : 2,
    PT_STORE_FLYING_CHESS : 11,
    PT_TREASURE_GOLD : 1,
    PT_TREASURE_WARM : 2,
    PT_TREASURE_HOT : 3,
    PT_TREASURE_COST_GOLD : 1,
    PT_TREASURE_COST_DIAMOND : 2,
    PT_TREASURE_MAX : 50,
    PT_LOTTERY_FREE_CHANCE : 3,
    PT_LOTTERY_ACTIVE_LIMIT : 100,
    PT_LOTTERY_CG_FREE : 1,
    PT_LOTTERY_CG_ONE : 2,
    PT_LOTTERY_CG_TEN : 3,
    PT_LOTTERY_EFFECTIVE : 14400,
    PT_SIGNIN_MAX : 7,
    PT_RCG_TYPE_TIME : 2,
    PT_RCG_TYPE_NORMAL : 3,
    PT_RCG_TYPE_AMS : 9,
    PT_RCG_MONTH_CARD : 1,
    PT_RCG_HIGH_MONTH_CARD : 2,
    PT_RCG_TIMECARD_COUNT : 2,
    PT_RCG_RECORD_MAX : 100,
    PT_RCG_HUIKUI_VIP : 1,
    PT_RCG_HUIKUI_BUY_MONTHCARD : 2,
    PT_RCG_HUIKUI_RECHARGE : 3,
    PT_RCG_HUIKUI_COUNT : 99,
    PT_MAX_MAIL_SUBJECT : 50,
    PT_MAX_MAIL_CONTENT : 600,
    PT_MAX_MAIL_ATTACHMENT : 5,
    PT_MAIL_BOX_SIZE : 300,
    PT_MAIL_LIST_MAX : 1000,
    PT_MAIL_TYPE_SYS : 1,
    PT_MAIL_HAVE_READ : 1,
    PT_MAIL_EXPIRE_TIME : 604800,
    PT_MAX_MASSMAIL_ATTACHMENT_ROLE_COUNT : 999999,
    PT_MAX_MASSMAIL_ATTACHMENT_GROUP_COUNT : 100,
    PT_MAX_MASSMAIL_BAG_SIZE : 1000,
    PT_MASSMAIL_STRVAR_LEN : 30,
    PT_MASSMAIL_RECEIVER_MAX : 100000,
    PT_MASSMAIL_RECEIVER_GROUP_MAX : 100000,
    PT_GUILD_MEDAL_MAX_COUNT : 99,
    PT_MAX_GUILDMSG_LEN : 255,
    PT_MAX_ANNOUNCEMENT_LEN : 255,
    PT_MAX_MSGHISTORY_COUNT : 20,
    PT_MAX_GUILDNAME_LEN : 32,
    PT_MAX_GUILD_MEMBERS : 99,
    PT_MAX_GUILD_REQS : 50,
    PT_MAX_GUILD_ADMIN_COUNT : 5,
    PT_GUILD_LIST_MAX_COUNT : 6,
    PT_MAX_GUILDANNOUNCEMENT_LEN : 255,
    PT_MIN_GUILDNAME_WORD : 4,
    PT_MAX_GUILDNAME_WORD : 8,
    PT_GUILD_ROLE_LEVEL : 30,
    PT_GUILD_APPLY_INTERVAL : 3600,
    PT_GUILD_MAX_REQS : 25,
    PT_GUILD_REQ_CLEARTIME : 259200,
    PT_GUILD_DIAMOND_REFUND_LEVEL : 999,
    PT_GUILD_MAX_LEVEL : 10,
    PT_GUILD_ACTIVE_MEDAL_TYPE_NONE : 1,
    PT_GUILD_ACTIVE_MEDAL_TYPE_PLAYERLEVEL : 2,
    PT_GUILD_ACTIVE_MEDAL_TYPE_HISCONTRIBUTE : 3,
    PT_GUILD_MEDAL_MAX_LEVEL : 100,
    PT_GUILD_MEDAL_UPGRADE_TYPE_GOLD : 1,
    PT_GUILD_MEDAL_UPGRADE_TYPE_DIAMOND : 2,
    PT_GUILD_MEDAL_UPGRADE_TYPE_CONTRIBUTE : 3,
    PT_GUILD_MEDAL_UPGRADE_TYPE_GOLD_AND_CONTRIBUTE : 4,
    PT_GUILD_DIAMOND_REFUND : 500,
    PT_GUILD_MAX_MSG_COUNT : 20,
    PT_MAX_GUILD_BUBBLE : 10,
    PT_GUILD_LIKE_MAX_COUNT : 4,
    PT_GUILD_LIST_RAN_MAX_COUNT : 6,
    PT_GUILD_LIST_RAN_TYPE_NORMAL : 1,
    PT_GUILD_LIST_RAN_TYPE_RECOM : 2,
    PT_GUILD_HONGBAO_RAN_ITEM_MAX : 10,
    PT_GUILD_BOSSEVENT_MAX : 10,
    PT_GUILD_BOSSEVENT_CHANLLEGE : 1,
    PT_GUILD_BOSSEVENT_KILL : 2,
    PT_GUILD_BOSS_REWARD_FLAG_SIZE : 10,
    PT_GUILD_BOSS_PLAYER_RANK_SIZE : 10,
    PT_GUILD_BOSS_GUILD_RANK_SIZE : 10,
    PT_SHORT_MSG_LEN : 100,
    PT_FORBID_COUNT_MAX : 100,
    PT_QUERY_SIMPLEPLAYER_MAX : 1000,
    PT_MODIFY_PLAYER_MAX : 100,
    PT_NOTICE_TITLE_LEN : 100,
    PT_NOTICE_BODY_LEN : 4000,
    PT_NOTICE_MAX_COUNT : 100,
    PT_NOTICE_TYPE_SCROLL : 9,
    PT_FORBID_LOGIN : 1,
    PT_FORBID_CHAT : 2,
    PT_FORBID_CHAT_AD : 3,
    PT_MODIFY_PLAYER_EDIT : 1,
    PT_MODIFY_PLAYER_ADDITEMS : 2,
    PT_MODIFY_PLAYER_DELITEMS : 3,
    PT_MODIFY_PLAYER_CLEAR_BOSSTOWER : 4,
    PT_MODIFY_PLAYER_CLEAR_ENDLESS : 5,
    PT_MODIFY_PLAYER_CLEAR_NUCLEAR : 6,
    PT_OPID_MAX_COUNT : 10000,
    PT_MD5_LEN : 17,
    PT_WEAPONUP_LEVELUP : 1,
    PT_WEAPONUP_SUPER : 2,
    PT_CRAZY_REMAINING : 8000,
    PT_BUFF_FORHERO : 1,
    PT_BUFF_FORBOSS : 2,
    PT_DAILY_ACTIVE_MAX : 10,
    PT_DAILY_TASK_MAX : 99,
    PT_DAILY_TASK_SP1 : 1,
    PT_DAILY_TASK_SP2 : 2,
    PT_DAILY_TASK_CAMPAIGN : 3,
    PT_DAILY_TASK_ENDLESS : 4,
    PT_DAILY_TASK_LEADEREQUIP : 5,
    PT_DAILY_TASK_GUAZAI : 6,
    PT_DAILY_TASK_CZ : 7,
    PT_DAILY_TASK_STORE_REFRESH : 8,
    PT_DAILY_TASK_TREASURE_ONE : 9,
    PT_DAILY_TASK_BUY_SP : 10,
    PT_DAILY_TASK_HIGH_MONTHCARD : 11,
    PT_DAILY_TASK_MONTHCARD : 12,
    PT_DAILY_TASK_TREASURE_GOLD : 13,
    PT_ACHIEVE_MAX : 999,
    PT_ACHIEVE_PLAYER_LEVEL : 1,
    PT_ACHIEVE_COMBAT_POINT : 2,
    PT_ACHIEVE_MEMBER_NUM : 5,
    PT_ACHIEVE_MEMBER_QUALITY : 6,
    PT_ACHIEVE_PET_NUM : 7,
    PT_ACHIEVE_LEADER_EQUIP_STARLEVEL : 12,
    PT_ACHIEVE_LEADER_EQUIP_QUALITY : 13,
    PT_ACHIEVE_CHAPTER : 15,
    PT_ACHIEVE_MEMBER_EQUIP_LEVEL : 17,
    PT_ACHIEVE_CAMP_JINGYING_STAR : 21,
    PT_ACHIEVE_MIX_OPEN : 23,
    PT_ACHIEVE_MIX_POS : 24,
    PT_ACHIEVE_MIX_TECH : 25,
    PT_ACHIEVE_MEMBER_EQUIP_QUALITY : 30,
    PT_ACHIEVE_RANK : 31,
    PT_ACHIEVE_BOSSTOWER_FLOOR : 32,
    PT_ACHIEVE_WAR_FLOOR : 33,
    PT_ACHIEVE_HERO_CAMP : 34,
    PT_ACHIEVE_ROLE_EQUIP_NUM : 35,
    PT_ACHIEVE_ROLE_EQUIP_GEM : 36,
    PT_ACHIEVE_ROLE_EQUIP_LINGWU_LEVEL : 37,
    PT_ACHIEVE_MIBAO_BUY : 38,
    PT_ACHIEVE_NEBULA_ROB : 39,
    PT_ACHIEVE_NEBULA_MINE : 40,
    PT_ACHIEVE_DARK_LEVEL : 41,
    PT_ACHIEVE_BIND : 44,
    PT_FULI_GIFT_LIMIT_MAX : 100,
    PT_FULI_GIFT_VIP_MAX : 50,
    PT_FULI_TYPE_LIMIT_GIFT : 1,
    PT_FULI_TYPE_VIP_GIFT : 2,
    PT_FULI_SEVEN_MAX : 7,
    PT_FULI_SEVEN_DARE_MAX : 128,
    PT_FULI_SEVEN_DAY_PLAYER_LEVEL : 1,
    PT_FULI_SEVEN_DAY_COMBAT_POINT : 2,
    PT_FULI_SEVEN_DAY_CAMPAIGN : 3,
    PT_FULI_SEVEN_DAY_RANK : 4,
    PT_FULI_SEVEN_DAY_ARENA_MAX_RANKING : 5,
    PT_FULI_SEVEN_DAY_DIAMOND_CONSUME : 6,
    PT_FULI_SEVEN_DAY_BOSSTOWER : 7,
    PT_FULI_CZ_MAX : 7,
    PT_FULI_MILLION_MAX : 999,
    PT_ARENA_HIS_MSG_MAX : 10,
    PT_ARENA_RANK_TOP_LIST_MAX_SIZE : 50,
    PT_ARENA_LIST_MAX_SIZE : 13,
    PT_ARENA_REPORT_MAX_SIZE : 10,
    PT_ARENA_CHALLENGE_TICKET_PRICE : 10,
    PT_ARENA_USR_MAX : 999999,
    PT_ARENA_LIKE_MAX_COUNT : 5,
    PT_ARENA_CHALLENGE_USE_COUNT : 0,
    PT_ARENA_CHALLENGE_USE_TICKET : 1,
    PT_ARENA_LIKE_GOLD_REWARD : 5000,
    PT_ARENA_CHALLENGE_WIN_POINTS : 20,
    PT_ARENA_CHALLENGE_LOSE_POINTS : 10,
    PT_ARENA_WIN : 1,
    PT_ARENA_LOSE : 2,
    PT_ARENA_MSG_TYPE_CHALLENGE : 1,
    PT_ARENA_MSG_TYPE_BECHALLENGE : 2,
    PT_ARENA_DATA_UPDATE_INTERVAL : 60,
    PT_ARENA_LIST_LENGTH : 13,
    PT_ARENA_REWARD_DAYS : 7,
    PT_AMS_MAX : 999,
    PT_AMS_STR_LEN : 100,
    PT_AMS_DESC_LEN : 500,
    PT_AMS_RULE_TYPE_DAILY : 1,
    PT_AMS_RULE_TYPE_LONG : 2,
    PT_AMS_RULE_TYPE_DURING : 3,
    PT_AMS_ACT_LIMIT_DAILY : 1,
    PT_AMS_ACT_LIMIT_LONG : 2,
    PT_AMS_ACT_LIMIT_NO : 3,
    PT_AMS_ACT_LIMIT_CYCLE : 4,
    PT_AMS_ACT_STATUS_OK : 1,
    PT_AMS_ACT_COST_FREE : 1,
    PT_AMS_RANK_MAX : 200,
    PT_AMS_RULEID_LEVEL : 1,
    PT_AMS_RULEID_VIP : 2,
    PT_AMS_RULEID_CREATEDAY : 3,
    PT_AMS_RULEID_COMBAT : 4,
    PT_AMS_RULEID_DAY_CONSUME_DIAMOND : 5,
    PT_AMS_RULEID_DAY_CZ_DIAMOND : 6,
    PT_AMS_RULEID_TOTAL_CONSUME_DIAMOND : 7,
    PT_AMS_RULEID_TOTAL_CZ_DIAMOND : 8,
    PT_AMS_RULEID_MEMBER : 9,
    PT_AMS_RULEID_PET : 10,
    PT_AMS_RULEID_ENDLESS_HEAP_SCORE : 11,
    PT_AMS_RULEID_ITEM : 12,
    PT_AMS_RULEID_ACTIVE : 13,
    PT_AMS_RULEID_DURING_CONSUME_DIAMOND : 14,
    PT_AMS_RULEID_DURING_CZ_DIAMOND : 15,
    PT_AMS_RULEID_LOGIN_CONTINUE : 16,
    PT_AMS_RULEID_LOGIN_HEAP : 17,
    PT_AMS_RULEID_ARENA_MAXRANK : 19,
    PT_AMS_RULEID_BUY_SP : 20,
    PT_AMS_RULEID_TREASURE_GOLD : 21,
    PT_AMS_RULEID_TREASURE_WARM : 22,
    PT_AMS_RULEID_TREASURE_HOT : 23,
    PT_AMS_RULEID_DURING_MAX_CZ : 24,
    PT_AMS_RULEID_CONSUME_SP : 25,
    PT_AMS_RULEID_CYCLE_CZ : 26,
    PT_AMS_RULEID_ENDLESS_RANK : 27,
    PT_AMS_RULEID_ENDLESS_WEEK_SCORE : 28,
    PT_AMS_RULEID_DAY_ENDLESS : 29,
    PT_AMS_RULEID_DAY_ENDLESS_PACK : 30,
    PT_AMS_RULEID_DAY_ARENA_POINT : 31,
    PT_AMS_RULEID_CURRENT_TIME : 32,
    PT_AMS_RULEID_DAY_STORE_CONSUME_DIAMOND : 33,
    PT_AMS_RULEID_DURING_STORE_CONSUME_DIAMOND : 34,
    PT_AMS_RULEID_DURING_TREASURE_GOLD : 35,
    PT_AMS_RULEID_DURING_TREASURE_WARM : 36,
    PT_AMS_RULEID_DURING_TREASURE_HOT : 37,
    PT_AMS_RULEID_DAY_SAODANG : 38,
    PT_AMS_RULEID_DAY_LEADER_EQUIP_ITEM_COST : 39,
    PT_AMS_RULEID_DURING_LEADER_EQUIP_ITEM_COST : 40,
    PT_AMS_RULEID_DAY_LOTT : 41,
    PT_AMS_RULEID_DURING_LOTT : 42,
    PT_AMS_RULEID_DURING_COMBAT_UP : 43,
    PT_AMS_RULEID_DURING_SAODANG : 44,
    PT_AMS_RULEID_DAY_SINGLE_CZ : 45,
    PT_AMS_RULEID_DURING_ARENA_MAXRANK : 46,
    PT_AMS_RULEID_DAY_BUY_HERO_SP : 47,
    PT_AMS_RULEID_DURING_BUY_HERO_SP : 48,
    PT_AMS_RULEID_DAY_BOSSTOWER : 49,
    PT_AMS_RULEID_DURING_BOSSTOWER : 50,
    PT_AMS_RULEID_DURING_CZ_HEAP : 51,
    PT_AMS_RULEID_DAY_TREASURE_GUAZAI_TEN : 52,
    PT_AMS_RULEID_DURING_TREASURE_GUAZAI_TEN : 53,
    PT_AMS_RULEID_DAY_ZIZUAN_CONSUME : 54,
    PT_AMS_RULEID_DURING_ZIZUAN_CONSUME : 55,
    PT_AMS_RULEID_DAY_ARENA_TIMES : 56,
    PT_AMS_RULEID_DURING_ARENA_TIMES : 57,
    PT_AMS_RULEID_DAY_EXPLORE_TIMES : 58,
    PT_AMS_RULEID_DURING_EXPLORE_TIMES : 59,
    PT_AMS_RULEID_DAY_DARK_TIMES : 60,
    PT_AMS_RULEID_DURING_DARK_TIMES : 61,
    PT_AMS_RULEID_DAY_PATROL_TIMES : 62,
    PT_AMS_RULEID_DURING_PATROL_TIMES : 63,
    PT_AMS_RULEID_AMS_JOIN : 64,
    PT_AMS_RULEID_ENDLESS_MAX_SCORE : 65,
    PT_AMS_RULEID_DAY_FLYINGCHESS_DICE : 66,
    PT_AMS_RULEID_DURING_FLYINGCHESS_DICE : 67,
    PT_AMS_RULEID_AD : 68,
    PT_AMS_RULEID_SHARE : 69,
    PT_AMS_RULEID_PLAT : 70,
    PT_AMS_RULEID_INVITE : 71,
    PT_AMS_ACT_TYPE_NORMAL : 1,
    PT_AMS_ACT_TYPE_TREASURY : 2,
    PT_AMS_ACT_TYPE_RECHARGE : 3,
    PT_AMS_ACT_TYPE_VAST : 4,
    PT_AMS_ACT_TYPE_HONGBAO : 5,
    PT_AMS_ACT_TYPE_RANK : 6,
    PT_AMS_ACT_TYPE_WEEKFUND : 7,
    PT_AMS_ACT_TYPE_LUXURY_WEEKFUND : 8,
    PT_AMS_HONGBAO_EXCHANGE_ADDTIME : 604800,
    PT_AMS_RANK_SHOW_ADDTIME : 10800,
    PT_AMS_RANK_ALL : 1,
    PT_AMS_RANK_TODAY : 2,
    PT_MEMBER_PIECE_MAX : 50,
    PT_MEMBER_PIECE_COM_SOUL_ITEMID : 45001,
    PT_CARD_CODE_MAX : 100,
    PT_PLAYER_ROLE_TYPE_NORMAL : 0,
    PT_PLAYER_ROLE_TYPE_GUIDER : 1,
    PT_NEBULA_MATERIALS_COUNT : 4,
    PT_NEBULA_ROB_LIST_COUNT : 6,
    PT_NEBULA_MATERIAL_1 : 1,
    PT_NEBULA_MATERIAL_2 : 2,
    PT_NEBULA_MATERIAL_3 : 3,
    PT_NEBULA_MATERIAL_4 : 4,
    PT_NEBULA_ROB_WIN : 1,
    PT_NEBULA_ROB_LOSE : 2,
    PT_NEBULA_USER_NORMAL : 0,
    PT_NEBULA_USER_ROBOT : 1,
    PT_WAR_REWARD_FLAG_SIZE : 3,
    PT_WAR_CUR_POS_SIZE : 9,
    PT_DARK_TECH_SIZE : 9,
    PT_DARK_ITEM_BAG_MAX : 999,
    PT_DARK_STATUS_NONE : 0,
    PT_DARK_STATUS_BATTLE_START : 1,
    PT_DARK_STATUS_BATTLE_END : 2,
    PT_DARK_STATUS_SAODANG : 3,
    PT_ZIZUAN_GIFT_LIMIT_MAX : 50,
    PT_REWARD_CENTER_MAX : 20,
    PT_REWARD_CENTER_ITEM_MAX : 4,
    PT_REWARD_CENTER_PLAYER_MAX : 999999,
    PT_REWARD_CENTER_GUILDBOSS_KILL : 1,
    PT_REWARD_CENTER_GUILDBOSS_RANK_PLAYER : 2,
    PT_REWARD_CENTER_GUILDBOSS_RANK_GUILD : 3,
    PT_REWARD_CENTER_AMS_TREASURY_RANK : 4,
    PT_REWARD_CENTER_BUILD_BOOM_RANK : 5,
    PT_REWARD_CENTER_COMBAT_RANK : 6,
    PT_REWARD_CENTER_LEVEL_RANK : 7,
    PT_REWARD_CENTER_DIZMOND_CZ_RANK : 8,
    PT_REWARD_CENTER_AMS_DAY_RANK : 9,
    PT_REWARD_CENTER_FLYING_CHESS_RANK : 10,
    PT_REWARD_CENTER_WAR_RANK : 11,
    PT_REWARD_CENTER_AMS_ALL_RANK : 12,
    PT_RANKTYPE_COMBAT : 1,
    PT_RANKTYPE_ENDLESS : 2,
    PT_RANKTYPE_LEVEL : 3,
    PT_RANKTYPE_HEROCAMP : 4,
    PT_RANKTYPE_WAR : 5,
    PT_RANKTYPE_BOOM : 6,
    PT_RANKTYPE_DIAMONDCZ : 7,
    PT_RANKTYPE_CHESS : 8,
    PT_RANKTYPE_CHESS_SELF : 9,
    PT_RANK_MEMBER_MAX : 999,
    PT_RANK_MEMBER_COUNT : 10,
    PT_AMS_RANK_MEMBER_COUNT : 50,
    PT_RANK_DIANZAN_MAX : 50,
    PT_FUND_MAX : 50,
    PT_FUND_COND_LEVEL : 1,
    PT_FUND_COND_COMBAT : 2,
    PT_FUND_COND_ENDLESS_RANK : 3,
    PT_MYSTERY_MAX : 8,
    PT_MYSTERY_ACTIVE_TYPE_1 : 1,
    PT_MYSTERY_ACTIVE_TYPE_2 : 2,
    PT_MYSTERY_ACTIVE_TYPE_3 : 3,
    PT_DRESS_MAX : 100,
    PT_SPECIAL_MAX : 10,
    PT_RELATION_MAX : 20,
    PT_RELATION_ITEMTYPE_MEMBER_EQUIP : 1,
    PT_RELATION_ITEMTYPE_GUAZAI : 2,
    PT_RELATION_ITEMTYPE_COMMANDER : 3,
    PT_RELATION_ITEMTYPE_LEADER_EQUIP : 4,
    PT_BATTLEFIELD_MAX : 999,
    PT_COMMANDER_BAG_MAX : 999,
    PT_PATROL_TASK_MAX : 3,
    PT_PATROL_MEMBER_SP_MAX : 3,
    PT_PATROL_MEMBER_SP_BUY_MAX : 100,
    PT_PATROL_MEMBER_SP_RECOVER_TIME : 43200,
    PT_PATROL_MORE_FRAGMENT_STAR : 4,
    PT_EXPLORE_MAX : 256,
    PT_EXPLORE_REWARD_VALUE : 1,
    PT_EXPLORE_REWARD_ITEM : 2,
    PT_EXPLORE_NAILI_USE_MAX : 10000,
    PT_EXPLORE_CHEST_MAX : 6,
    PT_HONOR_TONGSHUAI_MAX : 3,
    PT_HONOR_GIVEN_MAX : 3,
    PT_HONOR_MAINTASK_MAX : 100,
    PT_MAINTASK_MAX : 500,
    PT_MAINTASK_TYPE1 : 1,
    PT_MAINTASK_TYPE2 : 2,
    PT_MAINTASK_TYPE3 : 3,
    PT_MAINTASK_TYPE4 : 4,
    PT_MAINTASK_TYPE5 : 5,
    PT_MAINTASK_TYPE6 : 6,
    PT_MAINTASK_TYPE7 : 7,
    PT_MAINTASK_TYPE8 : 8,
    PT_MAINTASK_TYPE9 : 9,
    PT_MAINTASK_TYPE10 : 10,
    PT_MAINTASK_TYPE11 : 11,
    PT_BUILD_QUEUE_MAX : 3,
    PT_RES_BUILD_MAX : 20,
    PT_TECH_BUILD_MAX : 20,
    PT_EQUIP_BUILD_MAX : 10,
    PT_EQUIP_BUILD_REWARD_MAX : 4,
    PT_BUILD_BASE : 1,
    PT_BUILD_RES : 2,
    PT_BUILD_TECH : 3,
    PT_BUILD_EQUIP : 4,
    PT_BUILD_RES_TYPE_IRON : 1,
    PT_BUILD_RES_TYPE_COPPER : 2,
    PT_BUILD_RES_TYPE_QUARTZ : 3,
    PT_BUILD_TASK_MAX : 99,
    PT_BUILD_TASK_TYPE_BASE : 1,
    PT_BUILD_TASK_TYPE_RES : 2,
    PT_BUILD_TASK_TYPE_TECH : 3,
    PT_BUILD_TASK_TYPE_EQUIP : 4,
    PT_BUILD_TASK_TYPE_BUY : 5,
    PT_BUILD_TASK_TYPE_IRON : 6,
    PT_BUILD_TASK_TYPE_COPPER : 7,
    PT_BUILD_TASK_TYPE_QUARTZ : 8,
    PT_BUILD_TASK_TYPE_TECHUP : 9,
    PT_BUILD_TASK_TYPE_BUILD_EQUIP1 : 10,
    PT_BUILD_TASK_TYPE_BUILD_EQUIP2 : 11,
    PT_BUILD_TASK_TYPE_BUILD_EQUIP3 : 12,
    PT_NEW_TASK_TYPE_CAMP : 1,
    PT_NEW_TASK_TYPE_COMBAT : 2,
    PT_NEW_TASK_TYPE_LEVEL : 3,
    PT_NEW_TASK_TYPE_MIXLEVEL : 4,
    PT_NEW_TASK_TYPE_ENDLESS_RANK : 5,
    PT_FLYING_CHESS_PLAYER_COUNT : 4,
    PT_FLYING_CHESS_DICE_MAX : 6,
    PT_FLYING_CHESS_PLAYER1 : 0,
    PT_FLYING_CHESS_PLAYER2 : 1,
    PT_FLYING_CHESS_PLAYER3 : 2,
    PT_FLYING_CHESS_PLAYER4 : 3,
    PT_FLYING_CHESS_ROUND_TOTAL_STEP : 52,
    PT_FLYING_CHESS_ROUND_PLAYER_STEP : 50,
    PT_FLYING_CHESS_PLAYER_TOTAL_STEP : 56,
    PT_FLYING_CHESS_LINE_TOTAL_STEP : 6,
    PT_FLYING_CHESS_REMOTE_DICE_MAX : 250,
    PT_FLYING_CHESS_GREEN_SLOT : 1,
    PT_FLYING_CHESS_BLUE_SLOT : 4,
    PT_FLYING_CHESS_RED_SLOT : 2,
    PT_FLYING_CHESS_YELLOW_SLOT : 3,
    PT_FLYING_CHESS_EVENT_NONE : 0,
    PT_FLYING_CHESS_EVENT_BATTLE : 1,
    PT_FLYING_CHESS_EVENT_PAPER : 2,
    PT_FLYING_CHESS_EVENT_CHEST : 3,
    PT_FLYING_CHESS_EVENT_LOTTERY : 4,
    PT_FLYING_CHESS_MAX_DICE_LIMIT : 10,
    PT_FLYING_CHESS_BUY_DICE : 1,
    PT_FLYING_CHESS_BUY_REMOTE_DICE : 2,
    PT_FLYING_CHESS_STEP_DELTA : 13,
    PT_FLYING_CHESS_LINE_BASE : 100,
    PT_FLYING_CHESS_DIRECT_FLY_SRC_POS : 18,
    PT_FLYING_CHESS_DIRECT_FLY_DST_POS : 30,
    PT_FLYING_CHESS_EXCHANGE_MAX : 250,
    PT_FULL_BOSS_REWARD_MAX : 100,
    PT_FULL_BOSS_ATTACK_TIMES : 3,
    PT_FULL_BOSS_START_HOUR : 9,
    PT_FULL_BOSS_END_HOUR : 24,
    PT_FULL_BOSS_ATTACK_START_HOUR : 18,
    PT_FULL_BOSS_ATTACK_END_HOUR : 22,
    PT_FULL_BOSS_QH_GOLD : 1,
    PT_FULL_BOSS_QH_GOLD_MAX : 15,
    PT_FULL_BOSS_QH_DIAMOND : 2,
    PT_CPS_TYPE_CREATE : 1,
    PT_CPS_TYPE_LOGIN : 2,
    PT_CPS_TYPE_RCG : 3,

    GMID_PING : 1,
    GMID_BIGDATA_PING : 2,
    GMID_LOG_REQ : 3,
    GMID_LOGIN_ACK : 22,
    GMID_BIG_LOGIN_REQ : 23,
    GMID_BIG_LOGIN_ACK : 24,
    GMID_SMALL_LOGIN_REQ : 25,
    GMID_SMALL_LOGIN_ACK : 26,
    GMID_LOGOUT_REQ : 27,
    GMID_LOGOUT_ACK : 28,
    GMID_BIND_ACCOUNT_REQ : 29,
    GMID_BIND_ACCOUNT_ACK : 30,
    GMID_CREATE_ROLE_REQ : 31,
    GMID_CREATE_ROLE_ACK : 32,
    GMID_CREATE_ROLE_NTF : 33,
    GMID_ROLE_RENAME_REQ : 34,
    GMID_ROLE_RENAME_ACK : 35,
    GMID_KICK_PLAYER_NTF : 41,
    GMID_STAT_FLAGS_REQ : 44,
    GMID_STAT_FLAGS_NTF : 45,
    GMID_CLIENT_EVENT_RPT : 46,
    GMID_ENTERGAME_NTF : 51,
    GMID_VIEW_PLAYER_REQ : 53,
    GMID_VIEW_PLAYER_ACK : 54,
    GMID_PLAYER_PROP_REQ : 55,
    GMID_PLAYER_PROP_ACK : 56,
    GMID_PLAYER_PROP_NTF : 57,
    GMID_COMBAT_POINT_REQ : 58,
    GMID_COMBAT_POINT_ACK : 59,
    GMID_COMBAT_POINT_NTF : 60,
    GMID_PLAYER_INFO_PANEL_REQ : 61,
    GMID_PLAYER_INFO_PANEL_ACK : 62,
    GMID_NOTICE_REQ : 71,
    GMID_NOTICE_ACK : 72,
    GMID_NOTICE_SCROLL_REQ : 73,
    GMID_NOTICE_SCROLL_ACK : 74,
    GMID_NOTICE_CHANGE_NTF : 75,
    GMID_NOTICE_SCROLL_NTF : 77,
    GMID_GMCMD_REQ : 76,
    GMID_DIAMON_CZ_NTF : 81,
    GMID_DIAMOND_CHANGE_NTF : 82,
    GMID_GOLD_CHANGE_NTF : 83,
    GMID_VIP_CHANGE_NTF : 84,
    GMID_VIPEXP_CHANGE_NTF : 85,
    GMID_EXP_CHANGE_NTF : 91,
    GMID_DAY_PASS_NTF : 92,
    GMID_BAG_ITEM_CHANGE_NTF : 101,
    GMID_ITEM_COMPOSE_REQ : 102,
    GMID_ITEM_COMPOSE_ACK : 103,
    GMID_ITEM_SELL_REQ : 104,
    GMID_ITEM_SELL_ACK : 105,
    GMID_ITEM_USE_REQ : 106,
    GMID_ITEM_USE_ACK : 107,
    GMID_ITEM_HECHENG_REQ : 108,
    GMID_ITEM_HECHENG_ACK : 109,
    GMID_ITEM_COMPOSE_BUY_REQ : 112,
    GMID_ITEM_COMPOSE_BUY_ACK : 113,
    GMID_ITEM_BUY_REQ : 114,
    GMID_ITEM_BUY_ACK : 115,
    GMID_ITEM_NTF : 116,
    GMID_ITEM_REAL_REQ : 117,
    GMID_ITEM_REAL_ACK : 118,
    GMID_ITEM_LIFE_REQ : 119,
    GMID_ITEM_LIFE_ACK : 120,
    GMID_ITEMBAG_UNLOCK_REQ : 121,
    GMID_ITEMBAG_UNLOCK_ACK : 122,
    GMID_LEADER_SEL_ICON_REQ : 181,
    GMID_LEADER_SEL_ICON_ACK : 182,
    GMID_SAVE_CHUZHAN_CONF_REQ : 191,
    GMID_SAVE_CHUZHAN_CONF_ACK : 192,
    GMID_CHUZHAN_MIX_LEVELUP_REQ : 193,
    GMID_CHUZHAN_MIX_LEVELUP_ACK : 194,
    GMID_CHUZHAN_MIX_LEVEL_NTF : 195,
    GMID_CHUZHAN_DATA_REQ : 196,
    GMID_CHUZHAN_DATA_ACK : 197,
    GMID_LEADEREQUIP_LEVELUP_REQ : 201,
    GMID_LEADEREQUIP_LEVELUP_ACK : 202,
    GMID_LEADEREQUIP_QUALITYUP_REQ : 203,
    GMID_LEADEREQUIP_QUALITYUP_ACK : 204,
    GMID_MEMBER_ACTIVE_REQ : 221,
    GMID_MEMBER_ACTIVE_ACK : 222,
    GMID_MEMBER_LEVELUP_REQ : 223,
    GMID_MEMBER_LEVELUP_ACK : 224,
    GMID_MEMBER_QUALITYUP_REQ : 225,
    GMID_MEMBER_QUALITYUP_ACK : 226,
    GMID_MEMBER_TECH_REFORM_REQ : 242,
    GMID_MEMBER_TECH_REFORM_ACK : 243,
    GMID_MEMBER_TECH_REPLACE_REQ : 244,
    GMID_MEMBER_TECH_REPLACE_ACK : 245,
    GMID_MEMBER_EQUIP_PUTON_REQ : 251,
    GMID_MEMBER_EQUIP_PUTON_ACK : 252,
    GMID_MEMBER_EQUIP_PUTOFF_REQ : 253,
    GMID_MEMBER_EQUIP_PUTOFF_ACK : 254,
    GMID_MEMBER_EQUIP_QUALITYUP_REQ : 255,
    GMID_MEMBER_EQUIP_QUALITYUP_ACK : 256,
    GMID_MEMBER_EQUIP_SPLIT_REQ : 257,
    GMID_MEMBER_EQUIP_SPLIT_ACK : 258,
    GMID_MEMBER_EQUIP_LEVELUP_REQ : 259,
    GMID_MEMBER_EQUIP_LEVELUP_ACK : 260,
    GMID_MEMBER_EQUIP_TECH_NTF : 261,
    GMID_MEMBER_EQUIP_STARUP_REQ : 262,
    GMID_MEMBER_EQUIP_STARUP_ACK : 263,
    GMID_MEMBER_EQUIP_REBIRTH_REQ : 264,
    GMID_MEMBER_EQUIP_REBIRTH_ACK : 265,
    GMID_MEMBER_EQUIP_LEVELUP_YJ_REQ : 266,
    GMID_MEMBER_EQUIP_LEVELUP_YJ_ACK : 267,
    GMID_MEMBER_EQUIP_REFINE_REQ : 268,
    GMID_MEMBER_EQUIP_REFINE_ACK : 269,
    GMID_MEMBER_EQUIP_REFINEUP_REQ : 270,
    GMID_MEMBER_EQUIP_REFINEUP_ACK : 271,
    GMID_MEMBER_STAR_UP_REQ : 281,
    GMID_MEMBER_STAR_UP_ACK : 282,
    GMID_MEMBER_REBIRTH_SHOW_REQ : 283,
    GMID_MEMBER_REBIRTH_SHOW_ACK : 284,
    GMID_MEMBER_REBIRTH_REQ : 285,
    GMID_MEMBER_REBIRTH_ACK : 286,
    GMID_MEMBER_SPECIAL_LEVELUP_REQ : 291,
    GMID_MEMBER_SPECIAL_LEVELUP_ACK : 292,
    GMID_MEMBER_SPECIAL_QUALITYUP_REQ : 293,
    GMID_MEMBER_SPECIAL_QUALITYUP_ACK : 294,
    GMID_MEMBER_COMBAT_DATA_REQ : 296,
    GMID_MEMBER_COMBAT_DATA_ACK : 297,
    GMID_MEMBER_WEAPON_ACTIVE_REQ : 300,
    GMID_MEMBER_WEAPON_ACTIVE_ACK : 301,
    GMID_MEMBER_WEAPON_LEVELUP_REQ : 302,
    GMID_MEMBER_WEAPON_LEVELUP_ACK : 303,
    GMID_MEMBER_WEAPON_QUALITYUP_REQ : 304,
    GMID_MEMBER_WEAPON_QUALITYUP_ACK : 305,
    GMID_MEMBER_WEAPON_EQUIP_REQ : 306,
    GMID_MEMBER_WEAPON_EQUIP_ACK : 307,
    GMID_MEMBER_PIECE_CRYSTAL_NTF : 310,
    GMID_AMS_LIST_REQ : 501,
    GMID_AMS_LIST_ACK : 502,
    GMID_AMS_DATA_REQ : 503,
    GMID_AMS_DATA_ACK : 504,
    GMID_AMS_JOIN_REQ : 505,
    GMID_AMS_JOIN_ACK : 506,
    GMID_AMS_FEN_REQ : 507,
    GMID_AMS_FEN_ACK : 508,
    GMID_AMS_TREASURY_REQ : 509,
    GMID_AMS_TREASURY_ACK : 510,
    GMID_AMS_RANK_REQ : 511,
    GMID_AMS_RANK_ACK : 512,
    GMID_AMS_NTF : 513,
    GMID_AMS_ACT_NTF : 514,
    GMID_AMS_RCG_REQ : 515,
    GMID_AMS_RCG_ACK : 516,
    GMID_AMS_RCG_NTF : 517,
    GMID_AMS_VAST_REQ : 518,
    GMID_AMS_VAST_ACK : 519,
    GMID_AMS_TYPE_ACTID_REQ : 520,
    GMID_AMS_TYPE_ACTID_ACK : 521,
    GMID_AMS_HONGBAO_REQ : 522,
    GMID_AMS_HONGBAO_ACK : 523,
    GMID_AMS_HONGBAO_EXCHANGE_REQ : 524,
    GMID_AMS_HONGBAO_EXCHANGE_ACK : 525,
    GMID_AMS_INTEGRAL_NTF : 526,
    GMID_AMS_WEEKFUND_REQ : 527,
    GMID_AMS_WEEKFUND_ACK : 528,
    GMID_CAMP_BAG_REQ : 601,
    GMID_CAMP_BAG_ACK : 602,
    GMID_CAMP_BEGIN_REQ : 603,
    GMID_CAMP_BEGIN_ACK : 604,
    GMID_CAMP_RESULT_REQ : 605,
    GMID_CAMP_RESULT_ACK : 606,
    GMID_CAMP_DRAWREWARD_REQ : 607,
    GMID_CAMP_DRAWREWARD_ACK : 608,
    GMID_CAMP_QUIT_REQ : 609,
    GMID_CAMP_QUIT_NTF : 610,
    GMID_CAMP_CAMPACTIVE_NTF : 611,
    GMID_CAMP_CHAPTERACTIVE_NTF : 612,
    GMID_CAMP_BUYCOUNT_REQ : 613,
    GMID_CAMP_BUYCOUNT_ACK : 614,
    GMID_CAMP_CHAPTER_REWARD_REQ : 615,
    GMID_CAMP_CHAPTER_REWARD_ACK : 616,
    GMID_CAMP_SAODANG_REQ : 617,
    GMID_CAMP_SAODANG_ACK : 618,
    GMID_CAMP_SAODANG_DRAW_REQ : 619,
    GMID_CAMP_SAODANG_DRAW_ACK : 620,
    GMID_CAMP_REVIVE_REQ : 621,
    GMID_CAMP_REVIVE_ACK : 622,
    GMID_CAMP_FREEDRAW_REQ : 623,
    GMID_CAMP_FREEDRAW_ACK : 624,
    GMID_ENDLESS_BAG_REQ : 651,
    GMID_ENDLESS_BAG_ACK : 652,
    GMID_ENDLESS_RANKUP_REQ : 653,
    GMID_ENDLESS_RANKUP_ACK : 654,
    GMID_ENDLESS_POWERPOINT_NTF : 655,
    GMID_ENDLESS_STARTBATTLE_REQ : 656,
    GMID_ENDLESS_STARTBATTLE_ACK : 657,
    GMID_ENDLESS_ENDBATTLE_REQ : 658,
    GMID_ENDLESS_ENDBATTLE_ACK : 659,
    GMID_ENDLESS_QUITBATTLE_REQ : 660,
    GMID_ENDLESS_QUITBATTLE_ACK : 661,
    GMID_ENDLESS_BUYBLESS_REQ : 662,
    GMID_ENDLESS_BUYBLESS_ACK : 663,
    GMID_ENDLESS_BUYSTATUS_REQ : 664,
    GMID_ENDLESS_BUYSTATUS_ACK : 665,
    GMID_ENDLESS_USESTATUS_REQ : 666,
    GMID_ENDLESS_USESTATUS_ACK : 667,
    GMID_ENDLESS_STATUS_NTF : 668,
    GMID_ENDLESS_BUY_POWERPOINT_REQ : 669,
    GMID_ENDLESS_BUY_POWERPOINT_ACK : 670,
    GMID_ENDLESS_GETGOLD_REQ : 671,
    GMID_ENDLESS_GETGOLD_ACK : 672,
    GMID_ENDLESS_CHARGE_REWARD_REQ : 673,
    GMID_ENDLESS_CHARGE_REWARD_ACK : 674,
    GMID_RCG_BAG_REQ : 701,
    GMID_RCG_BAG_ACK : 702,
    GMID_RCG_REQ : 703,
    GMID_RCG_ACK : 704,
    GMID_RCG_HUIKUI_BAG_REQ : 711,
    GMID_RCG_HUIKUI_BAG_ACK : 712,
    GMID_RCG_HUIKUI_GETREWARD_REQ : 713,
    GMID_RCG_HUIKUI_GETREWARD_ACK : 714,
    GMID_RCG_HUIKUI_NEW_NTF : 715,
    GMID_VOUCHER_EXCHANGE_REQ : 716,
    GMID_VOUCHER_EXCHANGE_ACK : 717,
    GMID_VIP_PACKAGE_GET_REQ : 721,
    GMID_VIP_PACKAGE_GET_ACK : 722,
    GMID_GET_FREE_DIAMOND_REQ : 723,
    GMID_GET_FREE_DIAMOND_ACK : 724,
    GMID_GET_FREE_GOLD_REQ : 725,
    GMID_GET_FREE_GOLD_ACK : 727,
    GMID_SP_BUY_REQ : 751,
    GMID_SP_BUY_ACK : 752,
    GMID_SP_GETBACK_REQ : 753,
    GMID_SP_GETBACK_ACK : 754,
    GMID_SP_CHANGE_NTF : 755,
    GMID_STORE_DATA_REQ : 801,
    GMID_STORE_DATA_ACK : 802,
    GMID_STORE_REFRESH_REQ : 803,
    GMID_STORE_REFRESH_ACK : 804,
    GMID_STORE_BUY_REQ : 805,
    GMID_STORE_BUY_ACK : 806,
    GMID_STORE_NTF : 807,
    GMID_STORE_BUY_NUM_REQ : 808,
    GMID_STORE_BUY_NUM_ACK : 809,
    GMID_TREASURE_DATA_REQ : 810,
    GMID_TREASURE_DATA_ACK : 811,
    GMID_TREASURE_MINING_REQ : 812,
    GMID_TREASURE_MINING_ACK : 813,
    GMID_TREASURE_NTF : 814,
    GMID_TREASURE_GOLDMINING_REWARD_REQ : 815,
    GMID_TREASURE_GOLDMINING_REWARD_ACK : 816,
    GMID_LOTTERY_DATA_REQ : 820,
    GMID_LOTTERY_DATA_ACK : 821,
    GMID_LOTTERY_REQ : 822,
    GMID_LOTTERY_ACK : 823,
    GMID_LOTTERY_TEN_REQ : 824,
    GMID_LOTTERY_TEN_ACK : 825,
    GMID_LOTTERY_NTF : 826,
    GMID_SIGNIN_DATA_REQ : 830,
    GMID_SIGNIN_DATA_ACK : 831,
    GMID_SIGNIN_REQ : 832,
    GMID_SIGNIN_ACK : 833,
    GMID_SIGNIN_HEAP_REQ : 836,
    GMID_SIGNIN_HEAP_ACK : 837,
    GMID_SIGNIN_NTF_REQ : 838,
    GMID_SIGNIN_NTF : 839,
    GMID_DAILY_DATA_REQ : 840,
    GMID_DAILY_DATA_ACK : 841,
    GMID_DAILY_ACTIVE_REWARD_REQ : 842,
    GMID_DAILY_ACTIVE_REWARD_ACK : 843,
    GMID_DAILY_REWARD_REQ : 844,
    GMID_DAILY_REWARD_ACK : 845,
    GMID_DAILY_NTF : 846,
    GMID_DAILY_SHARE_REQ : 847,
    GMID_ACHIEVE_DATA_REQ : 850,
    GMID_ACHIEVE_DATA_ACK : 851,
    GMID_ACHIEVE_REWARD_REQ : 852,
    GMID_ACHIEVE_REWARD_ACK : 853,
    GMID_ACHIEVE_NTF : 854,
    GMID_MAIL_GET_LIST_REQ : 961,
    GMID_MAIL_GET_LIST_ACK : 962,
    GMID_MAIL_READ_REQ : 963,
    GMID_MAIL_READ_ACK : 964,
    GMID_MAIL_RECEIVE_NTF : 968,
    GMID_MAIL_DEL_NTF : 969,
    GMID_GUILD_CREATE_REQ : 1003,
    GMID_GUILD_CREATE_ACK : 1004,
    GMID_GUILD_SEARCH_REQ : 1005,
    GMID_GUILD_SEARCH_ACK : 1006,
    GMID_GUILD_APPLY_REQ : 1007,
    GMID_GUILD_APPLY_ACK : 1008,
    GMID_GUILD_APPLY_NTF : 1009,
    GMID_GUILD_EDIT_ANNOUNCEMENT_REQ : 1010,
    GMID_GUILD_EDIT_ANNOUNCEMENT_ACK : 1011,
    GMID_GUILD_ACCEPT_REQ : 1012,
    GMID_GUILD_ACCEPT_ACK : 1013,
    GMID_GUILD_ACCEPT_NTF : 1014,
    GMID_GUILD_REFUSE_REQ : 1015,
    GMID_GUILD_REFUSE_ACK : 1016,
    GMID_GUILD_REFUSE_NTF : 1017,
    GMID_GUILD_SETLIMIT_REQ : 1018,
    GMID_GUILD_SETLIMIT_ACK : 1019,
    GMID_GUILD_CONTRIBUTE_REQ : 1020,
    GMID_GUILD_CONTRIBUTE_ACK : 1021,
    GMID_GUILD_FIRE_REQ : 1022,
    GMID_GUILD_FIRE_ACK : 1023,
    GMID_GUILD_FIRE_NTF : 1024,
    GMID_GUILD_NOMINATE_REQ : 1025,
    GMID_GUILD_NOMINATE_ACK : 1026,
    GMID_GUILD_NOMINATE_NTF : 1027,
    GMID_GUILD_RELIEVE_REQ : 1028,
    GMID_GUILD_RELIEVE_ACK : 1029,
    GMID_GUILD_RELIEVE_NTF : 1030,
    GMID_GUILD_DISMISS_REQ : 1031,
    GMID_GUILD_DISMISS_ACK : 1032,
    GMID_GUILD_NEWS_REQ : 1033,
    GMID_GUILD_NEWS_ACK : 1034,
    GMID_GUILD_ACTIVE_MEDAL_REQ : 1035,
    GMID_GUILD_ACTIVE_MEDAL_ACK : 1036,
    GMID_GUILD_UPGRADE_MEDAL_REQ : 1037,
    GMID_GUILD_UPGRADE_MEDAL_ACK : 1038,
    GMID_GUILD_INFO_REQ : 1039,
    GMID_GUILD_INFO_ACK : 1040,
    GMID_GUILD_REQ_LIST_REQ : 1041,
    GMID_GUILD_REQ_LIST_ACK : 1042,
    GMID_GUILD_MEMBER_LIST_REQ : 1043,
    GMID_GUILD_MEMBER_LIST_ACK : 1044,
    GMID_GUILD_MEMBER_WEEKLY_REFRESH_NTF : 1045,
    GMID_GUILD_QUIT_REQ : 1046,
    GMID_GUILD_QUIT_ACK : 1047,
    GMID_GUILD_BUBBLE_REQ : 1048,
    GMID_GUILD_BUBBLE_ACK : 1049,
    GMID_GUILD_BUBBLE_RECEIVED_RPT : 1050,
    GMID_GUILD_ENDLESS_RANKING_REQ : 1051,
    GMID_GUILD_ENDLESS_RANKING_ACK : 1052,
    GMID_GUILD_ENDLESS_RANKING_LIKE_REQ : 1053,
    GMID_GUILD_ENDLESS_RANKING_LIKE_ACK : 1054,
    GMID_GUILD_LIST_RAN_REQ : 1055,
    GMID_GUILD_LIST_RAN_ACK : 1056,
    GMID_GUILD_LUCKY_DRAW_REQ : 1057,
    GMID_GUILD_LUCKY_DRAW_ACK : 1058,
    GMID_GUILD_TRANSFER_CAPTAIN_REQ : 1059,
    GMID_GUILD_TRANSFER_CAPTAIN_ACK : 1060,
    GMID_GUILD_TRANSFER_CAPTAIN_NTF : 1061,
    GMID_GUILD_GET_CAPTAIN_REQ : 1062,
    GMID_GUILD_GET_CAPTAIN_ACK : 1063,
    GMID_GUILD_LIST_REQ : 1064,
    GMID_GUILD_LIST_ACK : 1065,
    GMID_GUILD_BOSS_BAG_REQ : 1066,
    GMID_GUILD_BOSS_BAG_ACK : 1067,
    GMID_GUILD_BOSS_CHANLLEGE_REQ : 1068,
    GMID_GUILD_BOSS_CHANLLEGE_ACK : 1069,
    GMID_GUILD_BOSS_GET_REWARD_REQ : 1070,
    GMID_GUILD_BOSS_GET_REWARD_ACK : 1071,
    GMID_GUILD_BOSS_PLAYER_RANK_REQ : 1072,
    GMID_GUILD_BOSS_PLAYER_RANK_ACK : 1073,
    GMID_GUILD_BOSS_GUILD_RANK_REQ : 1074,
    GMID_GUILD_BOSS_GUILD_RANK_ACK : 1075,
    GMID_GUILD_BOSS_START_NTF : 1076,
    GMID_GUILD_BOSS_BUY_REQ : 1077,
    GMID_GUILD_BOSS_BUY_ACK : 1078,
    GMID_BOSSTOWER_BAG_REQ : 1151,
    GMID_BOSSTOWER_BAG_ACK : 1152,
    GMID_BOSSTOWER_EXPLORE_REQ : 1153,
    GMID_BOSSTOWER_EXPLORE_ACK : 1154,
    GMID_BOSSTOWER_REFRESH_BUFF_REQ : 1155,
    GMID_BOSSTOWER_REFRESH_BUFF_ACK : 1156,
    GMID_BOSSTOWER_START_BATTLE_REQ : 1157,
    GMID_BOSSTOWER_START_BATTLE_ACK : 1158,
    GMID_BOSSTOWER_ENDBATTLE_REQ : 1159,
    GMID_BOSSTOWER_ENDBATTLE_ACK : 1160,
    GMID_BOSSTOWER_QUITBATTLE_REQ : 1161,
    GMID_BOSSTOWER_QUITBATTLE_ACK : 1162,
    GMID_BOSSTOWER_SAODANG_REQ : 1163,
    GMID_BOSSTOWER_SAODANG_ACK : 1164,
    GMID_BOSSTOWER_GETREWARD_REQ : 1165,
    GMID_BOSSTOWER_GETREWARD_ACK : 1166,
    GMID_BOSSTOWER_NEXTFLOOR_REQ : 1167,
    GMID_BOSSTOWER_NEXTFLOOR_ACK : 1168,
    GMID_BOSSTOWER_RESET_REQ : 1169,
    GMID_BOSSTOWER_RESET_ACK : 1170,
    GMID_BOSSTOWER_UNLOCK_REQ : 1171,
    GMID_BOSSTOWER_UNLOCK_ACK : 1172,
    GMID_BOSSTOWER_MTBOX_BUY_REQ : 1173,
    GMID_BOSSTOWER_MTBOX_BUY_ACK : 1174,
    GMID_NUCLEAR_BAG_REQ : 1181,
    GMID_NUCLEAR_BAG_ACK : 1182,
    GMID_NUCLEAR_START_BATTLE_REQ : 1183,
    GMID_NUCLEAR_START_BATTLE_ACK : 1184,
    GMID_NUCLEAR_END_BATTLE_REQ : 1185,
    GMID_NUCLEAR_END_BATTLE_ACK : 1186,
    GMID_NUCLEAR_QUIT_BATTLE_REQ : 1187,
    GMID_NUCLEAR_QUIT_BATTLE_ACK : 1188,
    GMID_NUCLEAR_GET_REWARD_REQ : 1189,
    GMID_NUCLEAR_GET_REWARD_ACK : 1190,
    GMID_NUCLEAR_GET_RANKLIST_REQ : 1191,
    GMID_NUCLEAR_GET_RANKLIST_ACK : 1192,
    GMID_NUCLEAR_NTF : 1193,
    GMID_FULI_GIFT_DATA_REQ : 1201,
    GMID_FULI_GIFT_DATA_ACK : 1202,
    GMID_FULI_GIFT_BUY_REQ : 1203,
    GMID_FULI_GIFT_BUY_ACK : 1204,
    GMID_FULI_GIFT_NTF : 1205,
    GMID_FULI_SEVEN_DATA_REQ : 1211,
    GMID_FULI_SEVEN_DATA_ACK : 1212,
    GMID_FULI_SEVEN_ALL_REQ : 1213,
    GMID_FULI_SEVEN_ALL_ACK : 1214,
    GMID_FULI_SEVEN_CZ_REQ : 1215,
    GMID_FULI_SEVEN_CZ_ACK : 1216,
    GMID_FULI_SEVEN_DARE_REQ : 1217,
    GMID_FULI_SEVEN_DARE_ACK : 1218,
    GMID_FULI_SEVEN_NTF : 1219,
    GMID_FULI_SEVEN_BUY_REQ : 1220,
    GMID_FULI_SEVEN_BUY_ACK : 1221,
    GMID_FULI_SEVEN_DAY_NTF : 1222,
    GMID_FULI_CZ_DATA_REQ : 1223,
    GMID_FULI_CZ_DATA_ACK : 1224,
    GMID_FULI_CZ_REQ : 1225,
    GMID_FULI_CZ_ACK : 1226,
    GMID_FULI_CZ_BUY_REQ : 1227,
    GMID_FULI_CZ_BUY_ACK : 1228,
    GMID_FULI_CZ_NTF : 1229,
    GMID_FULI_VIPBONUS_DATA_REQ : 1230,
    GMID_FULI_VIPBONUS_DATA_ACK : 1231,
    GMID_FULI_VIPBONUS_CZ_REQ : 1232,
    GMID_FULI_VIPBONUS_CZ_ACK : 1233,
    GMID_FULI_VIPBONUS_VIP_REQ : 1234,
    GMID_FULI_VIPBONUS_VIP_ACK : 1235,
    GMID_FULI_VIPBONUS_NTF : 1236,
    GMID_FULI_SHARE_DAILY_REQ : 1240,
    GMID_FULI_SHARE_DAILY_ACK : 1241,
    GMID_FULI_SHARE_RECOMMAND_REQ : 1242,
    GMID_FULI_SHARE_RECOMMAND_ACK : 1243,
    GMID_FULI_SHARE_MEMBER_TESTPLAY_REQ : 1244,
    GMID_FULI_SHARE_MEMBER_TESTPLAY_ACK : 1245,
    GMID_ARENA_OPEN_REQ : 1251,
    GMID_ARENA_OPEN_ACK : 1252,
    GMID_ARENA_REPORT_REQ : 1253,
    GMID_ARENA_REPORT_ACK : 1254,
    GMID_ARENA_RANK_TOP_LIST_REQ : 1255,
    GMID_ARENA_RANK_TOP_LIST_ACK : 1256,
    GMID_ARENA_LIKE_REQ : 1257,
    GMID_ARENA_LIKE_ACK : 1258,
    GMID_ARENA_CHALLENGE_REQ : 1259,
    GMID_ARENA_CHALLENGE_ACK : 1260,
    GMID_ARENA_CHALLENGE_COUNT_BUY_REQ : 1261,
    GMID_ARENA_CHALLENGE_COUNT_BUY_ACK : 1262,
    GMID_ARENA_POINTS_CHANGE_NTF : 1263,
    GMID_ARENA_DAY_REWARD_REQ : 1264,
    GMID_ARENA_DAY_REWARD_ACK : 1265,
    GMID_ARENA_SAODANG_REQ : 1266,
    GMID_ARENA_SAODANG_ACK : 1267,
    GMID_MEMBER_PIECE_DATA_REQ : 1291,
    GMID_MEMBER_PIECE_DATA_ACK : 1292,
    GMID_MEMBER_PIECE_BREAK_REQ : 1293,
    GMID_MEMBER_PIECE_BREAK_ACK : 1294,
    GMID_MEMBER_PIECE_COM_REQ : 1295,
    GMID_MEMBER_PIECE_COM_ACK : 1296,
    GMID_GIFT_CARD_REQ : 1301,
    GMID_GIFT_CARD_ACK : 1302,
    GMID_ROLEEQUIP_BAG_REQ : 1351,
    GMID_ROLEEQUIP_BAG_ACK : 1352,
    GMID_ROLEEQUIP_PUTON_REQ : 1353,
    GMID_ROLEEQUIP_PUTON_ACK : 1354,
    GMID_ROLEEQUIP_PUTOFF_REQ : 1355,
    GMID_ROLEEQUIP_PUTOFF_ACK : 1356,
    GMID_ROLEEQUIP_LINGWU_REQ : 1357,
    GMID_ROLEEQUIP_LINGWU_ACK : 1358,
    GMID_ROLEEQUIP_SPLIT_REQ : 1359,
    GMID_ROLEEQUIP_SPLIT_ACK : 1360,
    GMID_ROLEEQUIP_CHANGE_NTF : 1361,
    GMID_ROLEEQUIP_COMPOSE_REQ : 1363,
    GMID_ROLEEQUIP_COMPOSE_ACK : 1364,
    GMID_ROLEEQUIP_GEM_UPGRADE_REQ : 1365,
    GMID_ROLEEQUIP_GEM_UPGRADE_ACK : 1366,
    GMID_ROLEEQUIP_GEM_COMPOSE_REQ : 1367,
    GMID_ROLEEQUIP_GEM_COMPOSE_ACK : 1368,
    GMID_ROLEEQUIP_QIANGHUA_REQ : 1369,
    GMID_ROLEEQUIP_QIANGHUA_ACK : 1370,
    GMID_ROLEEQUIP_GEM_COMTEN_REQ : 1371,
    GMID_ROLEEQUIP_GEM_COMTEN_ACK : 1372,
    GMID_NEBULA_BAG_REQ : 1400,
    GMID_NEBULA_BAG_ACK : 1401,
    GMID_NEBULA_MINE_REQ : 1402,
    GMID_NEBULA_MINE_ACK : 1403,
    GMID_NEBULA_OPENCHEST_REQ : 1404,
    GMID_NEBULA_OPENCHEST_ACK : 1405,
    GMID_NEBULA_ROB_REQ : 1406,
    GMID_NEBULA_ROB_ACK : 1407,
    GMID_NEBULA_ROB_LIST_REFRESH_REQ : 1408,
    GMID_NEBULA_ROB_LIST_REFRESH_ACK : 1409,
    GMID_NEBULA_ROB_LIST_REQ : 1411,
    GMID_NEBULA_ROB_LIST_ACK : 1412,
    GMID_NEBULA_BUYENERGY_REQ : 1413,
    GMID_NEBULA_BUYENERGY_ACK : 1414,
    GMID_NEBULA_NERGY_NTF : 1415,
    GMID_NEBULA_ZIZUAN_NTF : 1416,
    GMID_HEROCAMP_BAG_REQ : 1451,
    GMID_HEROCAMP_BAG_ACK : 1452,
    GMID_HEROCAMP_BEGIN_REQ : 1453,
    GMID_HEROCAMP_BEGIN_ACK : 1454,
    GMID_HEROCAMP_END_REQ : 1455,
    GMID_HEROCAMP_END_ACK : 1456,
    GMID_HEROCAMP_QUIT_REQ : 1457,
    GMID_HEROCAMP_QUIT_NTF : 1458,
    GMID_HEROCAMP_REVIVE_REQ : 1459,
    GMID_HEROCAMP_REVIVE_ACK : 1460,
    GMID_HEROCAMP_SAODANG_REQ : 1461,
    GMID_HEROCAMP_SAODANG_ACK : 1462,
    GMID_HEROCHEST_OPEN_REQ : 1463,
    GMID_HEROCHEST_OPEN_ACK : 1464,
    GMID_HEROCAMP_BUYCOUNT_REQ : 1465,
    GMID_HEROCAMP_BUYCOUNT_ACK : 1466,
    GMID_HEROCAMP_BUYSP_REQ : 1467,
    GMID_HEROCAMP_BUYSP_ACK : 1468,
    GMID_HEROCAMP_SPCHANGE_NTF : 1469,
    GMID_HEROCAMP_ACTIVE_NTF : 1470,
    GMID_MIBAO_STORE_DATA_REQ : 1500,
    GMID_MIBAO_STORE_DATA_ACK : 1501,
    GMID_MIBAO_STORE_BUY_REQ : 1502,
    GMID_MIBAO_STORE_BUY_ACK : 1503,
    GMID_VIP_STORE_DATA_REQ : 1504,
    GMID_VIP_STORE_DATA_ACK : 1505,
    GMID_VIP_STORE_BUY_REQ : 1506,
    GMID_VIP_STORE_BUY_ACK : 1507,
    GMID_NUCLEAR_STORE_DATA_REQ : 1510,
    GMID_NUCLEAR_STORE_DATA_ACK : 1511,
    GMID_NUCLEAR_STORE_BUY_REQ : 1512,
    GMID_NUCLEAR_STORE_BUY_ACK : 1513,
    GMID_TOWER_FLOOR_STORE_DATA_REQ : 1520,
    GMID_TOWER_FLOOR_STORE_DATA_ACK : 1521,
    GMID_TOWER_FLOOR_STORE_BUY_REQ : 1522,
    GMID_TOWER_FLOOR_STORE_BUY_ACK : 1523,
    GMID_TOWER_FLOOR_STORE_NEXT_REQ : 1524,
    GMID_TOWER_FLOOR_STORE_NEXT_ACK : 1525,
    GMID_RANK_STORE_DATA_REQ : 1550,
    GMID_RANK_STORE_DATA_ACK : 1551,
    GMID_RANK_STORE_BUY_REQ : 1552,
    GMID_RANK_STORE_BUY_ACK : 1553,
    GMID_DEVIL_STORE_DATA_REQ : 1560,
    GMID_DEVIL_STORE_DATA_ACK : 1561,
    GMID_DEVIL_STORE_BUY_REQ : 1562,
    GMID_DEVIL_STORE_BUY_ACK : 1563,
    GMID_WAR_BAG_REQ : 1600,
    GMID_WAR_BAG_ACK : 1601,
    GMID_WAR_START_REQ : 1602,
    GMID_WAR_START_ACK : 1603,
    GMID_WAR_END_REQ : 1604,
    GMID_WAR_END_ACK : 1605,
    GMID_WAR_QUIT_REQ : 1606,
    GMID_WAR_QUIT_ACK : 1607,
    GMID_WAR_SAODANG_REQ : 1608,
    GMID_WAR_SAODANG_ACK : 1609,
    GMID_WAR_REWARD_REQ : 1610,
    GMID_WAR_REWARD_ACK : 1611,
    GMID_WAR_BUY_REQ : 1612,
    GMID_WAR_BUY_ACK : 1613,
    GMID_WAR_POINT_NTF : 1614,
    GMID_ZIZUAN_GIFT_DATA_REQ : 1620,
    GMID_ZIZUAN_GIFT_DATA_ACK : 1621,
    GMID_ZIZUAN_GIFT_BUY_REQ : 1622,
    GMID_ZIZUAN_GIFT_BUY_ACK : 1623,
    GMID_ZIZUAN_EXCHANGE_REQ : 1624,
    GMID_ZIZUAN_EXCHANGE_ACK : 1625,
    GMID_RANK_REQ : 1651,
    GMID_RANK_ACK : 1652,
    GMID_RANK_DIANZAN_REQ : 1653,
    GMID_RANK_DIANZAN_ACK : 1654,
    GMID_FUND_DATA_REQ : 1660,
    GMID_FUND_DATA_ACK : 1661,
    GMID_FUND_BUY_REQ : 1662,
    GMID_FUND_BUY_ACK : 1663,
    GMID_FUND_GET_REQ : 1664,
    GMID_FUND_GET_ACK : 1665,
    GMID_FUND_NTF : 1666,
    GMID_REWARD_CENTER_REQ : 1701,
    GMID_REWARD_CENTER_NTF : 1702,
    GMID_REWARD_CENTER_GETREWARD_REQ : 1703,
    GMID_REWARD_CENTER_GETREWARD_ACK : 1704,
    GMID_REWARD_CENTER_ALLREWARD_REQ : 1705,
    GMID_REWARD_CENTER_ALLREWARD_ACK : 1706,
    GMID_DARK_BAG_REQ : 1751,
    GMID_DARK_BAG_ACK : 1752,
    GMID_DARK_START_BATTLE_REQ : 1753,
    GMID_DARK_START_BATTLE_ACK : 1754,
    GMID_DARK_END_BATTLE_REQ : 1755,
    GMID_DARK_END_BATTLE_ACK : 1756,
    GMID_DARK_BATTLE_DRAW_REQ : 1757,
    GMID_DARK_BATTLE_DRAW_ACK : 1758,
    GMID_DARK_QUIT_BATTLE_REQ : 1759,
    GMID_DARK_QUIT_BATTLE_ACK : 1760,
    GMID_DARK_SAODANG_REQ : 1761,
    GMID_DARK_SAODANG_ACK : 1762,
    GMID_DARK_SAODANG_DRAW_REQ : 1763,
    GMID_DARK_SAODANG_DRAW_ACK : 1764,
    GMID_DARK_SAODANG_QUIT_REQ : 1765,
    GMID_DARK_SAODANG_QUIT_ACK : 1766,
    GMID_DARK_REFRESH_BOSS_REQ : 1767,
    GMID_DARK_REFRESH_BOSS_ACK : 1768,
    GMID_DARK_BUY_ITEM_REQ : 1769,
    GMID_DARK_BUY_ITEM_ACK : 1770,
    GMID_DARK_SELL_ITEM_REQ : 1771,
    GMID_DARK_SELL_ITEM_ACK : 1772,
    GMID_DARK_ITEM_NTF : 1773,
    GMID_DARK_ACTIVE_TECH_REQ : 1775,
    GMID_DARK_ACTIVE_TECH_ACK : 1776,
    GMID_DARK_POINT_NTF : 1777,
    GMID_GUAZAI_PUTON_REQ : 1900,
    GMID_GUAZAI_PUTON_ACK : 1901,
    GMID_GUAZAI_QUALITYUP_REQ : 1902,
    GMID_GUAZAI_QUALITYUP_ACK : 1903,
    GMID_GUAZAI_LEVELUP_REQ : 1904,
    GMID_GUAZAI_LEVELUP_ACK : 1905,
    GMID_GUAZAI_STARUP_REQ : 1906,
    GMID_GUAZAI_STARUP_ACK : 1907,
    GMID_GUAZAI_REBIRTH_REQ : 1908,
    GMID_GUAZAI_REBIRTH_ACK : 1909,
    GMID_GUAZAI_HECHENG_REQ : 1912,
    GMID_GUAZAI_HECHENG_ACK : 1913,
    GMID_GUAZAI_AWAKE_REQ : 1914,
    GMID_GUAZAI_AWAKE_ACK : 1915,
    GMID_GUAZAI_AWAKEUP_REQ : 1916,
    GMID_GUAZAI_AWAKEUP_ACK : 1917,
    GMID_MYSTERY_ACTIVE_REQ : 2000,
    GMID_MYSTERY_ACTIVE_ACK : 2001,
    GMID_MYSTERY_UP_REQ : 2002,
    GMID_MYSTERY_UP_ACK : 2003,
    GMID_DRESS_GET_REQ : 2100,
    GMID_DRESS_GET_ACK : 2101,
    GMID_DRESS_UP_REQ : 2102,
    GMID_DRESS_UP_ACK : 2103,
    GMID_DRESS_WEAR_REQ : 2104,
    GMID_DRESS_WEAR_ACK : 2105,
    GMID_COMMANDER_BATTLEFIELD_ACTIVE_REQ : 2200,
    GMID_COMMANDER_BATTLEFIELD_ACTIVE_ACK : 2201,
    GMID_COMMANDER_BATTLEFIELD_PUTON_REQ : 2202,
    GMID_COMMANDER_BATTLEFIELD_PUTON_ACK : 2203,
    GMID_COMMANDER_ACTIVE_REQ : 2204,
    GMID_COMMANDER_ACTIVE_ACK : 2205,
    GMID_COMMANDER_LEVELUP_REQ : 2206,
    GMID_COMMANDER_LEVELUP_ACK : 2207,
    GMID_COMMANDER_QUALITYUP_REQ : 2208,
    GMID_COMMANDER_QUALITYUP_ACK : 2209,
    GMID_COMMANDER_STARUP_REQ : 2210,
    GMID_COMMANDER_STARUP_ACK : 2211,
    GMID_PATROL_DATA_REQ : 2300,
    GMID_PATROL_DATA_ACK : 2301,
    GMID_PATROL_START_REQ : 2302,
    GMID_PATROL_START_ACK : 2303,
    GMID_PATROL_END_REQ : 2304,
    GMID_PATROL_END_ACK : 2305,
    GMID_PATROL_REFRESH_REQ : 2306,
    GMID_PATROL_REFRESH_ACK : 2307,
    GMID_PATROL_BUYSP_REQ : 2308,
    GMID_PATROL_BUYSP_ACK : 2309,
    GMID_PATROL_FLAG_NTF : 2310,
    GMID_PATROL_SPEEDUP_REQ : 2311,
    GMID_PATROL_SPEEDUP_ACK : 2312,
    GMID_PATROL_MEMBER_RECOVER_NTF : 2313,
    GMID_EXPLORE_DATA_REQ : 2400,
    GMID_EXPLORE_DATA_ACK : 2401,
    GMID_EXPLORE_SELECT_AREA_REQ : 2402,
    GMID_EXPLORE_SELECT_AREA_ACK : 2403,
    GMID_EXPLORE_REQ : 2404,
    GMID_EXPLORE_ACK : 2405,
    GMID_EXPLORE_REWARD_REQ : 2406,
    GMID_EXPLORE_REWARD_ACK : 2407,
    GMID_EXPLORE_GEM_REQ : 2408,
    GMID_EXPLORE_GEM_ACK : 2409,
    GMID_EXPLORE_OPEN_REQ : 2410,
    GMID_EXPLORE_OPEN_ACK : 2411,
    GMID_EXPLORE_FLAG_NTF : 2412,
    GMID_EXPLORE_CHEST_NTF : 2413,
    GMID_HONOR_RANKUP_REQ : 2450,
    GMID_HONOR_RANKUP_ACK : 2451,
    GMID_HONOR_GIVEN_REQ : 2452,
    GMID_HONOR_GIVEN_ACK : 2453,
    GMID_HONOR_TUP_REQ : 2454,
    GMID_HONOR_TUP_ACK : 2455,
    GMID_HONOR_FLAG_NTF : 2456,
    GMID_MAINTASK_DATA_REQ : 2460,
    GMID_MAINTASK_DATA_ACK : 2461,
    GMID_MAINTASK_GET_REQ : 2462,
    GMID_MAINTASK_GET_ACK : 2463,
    GMID_MAINTASK_REWARD_REQ : 2464,
    GMID_MAINTASK_REWARD_ACK : 2465,
    GMID_MAINTASK_FLAG_NTF : 2466,
    GMID_BUILD_UPGRADE_REQ : 2500,
    GMID_BUILD_UPGRADE_ACK : 2501,
    GMID_BUILD_SPEEDUP_REQ : 2502,
    GMID_BUILD_SPEEDUP_ACK : 2503,
    GMID_BUILD_CANCEL_REQ : 2504,
    GMID_BUILD_CANCEL_ACK : 2505,
    GMID_BUILD_RES_UPGRADE_REQ : 2506,
    GMID_BUILD_RES_UPGRADE_ACK : 2507,
    GMID_BUILD_RES_SPEEDUP_REQ : 2508,
    GMID_BUILD_RES_SPEEDUP_ACK : 2509,
    GMID_BUILD_RES_CANCEL_REQ : 2510,
    GMID_BUILD_RES_CANCEL_ACK : 2511,
    GMID_BUILD_RES_UNLOCK_REQ : 2512,
    GMID_BUILD_RES_UNLOCK_ACK : 2513,
    GMID_BUILD_TECH_UPGRADE_REQ : 2514,
    GMID_BUILD_TECH_UPGRADE_ACK : 2515,
    GMID_BUILD_TECH_SPEEDUP_REQ : 2516,
    GMID_BUILD_TECH_SPEEDUP_ACK : 2517,
    GMID_BUILD_TECH_CANCEL_REQ : 2518,
    GMID_BUILD_TECH_CANCEL_ACK : 2519,
    GMID_BUILD_EQUIP_MAKE_REQ : 2520,
    GMID_BUILD_EQUIP_MAKE_ACK : 2521,
    GMID_BUILD_EQUIP_SPEEDUP_REQ : 2522,
    GMID_BUILD_EQUIP_SPEEDUP_ACK : 2523,
    GMID_BUILD_EQUIP_GET_REQ : 2524,
    GMID_BUILD_EQUIP_GET_ACK : 2525,
    GMID_BUILD_EQUIP_REWARD_GET_REQ : 2526,
    GMID_BUILD_EQUIP_REWARD_GET_ACK : 2527,
    GMID_BUILD_EQUIP_REWARD_RESET_REQ : 2528,
    GMID_BUILD_EQUIP_REWARD_RESET_ACK : 2529,
    GMID_BUILD_NTF : 2530,
    GMID_BUILD_VALUE_NTF : 2531,
    GMID_BUILD_TASK_DATA_REQ : 2540,
    GMID_BUILD_TASK_DATA_ACK : 2541,
    GMID_BUILD_TASK_REWARD_REQ : 2542,
    GMID_BUILD_TASK_REWARD_ACK : 2543,
    GMID_BUILD_TASK_NTF : 2544,
    GMID_BUILD_BAG_REQ : 2545,
    GMID_FEEDBACK_DATA_REQ : 2550,
    GMID_FEEDBACK_DATA_ACK : 2551,
    GMID_FEEDBACK_GET_REQ : 2552,
    GMID_FEEDBACK_GET_ACK : 2553,
    GMID_FEEDBACK_NTF : 2554,
    GMID_FULI_MILLION_DATA_REQ : 2600,
    GMID_FULI_MILLION_DATA_ACK : 2601,
    GMID_FULI_MILLION_GET_REQ : 2602,
    GMID_FULI_MILLION_GET_ACK : 2603,
    GMID_FULI_MILLION_NTF : 2604,
    GMID_NEW_TASK_GET_REWARD_REQ : 2620,
    GMID_NEW_TASK_GET_REWARD_ACK : 2621,
    GMID_NEW_TASK_NTF : 2622,
    GMID_FLYING_CHESS_GO_REQ : 2720,
    GMID_FLYING_CHESS_GO_ACK : 2721,
    GMID_FLYING_CHESS_PAPER_REQ : 2722,
    GMID_FLYING_CHESS_PAPER_ACK : 2723,
    GMID_FLYING_CHESS_BUY_REQ : 2724,
    GMID_FLYING_CHESS_BUY_ACK : 2725,
    GMID_FLYING_CHESS_BUY_DICE_REQ : 2726,
    GMID_FLYING_CHESS_BUY_DICE_ACK : 2727,
    GMID_FLYING_CHESS_EXCHANGE_REQ : 2728,
    GMID_FLYING_CHESS_EXCHANGE_ACK : 2729,
    GMID_FLYING_CHESS_HONOR_NTF : 2730,
    GMID_FULL_BOSS_DATA_REQ : 2750,
    GMID_FULL_BOSS_DATA_ACK : 2751,
    GMID_FULL_BOSS_ATTACK_START_REQ : 2752,
    GMID_FULL_BOSS_ATTACK_START_ACK : 2753,
    GMID_FULL_BOSS_ATTACK_END_REQ : 2754,
    GMID_FULL_BOSS_ATTACK_END_ACK : 2755,
    GMID_FULL_BOSS_ATTACK_QUIT_REQ : 2756,
    GMID_FULL_BOSS_ATTACK_QUIT_ACK : 2757,
    GMID_FULL_BOSS_REWARD_REQ : 2758,
    GMID_FULL_BOSS_REWARD_ACK : 2759,
    GMID_FULL_BOSS_JUJI_REQ : 2760,
    GMID_FULL_BOSS_JUJI_ACK : 2761,
    GMID_FULL_BOSS_QH_REQ : 2762,
    GMID_FULL_BOSS_QH_ACK : 2763,


};

var Decode_GMDT_ITEM_COUNT = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ITEM_COUNT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);

    return true;
}

var Decode_GMPKG_PING = function(byteBuffer, m){
    var ret = {err : false};
    m.Reply = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TimeStamp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ServerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PING = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reply, byteBuffer);
    NetData.NetWriteUint32(m.TimeStamp, byteBuffer);
    NetData.NetWriteUint32(m.ServerTime, byteBuffer);

    return true;
}

var Decode_GMPKG_BIGDATA_PING = function(byteBuffer, m){
    var ret = {err : false};
    m.TimeStamp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfData = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfData > P.PT_PING_BIGDATA_LEN){return false;}
    m.Data = [];
    for(let i = 0; i < sizeOfData; i++){
        let v = NetData.NetReadUint32(byteBuffer, ret);
        if(ret.err){return false;}
        m.Data.push(v);
    }

    return true;
}

var Encode_GMPKG_BIGDATA_PING = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.TimeStamp, byteBuffer);
    if(!m.Data){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Data.length > P.PT_PING_BIGDATA_LEN){return false;}
        NetData.NetWriteInt32(m.Data.length, byteBuffer);
        for(let v of m.Data){
            NetData.NetWriteUint32(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_LOG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ServerID = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.LogType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Log = NetData.NetReadString(byteBuffer, P.PT_LOG_MAX_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LOG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.ServerID, byteBuffer);
    NetData.NetWriteUint8(m.LogType, byteBuffer);
    if(NetData.NetWriteString(m.Log, P.PT_LOG_MAX_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_LOGIN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ForbidTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Msg = NetData.NetReadString(byteBuffer, P.PT_SHORT_MSG_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LOGIN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.ForbidTime, byteBuffer);
    if(NetData.NetWriteString(m.Msg, P.PT_SHORT_MSG_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_BIG_LOGIN_GUEST = function(byteBuffer, m){
    var ret = {err : false};
    m.GuestAccount = NetData.NetReadString(byteBuffer, P.PT_MAX_ACCOUNT_LEN, ret);
    if(ret.err){return false;}

    m.BoundleID = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_ID_LEN, ret);
    if(ret.err){return false;}

    m.AdID = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_ID_LEN, ret);
    if(ret.err){return false;}

    m.ServerID = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_ID_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BIG_LOGIN_GUEST = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuestAccount, P.PT_MAX_ACCOUNT_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.BoundleID, P.PT_MAX_SDK_ID_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.AdID, P.PT_MAX_SDK_ID_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.ServerID, P.PT_MAX_SDK_ID_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_BIG_LOGIN_SDK = function(byteBuffer, m){
    var ret = {err : false};
    m.SdkTicket = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_TICKET_LEN, ret);
    if(ret.err){return false;}

    m.BoundleID = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_ID_LEN, ret);
    if(ret.err){return false;}

    m.AdID = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_ID_LEN, ret);
    if(ret.err){return false;}

    m.ServerID = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_ID_LEN, ret);
    if(ret.err){return false;}

    m.Avatar = NetData.NetReadString(byteBuffer, P.PT_MAX_AVATAR_LEN, ret);
    if(ret.err){return false;}

    m.Plat = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_ID_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BIG_LOGIN_SDK = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.SdkTicket, P.PT_MAX_SDK_TICKET_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.BoundleID, P.PT_MAX_SDK_ID_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.AdID, P.PT_MAX_SDK_ID_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.ServerID, P.PT_MAX_SDK_ID_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.Avatar, P.PT_MAX_AVATAR_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.Plat, P.PT_MAX_SDK_ID_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BIG_LOGIN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ProgVer = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ResVer = NetData.NetReadString(byteBuffer, P.PT_MAX_VER_LEN, ret);
    if(ret.err){return false;}

    m.Account = NetData.NetReadString(byteBuffer, P.PT_MAX_ACCOUNT_LEN, ret);
    if(ret.err){return false;}

    m.Password = NetData.NetReadString(byteBuffer, P.PT_MAX_PASSWORD_LEN, ret);
    if(ret.err){return false;}

    m.DeviceID = NetData.NetReadString(byteBuffer, P.PT_MAX_DEVICEID_LEN, ret);
    if(ret.err){return false;}

    m.LoginType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.LoginType == P.PT_LOGINTYPE_GUEST){
    m.GuestLogin = {};
    if(Decode_GMDT_BIG_LOGIN_GUEST(byteBuffer, m.GuestLogin) == false){
        return false;
    }
    }

    if(m.LoginType == P.PT_LOGINTYPE_SDK){
    m.SDKData = {};
    if(Decode_GMDT_BIG_LOGIN_SDK(byteBuffer, m.SDKData) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BIG_LOGIN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.ProgVer, byteBuffer);
    if(NetData.NetWriteString(m.ResVer, P.PT_MAX_VER_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.Account, P.PT_MAX_ACCOUNT_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.Password, P.PT_MAX_PASSWORD_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.DeviceID, P.PT_MAX_DEVICEID_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.LoginType, byteBuffer);
    if(m.LoginType == P.PT_LOGINTYPE_GUEST){
    if(Encode_GMDT_BIG_LOGIN_GUEST(m.GuestLogin, byteBuffer) == false){
        return false;
    }
    }
    if(m.LoginType == P.PT_LOGINTYPE_SDK){
    if(Encode_GMDT_BIG_LOGIN_SDK(m.SDKData, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_BIG_LOGIN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SandBox = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.AppstorePayMode = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.PunishTimeLeft = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.OpenTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ServerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Token = NetData.NetReadString(byteBuffer, P.PT_TOKEN_LEN, ret);
    if(ret.err){return false;}

    m.TokenStamp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.LoginType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BIG_LOGIN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.SandBox, byteBuffer);
    NetData.NetWriteUint8(m.AppstorePayMode, byteBuffer);
    NetData.NetWriteInt32(m.PunishTimeLeft, byteBuffer);
    NetData.NetWriteUint32(m.OpenTime, byteBuffer);
    NetData.NetWriteUint32(m.ServerTime, byteBuffer);
    if(NetData.NetWriteString(m.Token, P.PT_TOKEN_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.TokenStamp, byteBuffer);
    NetData.NetWriteUint8(m.LoginType, byteBuffer);

    return true;
}

var Decode_GMPKG_SMALL_LOGIN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Version = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Account = NetData.NetReadString(byteBuffer, P.PT_MAX_ACCOUNT_LEN, ret);
    if(ret.err){return false;}

    let sizeOfToken = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfToken > P.PT_TOKEN_LEN){return false;}
    m.Token = [];
    for(let i = 0; i < sizeOfToken; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Token.push(v);
    }

    return true;
}

var Encode_GMPKG_SMALL_LOGIN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Version, byteBuffer);
    if(NetData.NetWriteString(m.Account, P.PT_MAX_ACCOUNT_LEN, byteBuffer) == false){
        return false;
    }
    if(!m.Token){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Token.length > P.PT_TOKEN_LEN){return false;}
        NetData.NetWriteInt32(m.Token.length, byteBuffer);
        for(let v of m.Token){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_SMALL_LOGIN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PunishTimeLeft = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_SMALL_LOGIN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.PunishTimeLeft, byteBuffer);

    return true;
}

var Decode_GMPKG_LOGOUT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LOGOUT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_LOGOUT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LOGOUT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_BIND_ACCOUNT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.SdkTicket = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_TICKET_LEN, ret);
    if(ret.err){return false;}

    m.GuestAccount = NetData.NetReadString(byteBuffer, P.PT_MAX_ACCOUNT_LEN, ret);
    if(ret.err){return false;}

    m.BoundleID = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_ID_LEN, ret);
    if(ret.err){return false;}

    m.AdID = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_ID_LEN, ret);
    if(ret.err){return false;}

    m.ServerID = NetData.NetReadString(byteBuffer, P.PT_MAX_SDK_ID_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BIND_ACCOUNT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.SdkTicket, P.PT_MAX_SDK_TICKET_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.GuestAccount, P.PT_MAX_ACCOUNT_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.BoundleID, P.PT_MAX_SDK_ID_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.AdID, P.PT_MAX_SDK_ID_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.ServerID, P.PT_MAX_SDK_ID_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_BIND_ACCOUNT_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Token = NetData.NetReadString(byteBuffer, P.PT_TOKEN_LEN, ret);
    if(ret.err){return false;}

    m.TokenStamp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BIND_ACCOUNT_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.Token, P.PT_TOKEN_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.TokenStamp, byteBuffer);

    return true;
}

var Decode_GMPKG_BIND_ACCOUNT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_BIND_ACCOUNT_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BIND_ACCOUNT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BIND_ACCOUNT_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMDT_PROP = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Value = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_PROP = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteInt32(m.Value, byteBuffer);

    return true;
}

var Decode_GMDT_PROP_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfProps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfProps > P.PTPROP_COUNT){return false;}
    m.Props = [];
    for(let i = 0; i < sizeOfProps; i++){
        let v = {};
        if(Decode_GMDT_PROP(byteBuffer, v) == false){
            return false;
        }
        m.Props.push(v);
    }

    return true;
}

var Encode_GMDT_PROP_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Props){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Props.length > P.PTPROP_COUNT){return false;}
        NetData.NetWriteInt32(m.Props.length, byteBuffer);
        for(let v of m.Props){
            if(Encode_GMDT_PROP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_ALL_PROP = function(byteBuffer, m){
    var ret = {err : false};
    m.HP_Max = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MP_Max = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack_Base = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Defence_Base = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.HPPerLevel = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackPerLevel = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefencePerLevel = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.HPAddPer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackAddPer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefenceAddPer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefencePer_Base = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefencePer_Max = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAddPer_Base = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamReducePer_Base = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack_Main = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack_Skill = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack_Ass = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackPer_Main = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackPer_Skill = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackPer_Ass = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Critical = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CriticalPer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CriDamAddPer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CriDamReducePer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CriPerLimit_Max = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CriDamLimit_Max = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefBreak = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefBreakPer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AntiDefBreakPer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AntiDefBreak = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AntiDefPerLimit_Max = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AntiDefLimit_Eff = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack_Fire = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack_Ice = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack_Light = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack_Dark = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack_Physics = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack_Natrue = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefencePer_Fire = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefencePer_Ice = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefencePer_Light = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefencePer_Dark = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefencePer_Physics = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DefencePer_Natrue = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackPer_Fire = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackPer_Ice = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackPer_Light = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackPer_Dark = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackPer_Physics = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AttackPer_Natrue = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiFire = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiIce = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiLight = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiDark = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiPhysics = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiNatrue = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ElemDamLimit_Min = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ElemResEffSet = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiMonster = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamReduce_AntiMonster = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiPlayer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamReduce_AntiPlayer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiFlyer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamReduce_AntiFlyer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiGround = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamReduce_AntiGround = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiNonBuilding = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamReduce_AntiNonBuilding = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamAdd_AntiBuilding = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DamReduce_AntiBuilding = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RaceDamLimit_Min = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.HealEffectAdd = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BeHealEffectAdd = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BenefitAddProb = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.NegtiveReduceProb = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BulletSpeedAddPer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillCDReducePer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillCDLimit_D = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_All = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_1 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_2 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_3 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_4 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_Fire = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_Ice = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_Light = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_Dark = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_Physics = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillLevelAdd_Nature = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PetSkillLevelAdd_All = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PetSkillLevelAdd_Fire = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PetSkillLevelAdd_Ice = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PetSkillLevelAdd_Light = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PetSkillLevelAdd_Dark = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PetSkillLevelAdd_Physics = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PetSkillLevelAdd_Nature = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ScoreAddPer_All = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ScoreAddPer_Monster = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ScoreAddPer_Boss = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldAddPer = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.HPRestorePer5s = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.NegtiveReduceProb_Fire = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.NegtiveReduceProb_Ice = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.NegtiveReduceProb_Light = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.NegtiveReduceProb_Dark = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.NegtiveReduceProb_Physics = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.NegtiveReduceProb_Nature = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ALL_PROP = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.HP_Max, byteBuffer);
    NetData.NetWriteInt32(m.MP_Max, byteBuffer);
    NetData.NetWriteInt32(m.Attack_Base, byteBuffer);
    NetData.NetWriteInt32(m.Defence_Base, byteBuffer);
    NetData.NetWriteInt32(m.HPPerLevel, byteBuffer);
    NetData.NetWriteInt32(m.AttackPerLevel, byteBuffer);
    NetData.NetWriteInt32(m.DefencePerLevel, byteBuffer);
    NetData.NetWriteInt32(m.HPAddPer, byteBuffer);
    NetData.NetWriteInt32(m.AttackAddPer, byteBuffer);
    NetData.NetWriteInt32(m.DefenceAddPer, byteBuffer);
    NetData.NetWriteInt32(m.DefencePer_Base, byteBuffer);
    NetData.NetWriteInt32(m.DefencePer_Max, byteBuffer);
    NetData.NetWriteInt32(m.DamAddPer_Base, byteBuffer);
    NetData.NetWriteInt32(m.DamReducePer_Base, byteBuffer);
    NetData.NetWriteInt32(m.Attack_Main, byteBuffer);
    NetData.NetWriteInt32(m.Attack_Skill, byteBuffer);
    NetData.NetWriteInt32(m.Attack_Ass, byteBuffer);
    NetData.NetWriteInt32(m.AttackPer_Main, byteBuffer);
    NetData.NetWriteInt32(m.AttackPer_Skill, byteBuffer);
    NetData.NetWriteInt32(m.AttackPer_Ass, byteBuffer);
    NetData.NetWriteInt32(m.Critical, byteBuffer);
    NetData.NetWriteInt32(m.CriticalPer, byteBuffer);
    NetData.NetWriteInt32(m.CriDamAddPer, byteBuffer);
    NetData.NetWriteInt32(m.CriDamReducePer, byteBuffer);
    NetData.NetWriteInt32(m.CriPerLimit_Max, byteBuffer);
    NetData.NetWriteInt32(m.CriDamLimit_Max, byteBuffer);
    NetData.NetWriteInt32(m.DefBreak, byteBuffer);
    NetData.NetWriteInt32(m.DefBreakPer, byteBuffer);
    NetData.NetWriteInt32(m.AntiDefBreakPer, byteBuffer);
    NetData.NetWriteInt32(m.AntiDefBreak, byteBuffer);
    NetData.NetWriteInt32(m.AntiDefPerLimit_Max, byteBuffer);
    NetData.NetWriteInt32(m.AntiDefLimit_Eff, byteBuffer);
    NetData.NetWriteInt32(m.Attack_Fire, byteBuffer);
    NetData.NetWriteInt32(m.Attack_Ice, byteBuffer);
    NetData.NetWriteInt32(m.Attack_Light, byteBuffer);
    NetData.NetWriteInt32(m.Attack_Dark, byteBuffer);
    NetData.NetWriteInt32(m.Attack_Physics, byteBuffer);
    NetData.NetWriteInt32(m.Attack_Natrue, byteBuffer);
    NetData.NetWriteInt32(m.DefencePer_Fire, byteBuffer);
    NetData.NetWriteInt32(m.DefencePer_Ice, byteBuffer);
    NetData.NetWriteInt32(m.DefencePer_Light, byteBuffer);
    NetData.NetWriteInt32(m.DefencePer_Dark, byteBuffer);
    NetData.NetWriteInt32(m.DefencePer_Physics, byteBuffer);
    NetData.NetWriteInt32(m.DefencePer_Natrue, byteBuffer);
    NetData.NetWriteInt32(m.AttackPer_Fire, byteBuffer);
    NetData.NetWriteInt32(m.AttackPer_Ice, byteBuffer);
    NetData.NetWriteInt32(m.AttackPer_Light, byteBuffer);
    NetData.NetWriteInt32(m.AttackPer_Dark, byteBuffer);
    NetData.NetWriteInt32(m.AttackPer_Physics, byteBuffer);
    NetData.NetWriteInt32(m.AttackPer_Natrue, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiFire, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiIce, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiLight, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiDark, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiPhysics, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiNatrue, byteBuffer);
    NetData.NetWriteInt32(m.ElemDamLimit_Min, byteBuffer);
    NetData.NetWriteInt32(m.ElemResEffSet, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiMonster, byteBuffer);
    NetData.NetWriteInt32(m.DamReduce_AntiMonster, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiPlayer, byteBuffer);
    NetData.NetWriteInt32(m.DamReduce_AntiPlayer, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiFlyer, byteBuffer);
    NetData.NetWriteInt32(m.DamReduce_AntiFlyer, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiGround, byteBuffer);
    NetData.NetWriteInt32(m.DamReduce_AntiGround, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiNonBuilding, byteBuffer);
    NetData.NetWriteInt32(m.DamReduce_AntiNonBuilding, byteBuffer);
    NetData.NetWriteInt32(m.DamAdd_AntiBuilding, byteBuffer);
    NetData.NetWriteInt32(m.DamReduce_AntiBuilding, byteBuffer);
    NetData.NetWriteInt32(m.RaceDamLimit_Min, byteBuffer);
    NetData.NetWriteInt32(m.HealEffectAdd, byteBuffer);
    NetData.NetWriteInt32(m.BeHealEffectAdd, byteBuffer);
    NetData.NetWriteInt32(m.BenefitAddProb, byteBuffer);
    NetData.NetWriteInt32(m.NegtiveReduceProb, byteBuffer);
    NetData.NetWriteInt32(m.BulletSpeedAddPer, byteBuffer);
    NetData.NetWriteInt32(m.SkillCDReducePer, byteBuffer);
    NetData.NetWriteInt32(m.SkillCDLimit_D, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_All, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_1, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_2, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_3, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_4, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_Fire, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_Ice, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_Light, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_Dark, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_Physics, byteBuffer);
    NetData.NetWriteInt32(m.SkillLevelAdd_Nature, byteBuffer);
    NetData.NetWriteInt32(m.PetSkillLevelAdd_All, byteBuffer);
    NetData.NetWriteInt32(m.PetSkillLevelAdd_Fire, byteBuffer);
    NetData.NetWriteInt32(m.PetSkillLevelAdd_Ice, byteBuffer);
    NetData.NetWriteInt32(m.PetSkillLevelAdd_Light, byteBuffer);
    NetData.NetWriteInt32(m.PetSkillLevelAdd_Dark, byteBuffer);
    NetData.NetWriteInt32(m.PetSkillLevelAdd_Physics, byteBuffer);
    NetData.NetWriteInt32(m.PetSkillLevelAdd_Nature, byteBuffer);
    NetData.NetWriteInt32(m.ScoreAddPer_All, byteBuffer);
    NetData.NetWriteInt32(m.ScoreAddPer_Monster, byteBuffer);
    NetData.NetWriteInt32(m.ScoreAddPer_Boss, byteBuffer);
    NetData.NetWriteInt32(m.GoldAddPer, byteBuffer);
    NetData.NetWriteInt32(m.HPRestorePer5s, byteBuffer);
    NetData.NetWriteInt32(m.NegtiveReduceProb_Fire, byteBuffer);
    NetData.NetWriteInt32(m.NegtiveReduceProb_Ice, byteBuffer);
    NetData.NetWriteInt32(m.NegtiveReduceProb_Light, byteBuffer);
    NetData.NetWriteInt32(m.NegtiveReduceProb_Dark, byteBuffer);
    NetData.NetWriteInt32(m.NegtiveReduceProb_Physics, byteBuffer);
    NetData.NetWriteInt32(m.NegtiveReduceProb_Nature, byteBuffer);

    return true;
}

var Decode_GMDT_STAT_FLAGS = function(byteBuffer, m){
    var ret = {err : false};
    m.RcgHuiKuiFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StoreNormalFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StoreBlackFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StoreTenderFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StoreArenaFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TreasureFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LotteryFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.SigninFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DailyFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.AchieveFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.AchieveMixFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.AchieveEndlessFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.AchieveArenaFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.AchieveRankFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.AchieveBossTowerFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndlessRankUpFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuLiSevenFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuLiGiftVIPFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuLiCZFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyMonthCardFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyWeekCardFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BossTowerFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.NuclearFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StoreMiBaoFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StoreVIPFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FundFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StoreNuclearFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StoreTowerFloorFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuildBossRewardFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuildBossPlayFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.PatrolFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ExploreFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.HonorFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.MainTaskFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.HeChengFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuLiVipBonusFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FeedBackFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildTaskFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuLiMillionFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.AMSFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_STAT_FLAGS = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.RcgHuiKuiFlag, byteBuffer);
    NetData.NetWriteUint8(m.StoreNormalFlag, byteBuffer);
    NetData.NetWriteUint8(m.StoreBlackFlag, byteBuffer);
    NetData.NetWriteUint8(m.StoreTenderFlag, byteBuffer);
    NetData.NetWriteUint8(m.StoreArenaFlag, byteBuffer);
    NetData.NetWriteUint8(m.TreasureFlag, byteBuffer);
    NetData.NetWriteUint8(m.LotteryFlag, byteBuffer);
    NetData.NetWriteUint8(m.SigninFlag, byteBuffer);
    NetData.NetWriteUint8(m.DailyFlag, byteBuffer);
    NetData.NetWriteUint8(m.AchieveFlag, byteBuffer);
    NetData.NetWriteUint8(m.AchieveMixFlag, byteBuffer);
    NetData.NetWriteUint8(m.AchieveEndlessFlag, byteBuffer);
    NetData.NetWriteUint8(m.AchieveArenaFlag, byteBuffer);
    NetData.NetWriteUint8(m.AchieveRankFlag, byteBuffer);
    NetData.NetWriteUint8(m.AchieveBossTowerFlag, byteBuffer);
    NetData.NetWriteUint8(m.EndlessRankUpFlag, byteBuffer);
    NetData.NetWriteUint8(m.FuLiSevenFlag, byteBuffer);
    NetData.NetWriteUint8(m.FuLiGiftVIPFlag, byteBuffer);
    NetData.NetWriteUint8(m.FuLiCZFlag, byteBuffer);
    NetData.NetWriteUint8(m.BuyMonthCardFlag, byteBuffer);
    NetData.NetWriteUint8(m.BuyWeekCardFlag, byteBuffer);
    NetData.NetWriteUint8(m.BossTowerFlag, byteBuffer);
    NetData.NetWriteUint8(m.NuclearFlag, byteBuffer);
    NetData.NetWriteUint8(m.StoreMiBaoFlag, byteBuffer);
    NetData.NetWriteUint8(m.StoreVIPFlag, byteBuffer);
    NetData.NetWriteUint8(m.FundFlag, byteBuffer);
    NetData.NetWriteUint8(m.StoreNuclearFlag, byteBuffer);
    NetData.NetWriteUint8(m.StoreTowerFloorFlag, byteBuffer);
    NetData.NetWriteUint8(m.GuildBossRewardFlag, byteBuffer);
    NetData.NetWriteUint8(m.GuildBossPlayFlag, byteBuffer);
    NetData.NetWriteUint8(m.PatrolFlag, byteBuffer);
    NetData.NetWriteUint8(m.ExploreFlag, byteBuffer);
    NetData.NetWriteUint8(m.HonorFlag, byteBuffer);
    NetData.NetWriteUint8(m.MainTaskFlag, byteBuffer);
    NetData.NetWriteUint8(m.HeChengFlag, byteBuffer);
    NetData.NetWriteUint8(m.FuLiVipBonusFlag, byteBuffer);
    NetData.NetWriteUint8(m.FeedBackFlag, byteBuffer);
    NetData.NetWriteUint8(m.BuildTaskFlag, byteBuffer);
    NetData.NetWriteUint8(m.FuLiMillionFlag, byteBuffer);
    NetData.NetWriteUint8(m.AMSFlag, byteBuffer);

    return true;
}

var Decode_GMDT_SPBAG = function(byteBuffer, m){
    var ret = {err : false};
    m.Sp = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpBack = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastRecoverTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_SPBAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Sp, byteBuffer);
    NetData.NetWriteUint16(m.SpBack, byteBuffer);
    NetData.NetWriteUint32(m.LastRecoverTime, byteBuffer);
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    NetData.NetWriteUint8(m.FreeCount, byteBuffer);

    return true;
}

var Decode_GMDT_LEADEREQUIP = function(byteBuffer, m){
    var ret = {err : false};
    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Quality = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_LEADEREQUIP = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Pos, byteBuffer);
    NetData.NetWriteUint16(m.Quality, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);

    return true;
}

var Decode_GMDT_LEADEREQUIP_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfEquips = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfEquips > P.PT_LEADEREQUIP_POS_MAX){return false;}
    m.Equips = [];
    for(let i = 0; i < sizeOfEquips; i++){
        let v = {};
        if(Decode_GMDT_LEADEREQUIP(byteBuffer, v) == false){
            return false;
        }
        m.Equips.push(v);
    }

    return true;
}

var Encode_GMDT_LEADEREQUIP_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Equips){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Equips.length > P.PT_LEADEREQUIP_POS_MAX){return false;}
        NetData.NetWriteInt32(m.Equips.length, byteBuffer);
        for(let v of m.Equips){
            if(Encode_GMDT_LEADEREQUIP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_ROLEEQUIP = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Slot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ROLEEQUIP = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.Slot, byteBuffer);

    return true;
}

var Decode_GMDT_ROLEEQUIP_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfOnEquips = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfOnEquips > P.PT_ROLEEQUIP_PART_MAX){return false;}
    m.OnEquips = [];
    for(let i = 0; i < sizeOfOnEquips; i++){
        let v = {};
        if(Decode_GMDT_ROLEEQUIP(byteBuffer, v) == false){
            return false;
        }
        m.OnEquips.push(v);
    }

    let sizeOfOffEquips = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfOffEquips > P.PT_ROLEEQUIP_BAG_MAX){return false;}
    m.OffEquips = [];
    for(let i = 0; i < sizeOfOffEquips; i++){
        let v = {};
        if(Decode_GMDT_ROLEEQUIP(byteBuffer, v) == false){
            return false;
        }
        m.OffEquips.push(v);
    }

    m.LingWuLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ZiZuan = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.QianNeng = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGemLevel = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGemLevel > P.PT_ROLEEQUIP_BAG_MAX){return false;}
    m.GemLevel = [];
    for(let i = 0; i < sizeOfGemLevel; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.GemLevel.push(v);
    }

    let sizeOfQhLevel = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfQhLevel > P.PT_ROLEEQUIP_BAG_MAX){return false;}
    m.QhLevel = [];
    for(let i = 0; i < sizeOfQhLevel; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.QhLevel.push(v);
    }

    return true;
}

var Encode_GMDT_ROLEEQUIP_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.OnEquips){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.OnEquips.length > P.PT_ROLEEQUIP_PART_MAX){return false;}
        NetData.NetWriteInt32(m.OnEquips.length, byteBuffer);
        for(let v of m.OnEquips){
            if(Encode_GMDT_ROLEEQUIP(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.OffEquips){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.OffEquips.length > P.PT_ROLEEQUIP_BAG_MAX){return false;}
        NetData.NetWriteInt32(m.OffEquips.length, byteBuffer);
        for(let v of m.OffEquips){
            if(Encode_GMDT_ROLEEQUIP(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint16(m.LingWuLevel, byteBuffer);
    NetData.NetWriteInt32(m.ZiZuan, byteBuffer);
    NetData.NetWriteInt32(m.QianNeng, byteBuffer);
    if(!m.GemLevel){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GemLevel.length > P.PT_ROLEEQUIP_BAG_MAX){return false;}
        NetData.NetWriteInt32(m.GemLevel.length, byteBuffer);
        for(let v of m.GemLevel){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.QhLevel){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.QhLevel.length > P.PT_ROLEEQUIP_BAG_MAX){return false;}
        NetData.NetWriteInt32(m.QhLevel.length, byteBuffer);
        for(let v of m.QhLevel){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMDT_BATTLEFIELD = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CommanderID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BATTLEFIELD = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.CommanderID, byteBuffer);

    return true;
}

var Decode_GMDT_COMMANDER = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Quality = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Star = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_COMMANDER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.Quality, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint16(m.Star, byteBuffer);

    return true;
}

var Decode_GMDT_COMMANDER_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfBattleField = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBattleField > P.PT_BATTLEFIELD_MAX){return false;}
    m.BattleField = [];
    for(let i = 0; i < sizeOfBattleField; i++){
        let v = {};
        if(Decode_GMDT_BATTLEFIELD(byteBuffer, v) == false){
            return false;
        }
        m.BattleField.push(v);
    }

    let sizeOfCommander = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfCommander > P.PT_COMMANDER_BAG_MAX){return false;}
    m.Commander = [];
    for(let i = 0; i < sizeOfCommander; i++){
        let v = {};
        if(Decode_GMDT_COMMANDER(byteBuffer, v) == false){
            return false;
        }
        m.Commander.push(v);
    }

    return true;
}

var Encode_GMDT_COMMANDER_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.BattleField){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BattleField.length > P.PT_BATTLEFIELD_MAX){return false;}
        NetData.NetWriteInt32(m.BattleField.length, byteBuffer);
        for(let v of m.BattleField){
            if(Encode_GMDT_BATTLEFIELD(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.Commander){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Commander.length > P.PT_COMMANDER_BAG_MAX){return false;}
        NetData.NetWriteInt32(m.Commander.length, byteBuffer);
        for(let v of m.Commander){
            if(Encode_GMDT_COMMANDER(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_LEADER = function(byteBuffer, m){
    var ret = {err : false};
    m.CombatCapacity = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CombatCapacity_HistoryMax = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MilitaryRank = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LeaderIconID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.EquipBag = {};
    if(Decode_GMDT_LEADEREQUIP_BAG(byteBuffer, m.EquipBag) == false){
        return false;
    }

    m.RoleEquipBag = {};
    if(Decode_GMDT_ROLEEQUIP_BAG(byteBuffer, m.RoleEquipBag) == false){
        return false;
    }

    m.CommanderBag = {};
    if(Decode_GMDT_COMMANDER_BAG(byteBuffer, m.CommanderBag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_LEADER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.CombatCapacity, byteBuffer);
    NetData.NetWriteUint32(m.CombatCapacity_HistoryMax, byteBuffer);
    NetData.NetWriteUint8(m.MilitaryRank, byteBuffer);
    NetData.NetWriteUint16(m.LeaderIconID, byteBuffer);
    if(Encode_GMDT_LEADEREQUIP_BAG(m.EquipBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ROLEEQUIP_BAG(m.RoleEquipBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_COMMANDER_BAG(m.CommanderBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_MEMBER_EQUIP = function(byteBuffer, m){
    var ret = {err : false};
    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LevelGold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.StarLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.StarExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfReturnItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReturnItem > P.PT_BAG_ITEM_MAX){return false;}
    m.ReturnItem = [];
    for(let i = 0; i < sizeOfReturnItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ReturnItem.push(v);
    }

    m.RefineLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefineCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MEMBER_EQUIP = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.LevelGold, byteBuffer);
    NetData.NetWriteUint16(m.StarLevel, byteBuffer);
    NetData.NetWriteInt32(m.StarExp, byteBuffer);
    if(!m.ReturnItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ReturnItem.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ReturnItem.length, byteBuffer);
        for(let v of m.ReturnItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint16(m.RefineLevel, byteBuffer);
    NetData.NetWriteUint16(m.RefineCount, byteBuffer);

    return true;
}

var Decode_GMDT_GUAZAI = function(byteBuffer, m){
    var ret = {err : false};
    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Exp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.StarLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.StarExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfStarProps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfStarProps > P.PTPROP_COUNT){return false;}
    m.StarProps = [];
    for(let i = 0; i < sizeOfStarProps; i++){
        let v = {};
        if(Decode_GMDT_PROP(byteBuffer, v) == false){
            return false;
        }
        m.StarProps.push(v);
    }

    let sizeOfReturnItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReturnItem > P.PT_BAG_ITEM_MAX){return false;}
    m.ReturnItem = [];
    for(let i = 0; i < sizeOfReturnItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ReturnItem.push(v);
    }

    m.AwakeLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.AwakeExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUAZAI = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.Exp, byteBuffer);
    NetData.NetWriteUint16(m.StarLevel, byteBuffer);
    NetData.NetWriteInt32(m.StarExp, byteBuffer);
    if(!m.StarProps){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.StarProps.length > P.PTPROP_COUNT){return false;}
        NetData.NetWriteInt32(m.StarProps.length, byteBuffer);
        for(let v of m.StarProps){
            if(Encode_GMDT_PROP(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.ReturnItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ReturnItem.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ReturnItem.length, byteBuffer);
        for(let v of m.ReturnItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint16(m.AwakeLevel, byteBuffer);
    NetData.NetWriteInt32(m.AwakeExp, byteBuffer);

    return true;
}

var Decode_GMDT_ITEM = function(byteBuffer, m){
    var ret = {err : false};
    m.Slot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.Type == P.PT_ITEMTYPE_MEMBER_EQUIP){
    m.MemberEquip = {};
    if(Decode_GMDT_MEMBER_EQUIP(byteBuffer, m.MemberEquip) == false){
        return false;
    }
    }

    if(m.Type == P.PT_ITEMTYPE_GUAZAI){
    m.GuaZai = {};
    if(Decode_GMDT_GUAZAI(byteBuffer, m.GuaZai) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMDT_ITEM = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Slot, byteBuffer);
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint16(m.Count, byteBuffer);
    if(m.Type == P.PT_ITEMTYPE_MEMBER_EQUIP){
    if(Encode_GMDT_MEMBER_EQUIP(m.MemberEquip, byteBuffer) == false){
        return false;
    }
    }
    if(m.Type == P.PT_ITEMTYPE_GUAZAI){
    if(Encode_GMDT_GUAZAI(m.GuaZai, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMDT_MEMBER_TECH = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfProps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfProps > P.PT_MEMBER_TECH_COUNT){return false;}
    m.Props = [];
    for(let i = 0; i < sizeOfProps; i++){
        let v = {};
        if(Decode_GMDT_PROP(byteBuffer, v) == false){
            return false;
        }
        m.Props.push(v);
    }

    let sizeOfAddProps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfAddProps > P.PT_MEMBER_TECH_COUNT){return false;}
    m.AddProps = [];
    for(let i = 0; i < sizeOfAddProps; i++){
        let v = {};
        if(Decode_GMDT_PROP(byteBuffer, v) == false){
            return false;
        }
        m.AddProps.push(v);
    }

    return true;
}

var Encode_GMDT_MEMBER_TECH = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Props){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Props.length > P.PT_MEMBER_TECH_COUNT){return false;}
        NetData.NetWriteInt32(m.Props.length, byteBuffer);
        for(let v of m.Props){
            if(Encode_GMDT_PROP(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.AddProps){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.AddProps.length > P.PT_MEMBER_TECH_COUNT){return false;}
        NetData.NetWriteInt32(m.AddProps.length, byteBuffer);
        for(let v of m.AddProps){
            if(Encode_GMDT_PROP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_SPECIAL = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Quality = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_SPECIAL = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint16(m.Quality, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER_PATROL = function(byteBuffer, m){
    var ret = {err : false};
    m.Sp = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.NextRecoverTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MEMBER_PATROL = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Sp, byteBuffer);
    NetData.NetWriteUint32(m.NextRecoverTime, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER_WEAPON = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Quality = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MEMBER_WEAPON = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint16(m.Quality, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Exp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Quality = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.TechLevel = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TechQuality = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TechStar = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfEquips = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfEquips > P.PT_MEMBER_EQUIP_POSCOUNT){return false;}
    m.Equips = [];
    for(let i = 0; i < sizeOfEquips; i++){
        let v = {};
        if(Decode_GMDT_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Equips.push(v);
    }

    m.Tech = {};
    if(Decode_GMDT_MEMBER_TECH(byteBuffer, m.Tech) == false){
        return false;
    }

    m.DressID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.StarID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.StarLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSpecial = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSpecial > P.PT_SPECIAL_MAX){return false;}
    m.Special = [];
    for(let i = 0; i < sizeOfSpecial; i++){
        let v = {};
        if(Decode_GMDT_SPECIAL(byteBuffer, v) == false){
            return false;
        }
        m.Special.push(v);
    }

    let sizeOfRelation = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRelation > P.PT_RELATION_MAX){return false;}
    m.Relation = [];
    for(let i = 0; i < sizeOfRelation; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.Relation.push(v);
    }

    let sizeOfReturnItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReturnItem > P.PT_BAG_ITEM_MAX){return false;}
    m.ReturnItem = [];
    for(let i = 0; i < sizeOfReturnItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ReturnItem.push(v);
    }

    m.Patrol = {};
    if(Decode_GMDT_MEMBER_PATROL(byteBuffer, m.Patrol) == false){
        return false;
    }

    m.Combat = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfWeapon = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfWeapon > P.PT_MEMBER_WEAPON_MAX_COUNT){return false;}
    m.Weapon = [];
    for(let i = 0; i < sizeOfWeapon; i++){
        let v = {};
        if(Decode_GMDT_MEMBER_WEAPON(byteBuffer, v) == false){
            return false;
        }
        m.Weapon.push(v);
    }

    m.EquipedWeaponID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MEMBER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint32(m.Exp, byteBuffer);
    NetData.NetWriteUint16(m.Quality, byteBuffer);
    NetData.NetWriteUint8(m.TechLevel, byteBuffer);
    NetData.NetWriteUint8(m.TechQuality, byteBuffer);
    NetData.NetWriteUint8(m.TechStar, byteBuffer);
    if(!m.Equips){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Equips.length > P.PT_MEMBER_EQUIP_POSCOUNT){return false;}
        NetData.NetWriteInt32(m.Equips.length, byteBuffer);
        for(let v of m.Equips){
            if(Encode_GMDT_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_MEMBER_TECH(m.Tech, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.DressID, byteBuffer);
    NetData.NetWriteUint16(m.StarID, byteBuffer);
    NetData.NetWriteUint16(m.StarLevel, byteBuffer);
    if(!m.Special){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Special.length > P.PT_SPECIAL_MAX){return false;}
        NetData.NetWriteInt32(m.Special.length, byteBuffer);
        for(let v of m.Special){
            if(Encode_GMDT_SPECIAL(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.Relation){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Relation.length > P.PT_RELATION_MAX){return false;}
        NetData.NetWriteInt32(m.Relation.length, byteBuffer);
        for(let v of m.Relation){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }
    if(!m.ReturnItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ReturnItem.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ReturnItem.length, byteBuffer);
        for(let v of m.ReturnItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_MEMBER_PATROL(m.Patrol, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Combat, byteBuffer);
    if(!m.Weapon){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Weapon.length > P.PT_MEMBER_WEAPON_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.Weapon.length, byteBuffer);
        for(let v of m.Weapon){
            if(Encode_GMDT_MEMBER_WEAPON(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint16(m.EquipedWeaponID, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfMembers = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMembers > P.PT_MEMBER_MAX_COUNT){return false;}
    m.Members = [];
    for(let i = 0; i < sizeOfMembers; i++){
        let v = {};
        if(Decode_GMDT_MEMBER(byteBuffer, v) == false){
            return false;
        }
        m.Members.push(v);
    }

    return true;
}

var Encode_GMDT_MEMBER_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Members){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Members.length > P.PT_MEMBER_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.Members.length, byteBuffer);
        for(let v of m.Members){
            if(Encode_GMDT_MEMBER(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_GUAZAI_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfGuaZais = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuaZais > P.PT_GUAZAI_MAX_COUNT){return false;}
    m.GuaZais = [];
    for(let i = 0; i < sizeOfGuaZais; i++){
        let v = {};
        if(Decode_GMDT_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.GuaZais.push(v);
    }

    return true;
}

var Encode_GMDT_GUAZAI_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.GuaZais){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GuaZais.length > P.PT_GUAZAI_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.GuaZais.length, byteBuffer);
        for(let v of m.GuaZais){
            if(Encode_GMDT_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_ITEM_SLOT = function(byteBuffer, m){
    var ret = {err : false};
    m.Slot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ITEM_SLOT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Slot, byteBuffer);
    NetData.NetWriteUint16(m.Count, byteBuffer);

    return true;
}

var Decode_GMDT_ITEM_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.Unlock = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_BAG_ITEM_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    return true;
}

var Encode_GMDT_ITEM_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Unlock, byteBuffer);
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_ITEM_CHANGE = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_BAG_ITEM_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    return true;
}

var Encode_GMDT_ITEM_CHANGE = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_CAMPAIGN = function(byteBuffer, m){
    var ret = {err : false};
    m.Star = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Played = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_CAMPAIGN = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Star, byteBuffer);
    NetData.NetWriteUint8(m.BuyCount, byteBuffer);
    NetData.NetWriteUint8(m.Played, byteBuffer);
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);

    return true;
}

var Decode_GMDT_CHUZHAN_CONF = function(byteBuffer, m){
    var ret = {err : false};
    m.ChuZhanMemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MixMember1ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MixMember2ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MixMember3ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MixMember4ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MysteryID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_CHUZHAN_CONF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ChuZhanMemberID, byteBuffer);
    NetData.NetWriteUint16(m.MixMember1ID, byteBuffer);
    NetData.NetWriteUint16(m.MixMember2ID, byteBuffer);
    NetData.NetWriteUint16(m.MixMember3ID, byteBuffer);
    NetData.NetWriteUint16(m.MixMember4ID, byteBuffer);
    NetData.NetWriteUint16(m.MysteryID, byteBuffer);

    return true;
}

var Decode_GMDT_CHUZHAN_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.ChuZhanConf = {};
    if(Decode_GMDT_CHUZHAN_CONF(byteBuffer, m.ChuZhanConf) == false){
        return false;
    }

    m.Level = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_CHUZHAN_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_CHUZHAN_CONF(m.ChuZhanConf, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.Level, byteBuffer);

    return true;
}

var Decode_GMDT_CHAPTER = function(byteBuffer, m){
    var ret = {err : false};
    m.ChapterID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardDraw = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardDraw > P.PT_CAMP_CHAPTER_REWARD_SIZE){return false;}
    m.RewardDraw = [];
    for(let i = 0; i < sizeOfRewardDraw; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.RewardDraw.push(v);
    }

    let sizeOfCampaign = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfCampaign > P.PT_CAMPAIGN_MAX_COUNT){return false;}
    m.Campaign = [];
    for(let i = 0; i < sizeOfCampaign; i++){
        let v = {};
        if(Decode_GMDT_CAMPAIGN(byteBuffer, v) == false){
            return false;
        }
        m.Campaign.push(v);
    }

    return true;
}

var Encode_GMDT_CHAPTER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ChapterID, byteBuffer);
    if(!m.RewardDraw){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardDraw.length > P.PT_CAMP_CHAPTER_REWARD_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardDraw.length, byteBuffer);
        for(let v of m.RewardDraw){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.Campaign){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Campaign.length > P.PT_CAMPAIGN_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.Campaign.length, byteBuffer);
        for(let v of m.Campaign){
            if(Encode_GMDT_CAMPAIGN(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_SUB_CAMP_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfChapter = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfChapter > P.PT_CHAPTER_MAX_COUNT){return false;}
    m.Chapter = [];
    for(let i = 0; i < sizeOfChapter; i++){
        let v = {};
        if(Decode_GMDT_CHAPTER(byteBuffer, v) == false){
            return false;
        }
        m.Chapter.push(v);
    }

    return true;
}

var Encode_GMDT_SUB_CAMP_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Chapter){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Chapter.length > P.PT_CHAPTER_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.Chapter.length, byteBuffer);
        for(let v of m.Chapter){
            if(Encode_GMDT_CHAPTER(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_STORE_ITEM = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Cost = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.State = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_STORE_ITEM = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteUint16(m.Count, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteInt32(m.Cost, byteBuffer);
    NetData.NetWriteUint8(m.State, byteBuffer);

    return true;
}

var Decode_GMDT_STORE = function(byteBuffer, m){
    var ret = {err : false};
    m.RefreshTimes = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Expires = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_STORE_ITEM_MAX){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_STORE_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMDT_STORE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.RefreshTimes, byteBuffer);
    NetData.NetWriteUint32(m.Expires, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_STORE_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_STORE_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_GUILD_LIST_MEMBER = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Role = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.WeeklyContribute = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.OnlineStatus = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LogoutTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_LIST_MEMBER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.Role, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.WeeklyContribute, byteBuffer);
    NetData.NetWriteUint8(m.OnlineStatus, byteBuffer);
    NetData.NetWriteUint32(m.LogoutTime, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_LIST_RANKING_MEMBER = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Icon = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndlessRankID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.WeekMaxScore = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.Likes = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_LIST_RANKING_MEMBER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Icon, byteBuffer);
    NetData.NetWriteUint8(m.EndlessRankID, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    NetData.NetWriteUint64(m.WeekMaxScore, byteBuffer);
    NetData.NetWriteUint32(m.Likes, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_LIST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Combat = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_LIST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Combat, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_MEDAL = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildMedalID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuildMedalLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_MEDAL = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.GuildMedalID, byteBuffer);
    NetData.NetWriteUint16(m.GuildMedalLevel, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.Status = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Time = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurrentContribute = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.WeeklyContribute = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.HistoricalContribute = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGuildMedals = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuildMedals > P.PT_GUILD_MEDAL_MAX_COUNT){return false;}
    m.GuildMedals = [];
    for(let i = 0; i < sizeOfGuildMedals; i++){
        let v = {};
        if(Decode_GMDT_GUILD_MEDAL(byteBuffer, v) == false){
            return false;
        }
        m.GuildMedals.push(v);
    }

    m.Role = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LikeClicks = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LuckyDraws = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.GuildID, byteBuffer);
    NetData.NetWriteUint8(m.Status, byteBuffer);
    NetData.NetWriteUint32(m.Time, byteBuffer);
    NetData.NetWriteInt32(m.CurrentContribute, byteBuffer);
    NetData.NetWriteInt32(m.WeeklyContribute, byteBuffer);
    NetData.NetWriteInt32(m.HistoricalContribute, byteBuffer);
    if(!m.GuildMedals){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GuildMedals.length > P.PT_GUILD_MEDAL_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.GuildMedals.length, byteBuffer);
        for(let v of m.GuildMedals){
            if(Encode_GMDT_GUILD_MEDAL(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.Role, byteBuffer);
    NetData.NetWriteUint16(m.LikeClicks, byteBuffer);
    NetData.NetWriteUint8(m.LuckyDraws, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_BUBBLE = function(byteBuffer, m){
    var ret = {err : false};
    m.Time = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MsgContent = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDMSG_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_BUBBLE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Time, byteBuffer);
    if(NetData.NetWriteString(m.MsgContent, P.PT_MAX_GUILDMSG_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_ARENA_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.Points = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LikeClicks = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalCount = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalWinCount = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ARENA_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Points, byteBuffer);
    NetData.NetWriteUint16(m.ChallengeCount, byteBuffer);
    NetData.NetWriteUint16(m.FreeChallengeCount, byteBuffer);
    NetData.NetWriteUint16(m.LikeClicks, byteBuffer);
    NetData.NetWriteUint32(m.TotalCount, byteBuffer);
    NetData.NetWriteUint32(m.TotalWinCount, byteBuffer);

    return true;
}

var Decode_GMDT_EXT_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.ArenaRankingMax = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.NuclearScore = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BossTowerMaxFloor = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuliSevenAct = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FirstOpenTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_EXT_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.ArenaRankingMax, byteBuffer);
    NetData.NetWriteInt32(m.NuclearScore, byteBuffer);
    NetData.NetWriteUint16(m.BossTowerMaxFloor, byteBuffer);
    NetData.NetWriteUint8(m.FuliSevenAct, byteBuffer);
    NetData.NetWriteUint32(m.FirstOpenTime, byteBuffer);

    return true;
}

var Decode_GMDT_MYSTERY = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MYSTERY = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);

    return true;
}

var Decode_GMDT_MYSTERY_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfMystery = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMystery > P.PT_MYSTERY_MAX){return false;}
    m.Mystery = [];
    for(let i = 0; i < sizeOfMystery; i++){
        let v = {};
        if(Decode_GMDT_MYSTERY(byteBuffer, v) == false){
            return false;
        }
        m.Mystery.push(v);
    }

    return true;
}

var Encode_GMDT_MYSTERY_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Mystery){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Mystery.length > P.PT_MYSTERY_MAX){return false;}
        NetData.NetWriteInt32(m.Mystery.length, byteBuffer);
        for(let v of m.Mystery){
            if(Encode_GMDT_MYSTERY(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_DRESS = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_DRESS = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);

    return true;
}

var Decode_GMDT_DRESS_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfDress = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDress > P.PT_DRESS_MAX){return false;}
    m.Dress = [];
    for(let i = 0; i < sizeOfDress; i++){
        let v = {};
        if(Decode_GMDT_DRESS(byteBuffer, v) == false){
            return false;
        }
        m.Dress.push(v);
    }

    return true;
}

var Encode_GMDT_DRESS_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Dress){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Dress.length > P.PT_DRESS_MAX){return false;}
        NetData.NetWriteInt32(m.Dress.length, byteBuffer);
        for(let v of m.Dress){
            if(Encode_GMDT_DRESS(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_PATROL_TASK = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FinishTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_PATROL_TASK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint32(m.FinishTime, byteBuffer);

    return true;
}

var Decode_GMDT_PATROL_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.RefreshTimes = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuySpTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfTask = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfTask > P.PT_PATROL_TASK_MAX){return false;}
    m.Task = [];
    for(let i = 0; i < sizeOfTask; i++){
        let v = {};
        if(Decode_GMDT_PATROL_TASK(byteBuffer, v) == false){
            return false;
        }
        m.Task.push(v);
    }

    return true;
}

var Encode_GMDT_PATROL_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.RefreshTimes, byteBuffer);
    NetData.NetWriteUint8(m.BuySpTimes, byteBuffer);
    if(!m.Task){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Task.length > P.PT_PATROL_TASK_MAX){return false;}
        NetData.NetWriteInt32(m.Task.length, byteBuffer);
        for(let v of m.Task){
            if(Encode_GMDT_PATROL_TASK(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_TONGSHUAI = function(byteBuffer, m){
    var ret = {err : false};
    m.Tid = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_TONGSHUAI = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Tid, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);

    return true;
}

var Decode_GMDT_HONOR_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.Honor = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RankID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Exp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGiven = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGiven > P.PT_HONOR_GIVEN_MAX){return false;}
    m.Given = [];
    for(let i = 0; i < sizeOfGiven; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Given.push(v);
    }

    let sizeOfProps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfProps > P.PTPROP_COUNT){return false;}
    m.Props = [];
    for(let i = 0; i < sizeOfProps; i++){
        let v = {};
        if(Decode_GMDT_PROP(byteBuffer, v) == false){
            return false;
        }
        m.Props.push(v);
    }

    let sizeOfTongShuai = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfTongShuai > P.PT_HONOR_TONGSHUAI_MAX){return false;}
    m.TongShuai = [];
    for(let i = 0; i < sizeOfTongShuai; i++){
        let v = {};
        if(Decode_GMDT_TONGSHUAI(byteBuffer, v) == false){
            return false;
        }
        m.TongShuai.push(v);
    }

    return true;
}

var Encode_GMDT_HONOR_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Honor, byteBuffer);
    NetData.NetWriteUint8(m.RankID, byteBuffer);
    NetData.NetWriteInt32(m.Exp, byteBuffer);
    if(!m.Given){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Given.length > P.PT_HONOR_GIVEN_MAX){return false;}
        NetData.NetWriteInt32(m.Given.length, byteBuffer);
        for(let v of m.Given){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.Props){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Props.length > P.PTPROP_COUNT){return false;}
        NetData.NetWriteInt32(m.Props.length, byteBuffer);
        for(let v of m.Props){
            if(Encode_GMDT_PROP(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.TongShuai){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.TongShuai.length > P.PT_HONOR_TONGSHUAI_MAX){return false;}
        NetData.NetWriteInt32(m.TongShuai.length, byteBuffer);
        for(let v of m.TongShuai){
            if(Encode_GMDT_TONGSHUAI(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_QUEUE = function(byteBuffer, m){
    var ret = {err : false};
    m.QueueID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.NextLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FinishTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_QUEUE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.QueueID, byteBuffer);
    NetData.NetWriteUint16(m.BuildID, byteBuffer);
    NetData.NetWriteUint16(m.NextLevel, byteBuffer);
    NetData.NetWriteUint32(m.FinishTime, byteBuffer);

    return true;
}

var Decode_GMDT_BASEBUILD = function(byteBuffer, m){
    var ret = {err : false};
    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MainQueueID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BASEBUILD = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint8(m.MainQueueID, byteBuffer);

    return true;
}

var Decode_GMDT_BUILD = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SubQueueID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BUILD = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint8(m.SubQueueID, byteBuffer);

    return true;
}

var Decode_GMDT_RESBUILD = function(byteBuffer, m){
    var ret = {err : false};
    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MainQueueID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.AddIron = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AddCopper = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AddQuartz = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSubBuild = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSubBuild > P.PT_RES_BUILD_MAX){return false;}
    m.SubBuild = [];
    for(let i = 0; i < sizeOfSubBuild; i++){
        let v = {};
        if(Decode_GMDT_BUILD(byteBuffer, v) == false){
            return false;
        }
        m.SubBuild.push(v);
    }

    let sizeOfSubQueue = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSubQueue > P.PT_BUILD_QUEUE_MAX){return false;}
    m.SubQueue = [];
    for(let i = 0; i < sizeOfSubQueue; i++){
        let v = {};
        if(Decode_GMDT_QUEUE(byteBuffer, v) == false){
            return false;
        }
        m.SubQueue.push(v);
    }

    m.LastOutPutTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_RESBUILD = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint8(m.MainQueueID, byteBuffer);
    NetData.NetWriteInt32(m.AddIron, byteBuffer);
    NetData.NetWriteInt32(m.AddCopper, byteBuffer);
    NetData.NetWriteInt32(m.AddQuartz, byteBuffer);
    if(!m.SubBuild){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SubBuild.length > P.PT_RES_BUILD_MAX){return false;}
        NetData.NetWriteInt32(m.SubBuild.length, byteBuffer);
        for(let v of m.SubBuild){
            if(Encode_GMDT_BUILD(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.SubQueue){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SubQueue.length > P.PT_BUILD_QUEUE_MAX){return false;}
        NetData.NetWriteInt32(m.SubQueue.length, byteBuffer);
        for(let v of m.SubQueue){
            if(Encode_GMDT_QUEUE(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint32(m.LastOutPutTime, byteBuffer);

    return true;
}

var Decode_GMDT_TECHBUILD = function(byteBuffer, m){
    var ret = {err : false};
    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MainQueueID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSubBuild = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSubBuild > P.PT_TECH_BUILD_MAX){return false;}
    m.SubBuild = [];
    for(let i = 0; i < sizeOfSubBuild; i++){
        let v = {};
        if(Decode_GMDT_BUILD(byteBuffer, v) == false){
            return false;
        }
        m.SubBuild.push(v);
    }

    let sizeOfSubQueue = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSubQueue > P.PT_BUILD_QUEUE_MAX){return false;}
    m.SubQueue = [];
    for(let i = 0; i < sizeOfSubQueue; i++){
        let v = {};
        if(Decode_GMDT_QUEUE(byteBuffer, v) == false){
            return false;
        }
        m.SubQueue.push(v);
    }

    return true;
}

var Encode_GMDT_TECHBUILD = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint8(m.MainQueueID, byteBuffer);
    if(!m.SubBuild){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SubBuild.length > P.PT_TECH_BUILD_MAX){return false;}
        NetData.NetWriteInt32(m.SubBuild.length, byteBuffer);
        for(let v of m.SubBuild){
            if(Encode_GMDT_BUILD(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.SubQueue){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SubQueue.length > P.PT_BUILD_QUEUE_MAX){return false;}
        NetData.NetWriteInt32(m.SubQueue.length, byteBuffer);
        for(let v of m.SubQueue){
            if(Encode_GMDT_QUEUE(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_EQUIPQUEUE = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FinishTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_EQUIPQUEUE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint32(m.FinishTime, byteBuffer);

    return true;
}

var Decode_GMDT_EQUIPBUILD = function(byteBuffer, m){
    var ret = {err : false};
    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MainQueueID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSubQueue = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSubQueue > P.PT_BUILD_QUEUE_MAX){return false;}
    m.SubQueue = [];
    for(let i = 0; i < sizeOfSubQueue; i++){
        let v = {};
        if(Decode_GMDT_EQUIPQUEUE(byteBuffer, v) == false){
            return false;
        }
        m.SubQueue.push(v);
    }

    let sizeOfReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReward > P.PT_EQUIP_BUILD_REWARD_MAX){return false;}
    m.Reward = [];
    for(let i = 0; i < sizeOfReward; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Reward.push(v);
    }

    m.ResetTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_EQUIPBUILD = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint8(m.MainQueueID, byteBuffer);
    if(!m.SubQueue){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SubQueue.length > P.PT_BUILD_QUEUE_MAX){return false;}
        NetData.NetWriteInt32(m.SubQueue.length, byteBuffer);
        for(let v of m.SubQueue){
            if(Encode_GMDT_EQUIPQUEUE(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.Reward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Reward.length > P.PT_EQUIP_BUILD_REWARD_MAX){return false;}
        NetData.NetWriteInt32(m.Reward.length, byteBuffer);
        for(let v of m.Reward){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteUint8(m.ResetTimes, byteBuffer);

    return true;
}

var Decode_GMDT_BUILD_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.Iron = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Copper = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Quartz = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ResLimit = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Boom = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BaseBuild = {};
    if(Decode_GMDT_BASEBUILD(byteBuffer, m.BaseBuild) == false){
        return false;
    }

    m.ResBuild = {};
    if(Decode_GMDT_RESBUILD(byteBuffer, m.ResBuild) == false){
        return false;
    }

    m.TechBuild = {};
    if(Decode_GMDT_TECHBUILD(byteBuffer, m.TechBuild) == false){
        return false;
    }

    m.EquipBuild = {};
    if(Decode_GMDT_EQUIPBUILD(byteBuffer, m.EquipBuild) == false){
        return false;
    }

    let sizeOfMainQueue = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMainQueue > P.PT_BUILD_QUEUE_MAX){return false;}
    m.MainQueue = [];
    for(let i = 0; i < sizeOfMainQueue; i++){
        let v = {};
        if(Decode_GMDT_QUEUE(byteBuffer, v) == false){
            return false;
        }
        m.MainQueue.push(v);
    }

    return true;
}

var Encode_GMDT_BUILD_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Iron, byteBuffer);
    NetData.NetWriteInt32(m.Copper, byteBuffer);
    NetData.NetWriteInt32(m.Quartz, byteBuffer);
    NetData.NetWriteInt32(m.ResLimit, byteBuffer);
    NetData.NetWriteInt32(m.Boom, byteBuffer);
    if(Encode_GMDT_BASEBUILD(m.BaseBuild, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_RESBUILD(m.ResBuild, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_TECHBUILD(m.TechBuild, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_EQUIPBUILD(m.EquipBuild, byteBuffer) == false){
        return false;
    }
    if(!m.MainQueue){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.MainQueue.length > P.PT_BUILD_QUEUE_MAX){return false;}
        NetData.NetWriteInt32(m.MainQueue.length, byteBuffer);
        for(let v of m.MainQueue){
            if(Encode_GMDT_QUEUE(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_NEW_TASK_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.TaskID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Var = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_NEW_TASK_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.TaskID, byteBuffer);
    NetData.NetWriteInt32(m.Var, byteBuffer);

    return true;
}

var Decode_GMDT_FLYING_CHESS_POS = function(byteBuffer, m){
    var ret = {err : false};
    m.Player = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Position = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_FLYING_CHESS_POS = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Player, byteBuffer);
    NetData.NetWriteUint8(m.Position, byteBuffer);

    return true;
}

var Decode_GMDT_FLYING_CHESS_GO_RESULT = function(byteBuffer, m){
    var ret = {err : false};
    m.ChessID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardRate = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiceValue = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BattleSucceed = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfPathReport = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfPathReport > P.PT_FLYING_CHESS_PLAYER_TOTAL_STEP){return false;}
    m.PathReport = [];
    for(let i = 0; i < sizeOfPathReport; i++){
        let v = {};
        if(Decode_GMDT_FLYING_CHESS_POS(byteBuffer, v) == false){
            return false;
        }
        m.PathReport.push(v);
    }

    return true;
}

var Encode_GMDT_FLYING_CHESS_GO_RESULT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ChessID, byteBuffer);
    NetData.NetWriteUint8(m.RewardRate, byteBuffer);
    NetData.NetWriteUint8(m.DiceValue, byteBuffer);
    NetData.NetWriteUint8(m.BattleSucceed, byteBuffer);
    if(!m.PathReport){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.PathReport.length > P.PT_FLYING_CHESS_PLAYER_TOTAL_STEP){return false;}
        NetData.NetWriteInt32(m.PathReport.length, byteBuffer);
        for(let v of m.PathReport){
            if(Encode_GMDT_FLYING_CHESS_POS(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_FLYING_CHESS_ENCOUNTER_RESULT = function(byteBuffer, m){
    var ret = {err : false};
    m.Integration = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Honor = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_FLYING_CHESS_ENCOUNTER_RESULT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Integration, byteBuffer);
    NetData.NetWriteUint32(m.Honor, byteBuffer);
    NetData.NetWriteUint32(m.Count, byteBuffer);

    return true;
}

var Decode_GMDT_FLYING_CHESS_MULTIPLE_GO_RESULT = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfChestID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfChestID > P.PT_FLYING_CHESS_PLAYER_TOTAL_STEP){return false;}
    m.ChestID = [];
    for(let i = 0; i < sizeOfChestID; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.ChestID.push(v);
    }

    let sizeOfLotteryID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfLotteryID > P.PT_FLYING_CHESS_PLAYER_TOTAL_STEP){return false;}
    m.LotteryID = [];
    for(let i = 0; i < sizeOfLotteryID; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.LotteryID.push(v);
    }

    return true;
}

var Encode_GMDT_FLYING_CHESS_MULTIPLE_GO_RESULT = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.ChestID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ChestID.length > P.PT_FLYING_CHESS_PLAYER_TOTAL_STEP){return false;}
        NetData.NetWriteInt32(m.ChestID.length, byteBuffer);
        for(let v of m.ChestID){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.LotteryID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.LotteryID.length > P.PT_FLYING_CHESS_PLAYER_TOTAL_STEP){return false;}
        NetData.NetWriteInt32(m.LotteryID.length, byteBuffer);
        for(let v of m.LotteryID){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMDT_FLYING_CHESS_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfPos = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfPos > P.PT_FLYING_CHESS_PLAYER_COUNT){return false;}
    m.Pos = [];
    for(let i = 0; i < sizeOfPos; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Pos.push(v);
    }

    let sizeOfExchangedReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfExchangedReward > P.PT_FLYING_CHESS_EXCHANGE_MAX){return false;}
    m.ExchangedReward = [];
    for(let i = 0; i < sizeOfExchangedReward; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.ExchangedReward.push(v);
    }

    m.DiceBuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiceCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Integration = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Honor = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RemoteDiceBuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RemoteDiceCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalDicedCount = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_FLYING_CHESS_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Pos){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Pos.length > P.PT_FLYING_CHESS_PLAYER_COUNT){return false;}
        NetData.NetWriteInt32(m.Pos.length, byteBuffer);
        for(let v of m.Pos){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.ExchangedReward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ExchangedReward.length > P.PT_FLYING_CHESS_EXCHANGE_MAX){return false;}
        NetData.NetWriteInt32(m.ExchangedReward.length, byteBuffer);
        for(let v of m.ExchangedReward){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteUint8(m.DiceBuyTimes, byteBuffer);
    NetData.NetWriteUint16(m.DiceCount, byteBuffer);
    NetData.NetWriteUint32(m.Integration, byteBuffer);
    NetData.NetWriteUint32(m.Honor, byteBuffer);
    NetData.NetWriteUint8(m.RemoteDiceBuyTimes, byteBuffer);
    NetData.NetWriteUint16(m.RemoteDiceCount, byteBuffer);
    NetData.NetWriteUint32(m.TotalDicedCount, byteBuffer);

    return true;
}

var Decode_GMDT_SHARE_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.FreeDiamondCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeGoldCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuliDaily = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuliRecommend = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuliMemberTestPlay = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_SHARE_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.FreeDiamondCount, byteBuffer);
    NetData.NetWriteInt32(m.FreeGoldCount, byteBuffer);
    NetData.NetWriteUint8(m.FuliDaily, byteBuffer);
    NetData.NetWriteUint8(m.FuliRecommend, byteBuffer);
    NetData.NetWriteUint8(m.FuliMemberTestPlay, byteBuffer);

    return true;
}

var Decode_GMDT_PLAYER = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Icon = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Avatar = NetData.NetReadString(byteBuffer, P.PT_MAX_AVATAR_LEN, ret);
    if(ret.err){return false;}

    m.VIPLevel = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.VIPExp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Exp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCZ = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ActiveCampType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CreateTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndlessRankID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Guest = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    m.StatFlags = {};
    if(Decode_GMDT_STAT_FLAGS(byteBuffer, m.StatFlags) == false){
        return false;
    }

    m.SpBag = {};
    if(Decode_GMDT_SPBAG(byteBuffer, m.SpBag) == false){
        return false;
    }

    m.Leader = {};
    if(Decode_GMDT_LEADER(byteBuffer, m.Leader) == false){
        return false;
    }

    m.MemberBag = {};
    if(Decode_GMDT_MEMBER_BAG(byteBuffer, m.MemberBag) == false){
        return false;
    }

    m.GuaZaiBag = {};
    if(Decode_GMDT_GUAZAI_BAG(byteBuffer, m.GuaZaiBag) == false){
        return false;
    }

    m.ChuZhanBag = {};
    if(Decode_GMDT_CHUZHAN_BAG(byteBuffer, m.ChuZhanBag) == false){
        return false;
    }

    m.ItemBag = {};
    if(Decode_GMDT_ITEM_BAG(byteBuffer, m.ItemBag) == false){
        return false;
    }

    m.GuildBag = {};
    if(Decode_GMDT_GUILD_BAG(byteBuffer, m.GuildBag) == false){
        return false;
    }

    m.ArenaBag = {};
    if(Decode_GMDT_ARENA_BAG(byteBuffer, m.ArenaBag) == false){
        return false;
    }

    m.ExtBag = {};
    if(Decode_GMDT_EXT_BAG(byteBuffer, m.ExtBag) == false){
        return false;
    }

    m.MysteryBag = {};
    if(Decode_GMDT_MYSTERY_BAG(byteBuffer, m.MysteryBag) == false){
        return false;
    }

    m.DressBag = {};
    if(Decode_GMDT_DRESS_BAG(byteBuffer, m.DressBag) == false){
        return false;
    }

    m.HonorBag = {};
    if(Decode_GMDT_HONOR_BAG(byteBuffer, m.HonorBag) == false){
        return false;
    }

    m.BuildBag = {};
    if(Decode_GMDT_BUILD_BAG(byteBuffer, m.BuildBag) == false){
        return false;
    }

    m.NewTaskBag = {};
    if(Decode_GMDT_NEW_TASK_BAG(byteBuffer, m.NewTaskBag) == false){
        return false;
    }

    m.FlyingChessBag = {};
    if(Decode_GMDT_FLYING_CHESS_BAG(byteBuffer, m.FlyingChessBag) == false){
        return false;
    }

    m.ShareBag = {};
    if(Decode_GMDT_SHARE_BAG(byteBuffer, m.ShareBag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_PLAYER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Icon, byteBuffer);
    if(NetData.NetWriteString(m.Avatar, P.PT_MAX_AVATAR_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.VIPLevel, byteBuffer);
    NetData.NetWriteUint32(m.VIPExp, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint32(m.Exp, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCZ, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteUint8(m.ActiveCampType, byteBuffer);
    NetData.NetWriteUint32(m.CreateTime, byteBuffer);
    NetData.NetWriteUint8(m.EndlessRankID, byteBuffer);
    NetData.NetWriteUint8(m.Guest, byteBuffer);
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_STAT_FLAGS(m.StatFlags, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_SPBAG(m.SpBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_LEADER(m.Leader, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_MEMBER_BAG(m.MemberBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_GUAZAI_BAG(m.GuaZaiBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_CHUZHAN_BAG(m.ChuZhanBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_BAG(m.ItemBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_GUILD_BAG(m.GuildBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ARENA_BAG(m.ArenaBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_EXT_BAG(m.ExtBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_MYSTERY_BAG(m.MysteryBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_DRESS_BAG(m.DressBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_HONOR_BAG(m.HonorBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_BUILD_BAG(m.BuildBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_NEW_TASK_BAG(m.NewTaskBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_FLYING_CHESS_BAG(m.FlyingChessBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_SHARE_BAG(m.ShareBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_PLAYER_LESSINFO = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Icon = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Vip = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Combat = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    m.OnlineStatus = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LogoutTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_PLAYER_LESSINFO = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Icon, byteBuffer);
    NetData.NetWriteUint8(m.Vip, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.Combat, byteBuffer);
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.OnlineStatus, byteBuffer);
    NetData.NetWriteUint32(m.LogoutTime, byteBuffer);

    return true;
}

var Decode_GMDT_NOTICE = function(byteBuffer, m){
    var ret = {err : false};
    m.NoticeID = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Order = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.StartTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Title = NetData.NetReadString(byteBuffer, P.PT_NOTICE_TITLE_LEN, ret);
    if(ret.err){return false;}

    m.Body = NetData.NetReadString(byteBuffer, P.PT_NOTICE_BODY_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_NOTICE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.NoticeID, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint32(m.Order, byteBuffer);
    NetData.NetWriteUint32(m.StartTime, byteBuffer);
    NetData.NetWriteUint32(m.EndTime, byteBuffer);
    if(NetData.NetWriteString(m.Title, P.PT_NOTICE_TITLE_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.Body, P.PT_NOTICE_BODY_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_CREATE_ROLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Icon = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Avatar = NetData.NetReadString(byteBuffer, P.PT_MAX_AVATAR_LEN, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CREATE_ROLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Icon, byteBuffer);
    if(NetData.NetWriteString(m.Avatar, P.PT_MAX_AVATAR_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_CREATE_ROLE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_CREATE_ROLE_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_CREATE_ROLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_CREATE_ROLE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CREATE_ROLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CREATE_ROLE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CREATE_ROLE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CREATE_ROLE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_ROLE_RENAME_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Avatar = NetData.NetReadString(byteBuffer, P.PT_MAX_AVATAR_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLE_RENAME_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.Avatar, P.PT_MAX_AVATAR_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ROLE_RENAME_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Avatar = NetData.NetReadString(byteBuffer, P.PT_MAX_AVATAR_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLE_RENAME_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.Avatar, P.PT_MAX_AVATAR_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_KICK_PLAYER_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Msg = NetData.NetReadString(byteBuffer, P.PT_SHORT_MSG_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_KICK_PLAYER_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(NetData.NetWriteString(m.Msg, P.PT_SHORT_MSG_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ENTERGAME_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ServerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Player = {};
    if(Decode_GMDT_PLAYER(byteBuffer, m.Player) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_ENTERGAME_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.ServerTime, byteBuffer);
    if(Encode_GMDT_PLAYER(m.Player, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_VIEW_PLAYER_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_VIEW_PLAYER_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);

    return true;
}

var Decode_GMDT_PLAYER_VIEW_DATA = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Icon = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuaZaiBag = {};
    if(Decode_GMDT_GUAZAI_BAG(byteBuffer, m.GuaZaiBag) == false){
        return false;
    }

    m.Member = {};
    if(Decode_GMDT_MEMBER(byteBuffer, m.Member) == false){
        return false;
    }

    m.LeaderEquipBag = {};
    if(Decode_GMDT_LEADEREQUIP_BAG(byteBuffer, m.LeaderEquipBag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_PLAYER_VIEW_DATA = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Icon, byteBuffer);
    if(Encode_GMDT_GUAZAI_BAG(m.GuaZaiBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_MEMBER(m.Member, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_LEADEREQUIP_BAG(m.LeaderEquipBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_VIEW_PLAYER_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.Player = {};
    if(Decode_GMDT_PLAYER_VIEW_DATA(byteBuffer, m.Player) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_VIEW_PLAYER_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_PLAYER_VIEW_DATA(m.Player, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_PLAYER_PROP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PLAYER_PROP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_PLAYER_PROP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_PLAYER_PROP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_PLAYER_PROP_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_PLAYER_PROP_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_COMBAT_POINT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_COMBAT_POINT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_COMBAT_POINT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_COMBAT_POINT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);

    return true;
}

var Decode_GMPKG_COMBAT_POINT_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_COMBAT_POINT_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);

    return true;
}

var Decode_GMPKG_PLAYER_INFO_PANEL_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PLAYER_INFO_PANEL_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);

    return true;
}

var Decode_GMDT_PLAYER_INFO_DATA = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.IconID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Avatar = NetData.NetReadString(byteBuffer, P.PT_MAX_AVATAR_LEN, ret);
    if(ret.err){return false;}

    m.VIPlevel = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChuZhanBag = {};
    if(Decode_GMDT_CHUZHAN_BAG(byteBuffer, m.ChuZhanBag) == false){
        return false;
    }

    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    m.EndlessRankID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndlessWeekMaxScore = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Boom = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberBag = {};
    if(Decode_GMDT_MEMBER_BAG(byteBuffer, m.MemberBag) == false){
        return false;
    }

    m.LeaderEquipBag = {};
    if(Decode_GMDT_LEADEREQUIP_BAG(byteBuffer, m.LeaderEquipBag) == false){
        return false;
    }

    m.RoleEquipBag = {};
    if(Decode_GMDT_ROLEEQUIP_BAG(byteBuffer, m.RoleEquipBag) == false){
        return false;
    }

    m.GuaZaiBag = {};
    if(Decode_GMDT_GUAZAI_BAG(byteBuffer, m.GuaZaiBag) == false){
        return false;
    }

    m.CommanderBag = {};
    if(Decode_GMDT_COMMANDER_BAG(byteBuffer, m.CommanderBag) == false){
        return false;
    }

    m.MysteryBag = {};
    if(Decode_GMDT_MYSTERY_BAG(byteBuffer, m.MysteryBag) == false){
        return false;
    }

    m.HonorRankID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_PLAYER_INFO_DATA = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.IconID, byteBuffer);
    if(NetData.NetWriteString(m.Avatar, P.PT_MAX_AVATAR_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.VIPlevel, byteBuffer);
    if(Encode_GMDT_CHUZHAN_BAG(m.ChuZhanBag, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.EndlessRankID, byteBuffer);
    NetData.NetWriteInt32(m.EndlessWeekMaxScore, byteBuffer);
    NetData.NetWriteInt32(m.Boom, byteBuffer);
    if(Encode_GMDT_MEMBER_BAG(m.MemberBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_LEADEREQUIP_BAG(m.LeaderEquipBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ROLEEQUIP_BAG(m.RoleEquipBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_GUAZAI_BAG(m.GuaZaiBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_COMMANDER_BAG(m.CommanderBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_MYSTERY_BAG(m.MysteryBag, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.HonorRankID, byteBuffer);

    return true;
}

var Decode_GMPKG_PLAYER_INFO_PANEL_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.Player = {};
    if(Decode_GMDT_PLAYER_INFO_DATA(byteBuffer, m.Player) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_PLAYER_INFO_PANEL_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_PLAYER_INFO_DATA(m.Player, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_NOTICE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NOTICE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_NOTICE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfNotice = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfNotice > P.PT_NOTICE_MAX_COUNT){return false;}
    m.Notice = [];
    for(let i = 0; i < sizeOfNotice; i++){
        let v = {};
        if(Decode_GMDT_NOTICE(byteBuffer, v) == false){
            return false;
        }
        m.Notice.push(v);
    }

    return true;
}

var Encode_GMPKG_NOTICE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Notice){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Notice.length > P.PT_NOTICE_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.Notice.length, byteBuffer);
        for(let v of m.Notice){
            if(Encode_GMDT_NOTICE(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_NOTICE_SCROLL_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NOTICE_SCROLL_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_NOTICE_SCROLL_ACK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfNotice = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfNotice > P.PT_NOTICE_MAX_COUNT){return false;}
    m.Notice = [];
    for(let i = 0; i < sizeOfNotice; i++){
        let v = {};
        if(Decode_GMDT_NOTICE(byteBuffer, v) == false){
            return false;
        }
        m.Notice.push(v);
    }

    return true;
}

var Encode_GMPKG_NOTICE_SCROLL_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Notice){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Notice.length > P.PT_NOTICE_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.Notice.length, byteBuffer);
        for(let v of m.Notice){
            if(Encode_GMDT_NOTICE(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_NOTICE_CHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NOTICE_CHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_NOTICE_SCROLL_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Msg = NetData.NetReadString(byteBuffer, P.PT_NOTICE_BODY_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NOTICE_SCROLL_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.Msg, P.PT_NOTICE_BODY_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_GMCMD_PARAM = function(byteBuffer, m){
    var ret = {err : false};
    m.Param = NetData.NetReadString(byteBuffer, P.PT_GMCMD_PARAM_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GMCMD_PARAM = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.Param, P.PT_GMCMD_PARAM_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GMCMD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfParams = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfParams > P.PT_GMCMD_PARAM_COUNT){return false;}
    m.Params = [];
    for(let i = 0; i < sizeOfParams; i++){
        let v = {};
        if(Decode_GMDT_GMCMD_PARAM(byteBuffer, v) == false){
            return false;
        }
        m.Params.push(v);
    }

    return true;
}

var Encode_GMPKG_GMCMD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Params){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Params.length > P.PT_GMCMD_PARAM_COUNT){return false;}
        NetData.NetWriteInt32(m.Params.length, byteBuffer);
        for(let v of m.Params){
            if(Encode_GMDT_GMCMD_PARAM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DIAMON_CZ_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.VIPLevelCur = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCZ = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DIAMON_CZ_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.VIPLevelCur, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCZ, byteBuffer);

    return true;
}

var Decode_GMPKG_DIAMOND_CHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.DiamondChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DIAMOND_CHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.DiamondChange, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);

    return true;
}

var Decode_GMPKG_VIP_CHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.VIPLevelCur = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberSkillPoint = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.PetTodayRollNoLimit = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeLimit = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_VIP_CHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.VIPLevelCur, byteBuffer);
    NetData.NetWriteUint16(m.MemberSkillPoint, byteBuffer);
    NetData.NetWriteUint16(m.PetTodayRollNoLimit, byteBuffer);
    NetData.NetWriteUint16(m.ChallengeLimit, byteBuffer);
    NetData.NetWriteUint16(m.FreeChallengeCount, byteBuffer);

    return true;
}

var Decode_GMPKG_VIPEXP_CHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.VIPLevelCur = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.VIPExp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_VIPEXP_CHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.VIPLevelCur, byteBuffer);
    NetData.NetWriteUint32(m.VIPExp, byteBuffer);

    return true;
}

var Decode_GMPKG_GOLD_CHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.GoldChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GOLD_CHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.GoldChange, byteBuffer);
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);

    return true;
}

var Decode_GMDT_LEVELUP = function(byteBuffer, m){
    var ret = {err : false};
    m.LevelOld = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LevelCur = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpReward = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpCur = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_LEVELUP = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.LevelOld, byteBuffer);
    NetData.NetWriteUint16(m.LevelCur, byteBuffer);
    NetData.NetWriteUint16(m.SpReward, byteBuffer);
    NetData.NetWriteUint16(m.SpCur, byteBuffer);
    NetData.NetWriteInt32(m.GoldReward, byteBuffer);
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);

    return true;
}

var Decode_GMPKG_EXP_CHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ExpChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ExpUpdate = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.LevelUpFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.LevelUpFlag == P.PT_CONST_1){
    m.LevelUp = {};
    if(Decode_GMDT_LEVELUP(byteBuffer, m.LevelUp) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_EXP_CHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ExpChange, byteBuffer);
    NetData.NetWriteInt32(m.ExpUpdate, byteBuffer);
    NetData.NetWriteUint8(m.LevelUpFlag, byteBuffer);
    if(m.LevelUpFlag == P.PT_CONST_1){
    if(Encode_GMDT_LEVELUP(m.LevelUp, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DAY_PASS_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Player = {};
    if(Decode_GMDT_PLAYER(byteBuffer, m.Player) == false){
        return false;
    }

    m.MemberSkillPoint = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpBuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LikeClicks = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BossTowerResetCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurServerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DAY_PASS_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_PLAYER(m.Player, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.MemberSkillPoint, byteBuffer);
    NetData.NetWriteUint8(m.SpBuyTimes, byteBuffer);
    NetData.NetWriteUint16(m.ChallengeCount, byteBuffer);
    NetData.NetWriteUint16(m.LikeClicks, byteBuffer);
    NetData.NetWriteUint16(m.FreeChallengeCount, byteBuffer);
    NetData.NetWriteUint8(m.BossTowerResetCount, byteBuffer);
    NetData.NetWriteUint32(m.CurServerTime, byteBuffer);

    return true;
}

var Decode_GMPKG_ITEM_COMPOSE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ComposeID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ITEM_COMPOSE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ComposeID, byteBuffer);

    return true;
}

var Decode_GMDT_ITEM_COMPOSE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_ITEM_COMPOSE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ITEM_COMPOSE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ITEM_COMPOSE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ITEM_COMPOSE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ITEM_COMPOSE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ITEM_SELL_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_BAG_ITEM_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_SLOT(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    return true;
}

var Encode_GMPKG_ITEM_SELL_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ITEM_SLOT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ITEM_SELL_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_ITEM_SELL_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ITEM_USE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Slot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Param1 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ITEM_USE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Slot, byteBuffer);
    NetData.NetWriteUint16(m.Count, byteBuffer);
    NetData.NetWriteInt32(m.Param1, byteBuffer);

    return true;
}

var Decode_GMPKG_ITEM_USE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfGetItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItem > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItem = [];
    for(let i = 0; i < sizeOfGetItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItem.push(v);
    }

    return true;
}

var Encode_GMPKG_ITEM_USE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.GetItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItem.length, byteBuffer);
        for(let v of m.GetItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ITEM_HECHENG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.SlotID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ITEM_HECHENG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.SlotID, byteBuffer);

    return true;
}

var Decode_GMPKG_ITEM_HECHENG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamod = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfHechengItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfHechengItem > P.PT_BAG_MAX_SIZE){return false;}
    m.HechengItem = [];
    for(let i = 0; i < sizeOfHechengItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.HechengItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_ITEM_HECHENG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamod, byteBuffer);
    if(!m.HechengItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.HechengItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.HechengItem.length, byteBuffer);
        for(let v of m.HechengItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ITEM_COMPOSE_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ComposeID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ITEM_COMPOSE_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ComposeID, byteBuffer);

    return true;
}

var Decode_GMDT_ITEM_COMPOSE_BUY_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfBuyItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBuyItem > P.PT_BAG_MAX_SIZE){return false;}
    m.BuyItem = [];
    for(let i = 0; i < sizeOfBuyItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.BuyItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_ITEM_COMPOSE_BUY_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    NetData.NetWriteUint16(m.BuyTimes, byteBuffer);
    if(!m.BuyItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BuyItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.BuyItem.length, byteBuffer);
        for(let v of m.BuyItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ITEM_COMPOSE_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ITEM_COMPOSE_BUY_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ITEM_COMPOSE_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ITEM_COMPOSE_BUY_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_LEADER_SEL_ICON_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.IconID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LEADER_SEL_ICON_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.IconID, byteBuffer);

    return true;
}

var Decode_GMPKG_LEADER_SEL_ICON_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.IconID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LEADER_SEL_ICON_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.IconID, byteBuffer);

    return true;
}

var Decode_GMPKG_ITEM_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_ITEM_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ITEM_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfGetItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItem > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItem = [];
    for(let i = 0; i < sizeOfGetItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItem.push(v);
    }

    return true;
}

var Encode_GMPKG_ITEM_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.GetItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItem.length, byteBuffer);
        for(let v of m.GetItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ITEM_REAL_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ITEM_REAL_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_REAL_ITEM = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GetTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Desc = NetData.NetReadString(byteBuffer, P.PT_CONST_100, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_REAL_ITEM = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);
    NetData.NetWriteUint32(m.GetTime, byteBuffer);
    if(NetData.NetWriteString(m.Desc, P.PT_CONST_100, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ITEM_REAL_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRealItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRealItem > P.PT_BAG_ITEM_MAX){return false;}
    m.RealItem = [];
    for(let i = 0; i < sizeOfRealItem; i++){
        let v = {};
        if(Decode_GMDT_REAL_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.RealItem.push(v);
    }

    return true;
}

var Encode_GMPKG_ITEM_REAL_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.RealItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RealItem.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.RealItem.length, byteBuffer);
        for(let v of m.RealItem){
            if(Encode_GMDT_REAL_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ITEM_LIFE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ITEM_LIFE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_LIFE_ITEM = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ExpireTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_LIFE_ITEM = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);
    NetData.NetWriteUint32(m.ExpireTime, byteBuffer);

    return true;
}

var Decode_GMPKG_ITEM_LIFE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfLifeItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfLifeItems > P.PT_BAG_ITEM_MAX){return false;}
    m.LifeItems = [];
    for(let i = 0; i < sizeOfLifeItems; i++){
        let v = {};
        if(Decode_GMDT_LIFE_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.LifeItems.push(v);
    }

    return true;
}

var Encode_GMPKG_ITEM_LIFE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.LifeItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.LifeItems.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.LifeItems.length, byteBuffer);
        for(let v of m.LifeItems){
            if(Encode_GMDT_LIFE_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ITEMBAG_UNLOCK_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ITEMBAG_UNLOCK_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_ITEMBAG_UNLOCK_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Unlock = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ITEMBAG_UNLOCK_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.Unlock, byteBuffer);

    return true;
}

var Decode_GMPKG_ITEM_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.HeChengFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ITEM_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.HeChengFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_CHUZHAN_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CHUZHAN_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_CHUZHAN_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.Level = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Combat1 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Combat2 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Combat3 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Combat4 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CHUZHAN_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.Combat1, byteBuffer);
    NetData.NetWriteInt32(m.Combat2, byteBuffer);
    NetData.NetWriteInt32(m.Combat3, byteBuffer);
    NetData.NetWriteInt32(m.Combat4, byteBuffer);

    return true;
}

var Decode_GMPKG_SAVE_CHUZHAN_CONF_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ChuZhan = {};
    if(Decode_GMDT_CHUZHAN_CONF(byteBuffer, m.ChuZhan) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_SAVE_CHUZHAN_CONF_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_CHUZHAN_CONF(m.ChuZhan, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_SAVE_CHUZHAN_CONF_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.Conf = {};
    if(Decode_GMDT_CHUZHAN_CONF(byteBuffer, m.Conf) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_SAVE_CHUZHAN_CONF_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CHUZHAN_CONF(m.Conf, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CHUZHAN_MIX_LEVELUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CHUZHAN_MIX_LEVELUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_CHUZHAN_MIX_LEVELUP_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Level = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_CHUZHAN_MIX_LEVELUP_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_CHUZHAN_MIX_LEVELUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_CHUZHAN_MIX_LEVELUP_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CHUZHAN_MIX_LEVELUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CHUZHAN_MIX_LEVELUP_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CHUZHAN_MIX_LEVEL_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.MixLevel = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CHUZHAN_MIX_LEVEL_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.MixLevel, byteBuffer);

    return true;
}

var Decode_GMPKG_LEADEREQUIP_LEVELUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LEADEREQUIP_LEVELUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Pos, byteBuffer);
    NetData.NetWriteUint8(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_LEADEREQUIP_LEVELUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.Equip = {};
    if(Decode_GMDT_LEADEREQUIP(byteBuffer, m.Equip) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_LEADEREQUIP_LEVELUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_LEADEREQUIP(m.Equip, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_LEADEREQUIP_QUALITYUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LEADEREQUIP_QUALITYUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Pos, byteBuffer);

    return true;
}

var Decode_GMPKG_LEADEREQUIP_QUALITYUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.Equip = {};
    if(Decode_GMDT_LEADEREQUIP(byteBuffer, m.Equip) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_LEADEREQUIP_QUALITYUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_LEADEREQUIP(m.Equip, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_MEMBER_ACTIVE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_ACTIVE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER_ACTIVE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    m.Member = {};
    if(Decode_GMDT_MEMBER(byteBuffer, m.Member) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_MEMBER_ACTIVE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_MEMBER(m.Member, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_ACTIVE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_MEMBER_ACTIVE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_MEMBER_ACTIVE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_MEMBER_ACTIVE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_MEMBER_LEVELUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_LEVELUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.ItemID, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER_LEVELUP_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Member = {};
    if(Decode_GMDT_MEMBER(byteBuffer, m.Member) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_MEMBER_LEVELUP_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_MEMBER(m.Member, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_LEVELUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_MEMBER_LEVELUP_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_MEMBER_LEVELUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_MEMBER_LEVELUP_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_MEMBER_QUALITYUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_QUALITYUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER_QUALITYUP_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Member = {};
    if(Decode_GMDT_MEMBER(byteBuffer, m.Member) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_MEMBER_QUALITYUP_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_MEMBER(m.Member, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_QUALITYUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_MEMBER_QUALITYUP_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_MEMBER_QUALITYUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_MEMBER_QUALITYUP_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_MEMBER_TECH_REFORM_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_TECH_REFORM_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint8(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_TECH_REFORM_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfAddProps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfAddProps > P.PT_MEMBER_TECH_COUNT){return false;}
    m.AddProps = [];
    for(let i = 0; i < sizeOfAddProps; i++){
        let v = {};
        if(Decode_GMDT_PROP(byteBuffer, v) == false){
            return false;
        }
        m.AddProps.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_TECH_REFORM_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.AddProps){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.AddProps.length > P.PT_MEMBER_TECH_COUNT){return false;}
        NetData.NetWriteInt32(m.AddProps.length, byteBuffer);
        for(let v of m.AddProps){
            if(Encode_GMDT_PROP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_MEMBER_TECH_REPLACE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_TECH_REPLACE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_TECH_REPLACE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfProps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfProps > P.PT_MEMBER_TECH_COUNT){return false;}
    m.Props = [];
    for(let i = 0; i < sizeOfProps; i++){
        let v = {};
        if(Decode_GMDT_PROP(byteBuffer, v) == false){
            return false;
        }
        m.Props.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_TECH_REPLACE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Props){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Props.length > P.PT_MEMBER_TECH_COUNT){return false;}
        NetData.NetWriteInt32(m.Props.length, byteBuffer);
        for(let v of m.Props){
            if(Encode_GMDT_PROP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_PUTON_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.BagSlot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.EquipPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_PUTON_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.BagSlot, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint8(m.EquipPos, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER_EQUIP_PUTON_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.OnEquip = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.OnEquip) == false){
        return false;
    }

    m.OffEquip = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.OffEquip) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_MEMBER_EQUIP_PUTON_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    if(Encode_GMDT_ITEM(m.OnEquip, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM(m.OffEquip, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_PUTON_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_MEMBER_EQUIP_PUTON_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_PUTON_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_MEMBER_EQUIP_PUTON_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_PUTOFF_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.EquipPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_PUTOFF_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint8(m.EquipPos, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER_EQUIP_PUTOFF_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.EquipPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.OffEquip = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.OffEquip) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_MEMBER_EQUIP_PUTOFF_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint8(m.EquipPos, byteBuffer);
    if(Encode_GMDT_ITEM(m.OffEquip, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_PUTOFF_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_MEMBER_EQUIP_PUTOFF_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_PUTOFF_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_MEMBER_EQUIP_PUTOFF_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_QUALITYUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.DstPos = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSrcPos = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSrcPos > P.PT_BAG_MAX_SIZE){return false;}
    m.SrcPos = [];
    for(let i = 0; i < sizeOfSrcPos; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.SrcPos.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_QUALITYUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.DstPos, byteBuffer);
    if(!m.SrcPos){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SrcPos.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.SrcPos.length, byteBuffer);
        for(let v of m.SrcPos){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMDT_MEMBER_EQUIP_QUALITYUP_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Equip = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.Equip) == false){
        return false;
    }

    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_MEMBER_EQUIP_QUALITYUP_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    if(Encode_GMDT_ITEM(m.Equip, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_QUALITYUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_MEMBER_EQUIP_QUALITYUP_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_QUALITYUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_MEMBER_EQUIP_QUALITYUP_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_SPLIT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfBagSlot = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBagSlot > P.PT_BAG_MAX_SIZE){return false;}
    m.BagSlot = [];
    for(let i = 0; i < sizeOfBagSlot; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.BagSlot.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_SPLIT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.BagSlot){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BagSlot.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.BagSlot.length, byteBuffer);
        for(let v of m.BagSlot){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_SPLIT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGetItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItems > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItems = [];
    for(let i = 0; i < sizeOfGetItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItems.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_SPLIT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    if(!m.GetItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItems.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItems.length, byteBuffer);
        for(let v of m.GetItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_LEVELUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.EquipPos = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_LEVELUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.EquipPos, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER_EQUIP_LEVELUP_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LevelAdd = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Equip = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.Equip) == false){
        return false;
    }

    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MEMBER_EQUIP_LEVELUP_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.LevelAdd, byteBuffer);
    if(Encode_GMDT_ITEM(m.Equip, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_LEVELUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_MEMBER_EQUIP_LEVELUP_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_LEVELUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_MEMBER_EQUIP_LEVELUP_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_TECH_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.TechLevel = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TechQuality = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TechStar = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_TECH_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint8(m.TechLevel, byteBuffer);
    NetData.NetWriteUint8(m.TechQuality, byteBuffer);
    NetData.NetWriteUint8(m.TechStar, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_STARUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.EquipPos = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.CostType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_STARUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.EquipPos, byteBuffer);
    NetData.NetWriteUint8(m.CostType, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_STARUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Equip = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.Equip) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Crit = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_STARUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    if(Encode_GMDT_ITEM(m.Equip, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    NetData.NetWriteUint8(m.Crit, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_REFINE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.EquipPos = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_REFINE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.EquipPos, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_REFINE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Equip = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.Equip) == false){
        return false;
    }

    m.Crit = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_REFINE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    if(Encode_GMDT_ITEM(m.Equip, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.Crit, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_REFINEUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.EquipPos = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_REFINEUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.EquipPos, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_REFINEUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Equip = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.Equip) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_REFINEUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    if(Encode_GMDT_ITEM(m.Equip, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_REBIRTH_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfBagSlot = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBagSlot > P.PT_BAG_MAX_SIZE){return false;}
    m.BagSlot = [];
    for(let i = 0; i < sizeOfBagSlot; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.BagSlot.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_REBIRTH_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.BagSlot){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BagSlot.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.BagSlot.length, byteBuffer);
        for(let v of m.BagSlot){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_REBIRTH_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGetItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItems > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItems = [];
    for(let i = 0; i < sizeOfGetItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItems.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_REBIRTH_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(!m.GetItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItems.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItems.length, byteBuffer);
        for(let v of m.GetItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BAG_ITEM_CHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Bag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.Items = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.Items) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BAG_ITEM_CHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Bag, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ITEM_CHANGE(m.Items, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_MEMBER_STAR_UP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_STAR_UP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_STAR_UP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.StarID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.StarLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_STAR_UP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.StarID, byteBuffer);
    NetData.NetWriteUint16(m.StarLevel, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_REBIRTH_SHOW_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_REBIRTH_SHOW_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_REBIRTH_SHOW_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ReturnGold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfReturnItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReturnItem > P.PT_BAG_MAX_SIZE){return false;}
    m.ReturnItem = [];
    for(let i = 0; i < sizeOfReturnItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ReturnItem.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_REBIRTH_SHOW_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.ReturnGold, byteBuffer);
    if(!m.ReturnItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ReturnItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ReturnItem.length, byteBuffer);
        for(let v of m.ReturnItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_MEMBER_REBIRTH_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_REBIRTH_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_REBIRTH_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGetItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItems > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItems = [];
    for(let i = 0; i < sizeOfGetItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItems.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    m.Member = {};
    if(Decode_GMDT_MEMBER(byteBuffer, m.Member) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_REBIRTH_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(!m.GetItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItems.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItems.length, byteBuffer);
        for(let v of m.GetItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_MEMBER(m.Member, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_SPECIAL_LEVELUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpecialID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_SPECIAL_LEVELUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.SpecialID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_SPECIAL_LEVELUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpecialID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpecialLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_SPECIAL_LEVELUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.SpecialID, byteBuffer);
    NetData.NetWriteUint16(m.SpecialLevel, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_SPECIAL_QUALITYUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpecialID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_SPECIAL_QUALITYUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.SpecialID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_SPECIAL_QUALITYUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpecialID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpecialQuality = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_SPECIAL_QUALITYUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.SpecialID, byteBuffer);
    NetData.NetWriteUint16(m.SpecialQuality, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_COMBAT_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_COMBAT_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_MEMBER_COMBAT = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Combat = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MEMBER_COMBAT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteInt32(m.Combat, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_COMBAT_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfMemberCombat = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMemberCombat > P.PT_MEMBER_MAX_COUNT){return false;}
    m.MemberCombat = [];
    for(let i = 0; i < sizeOfMemberCombat; i++){
        let v = {};
        if(Decode_GMDT_MEMBER_COMBAT(byteBuffer, v) == false){
            return false;
        }
        m.MemberCombat.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_COMBAT_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.MemberCombat){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.MemberCombat.length > P.PT_MEMBER_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.MemberCombat.length, byteBuffer);
        for(let v of m.MemberCombat){
            if(Encode_GMDT_MEMBER_COMBAT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_LEVELUP_YJ_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_LEVELUP_YJ_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_EQUIP_LEVELUP_YJ_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfEquips = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfEquips > P.PT_MEMBER_EQUIP_POSCOUNT){return false;}
    m.Equips = [];
    for(let i = 0; i < sizeOfEquips; i++){
        let v = {};
        if(Decode_GMDT_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Equips.push(v);
    }

    let sizeOfChangeEquip = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfChangeEquip > P.PT_MEMBER_EQUIP_POSCOUNT){return false;}
    m.ChangeEquip = [];
    for(let i = 0; i < sizeOfChangeEquip; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.ChangeEquip.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_EQUIP_LEVELUP_YJ_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    if(!m.Equips){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Equips.length > P.PT_MEMBER_EQUIP_POSCOUNT){return false;}
        NetData.NetWriteInt32(m.Equips.length, byteBuffer);
        for(let v of m.Equips){
            if(Encode_GMDT_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.ChangeEquip){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ChangeEquip.length > P.PT_MEMBER_EQUIP_POSCOUNT){return false;}
        NetData.NetWriteInt32(m.ChangeEquip.length, byteBuffer);
        for(let v of m.ChangeEquip){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_MEMBER_WEAPON_ACTIVE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.WeaponID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_WEAPON_ACTIVE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.WeaponID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_WEAPON_ACTIVE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Member = {};
    if(Decode_GMDT_MEMBER(byteBuffer, m.Member) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_WEAPON_ACTIVE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_MEMBER(m.Member, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_WEAPON_EQUIP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.WeaponID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Equiped = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_WEAPON_EQUIP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.WeaponID, byteBuffer);
    NetData.NetWriteUint8(m.Equiped, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_WEAPON_EQUIP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Member = {};
    if(Decode_GMDT_MEMBER(byteBuffer, m.Member) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_WEAPON_EQUIP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_MEMBER(m.Member, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_WEAPON_LEVELUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.WeaponID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_WEAPON_LEVELUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.WeaponID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_WEAPON_LEVELUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Member = {};
    if(Decode_GMDT_MEMBER(byteBuffer, m.Member) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_WEAPON_LEVELUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_MEMBER(m.Member, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_WEAPON_QUALITYUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.WeaponID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_WEAPON_QUALITYUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.WeaponID, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_WEAPON_QUALITYUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Member = {};
    if(Decode_GMDT_MEMBER(byteBuffer, m.Member) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MEMBER_WEAPON_QUALITYUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_MEMBER(m.Member, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MEMBER_PIECE_CRYSTAL_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.PieceCrystal = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_PIECE_CRYSTAL_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.PieceCrystal, byteBuffer);

    return true;
}

var Decode_GMPKG_CAMP_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMPKG_CAMP_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CampBag = {};
    if(Decode_GMDT_SUB_CAMP_BAG(byteBuffer, m.CampBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_CAMP_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    if(Encode_GMDT_SUB_CAMP_BAG(m.CampBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_CAMP_BEGIN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChapterID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CampaignID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_BEGIN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.ChapterID, byteBuffer);
    NetData.NetWriteUint16(m.CampaignID, byteBuffer);

    return true;
}

var Decode_GMDT_CAMP_BEGIN_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Seed = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChuZhanConf = {};
    if(Decode_GMDT_CHUZHAN_CONF(byteBuffer, m.ChuZhanConf) == false){
        return false;
    }

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_CAMP_BEGIN_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Seed, byteBuffer);
    if(Encode_GMDT_CHUZHAN_CONF(m.ChuZhanConf, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_CAMP_BEGIN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_CAMP_BEGIN_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CAMP_BEGIN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CAMP_BEGIN_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ANTICHEAT_RANDOM = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfBaoji = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBaoji > P.PT_BAG_MAX_SIZE){return false;}
    m.Baoji = [];
    for(let i = 0; i < sizeOfBaoji; i++){
        let v = NetData.NetReadUint32(byteBuffer, ret);
        if(ret.err){return false;}
        m.Baoji.push(v);
    }

    let sizeOfChuantou = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfChuantou > P.PT_BAG_MAX_SIZE){return false;}
    m.Chuantou = [];
    for(let i = 0; i < sizeOfChuantou; i++){
        let v = NetData.NetReadUint32(byteBuffer, ret);
        if(ret.err){return false;}
        m.Chuantou.push(v);
    }

    let sizeOfBaojiChuantou = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBaojiChuantou > P.PT_BAG_MAX_SIZE){return false;}
    m.BaojiChuantou = [];
    for(let i = 0; i < sizeOfBaojiChuantou; i++){
        let v = NetData.NetReadUint32(byteBuffer, ret);
        if(ret.err){return false;}
        m.BaojiChuantou.push(v);
    }

    return true;
}

var Encode_GMPKG_ANTICHEAT_RANDOM = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Baoji){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Baoji.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Baoji.length, byteBuffer);
        for(let v of m.Baoji){
            NetData.NetWriteUint32(v, byteBuffer);
        }
    }
    if(!m.Chuantou){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Chuantou.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Chuantou.length, byteBuffer);
        for(let v of m.Chuantou){
            NetData.NetWriteUint32(v, byteBuffer);
        }
    }
    if(!m.BaojiChuantou){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BaojiChuantou.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.BaojiChuantou.length, byteBuffer);
        for(let v of m.BaojiChuantou){
            NetData.NetWriteUint32(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_ANTICHEAT_COMMONSKILL_OUTPUT = function(byteBuffer, m){
    var ret = {err : false};
    m.DamageOutput = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RandomValue = {};
    if(Decode_GMPKG_ANTICHEAT_RANDOM(byteBuffer, m.RandomValue) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_ANTICHEAT_COMMONSKILL_OUTPUT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.DamageOutput, byteBuffer);
    if(Encode_GMPKG_ANTICHEAT_RANDOM(m.RandomValue, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ANTICHEAT_MANUALSKILL_HIT = function(byteBuffer, m){
    var ret = {err : false};
    m.HitTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Output = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SkillID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ANTICHEAT_MANUALSKILL_HIT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.HitTime, byteBuffer);
    NetData.NetWriteUint32(m.Output, byteBuffer);
    NetData.NetWriteUint16(m.SkillID, byteBuffer);

    return true;
}

var Decode_GMPKG_ANTICHEAT_MANUALSKILL_OUTPUT = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfHitVec = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfHitVec > P.PT_BAG_MAX_SIZE){return false;}
    m.HitVec = [];
    for(let i = 0; i < sizeOfHitVec; i++){
        let v = {};
        if(Decode_GMPKG_ANTICHEAT_MANUALSKILL_HIT(byteBuffer, v) == false){
            return false;
        }
        m.HitVec.push(v);
    }

    let sizeOfReleaseTime = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReleaseTime > P.PT_BAG_MAX_SIZE){return false;}
    m.ReleaseTime = [];
    for(let i = 0; i < sizeOfReleaseTime; i++){
        let v = NetData.NetReadUint32(byteBuffer, ret);
        if(ret.err){return false;}
        m.ReleaseTime.push(v);
    }

    return true;
}

var Encode_GMPKG_ANTICHEAT_MANUALSKILL_OUTPUT = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.HitVec){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.HitVec.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.HitVec.length, byteBuffer);
        for(let v of m.HitVec){
            if(Encode_GMPKG_ANTICHEAT_MANUALSKILL_HIT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.ReleaseTime){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ReleaseTime.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ReleaseTime.length, byteBuffer);
        for(let v of m.ReleaseTime){
            NetData.NetWriteUint32(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_ANTICHEAT_WEAPON_OUTPUT = function(byteBuffer, m){
    var ret = {err : false};
    m.StartTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CommonSkill = {};
    if(Decode_GMPKG_ANTICHEAT_COMMONSKILL_OUTPUT(byteBuffer, m.CommonSkill) == false){
        return false;
    }

    m.SubSkillOutput = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PetSkillOutput = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.OtherSkillOutput = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ANTICHEAT_WEAPON_OUTPUT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.StartTime, byteBuffer);
    NetData.NetWriteUint32(m.EndTime, byteBuffer);
    if(Encode_GMPKG_ANTICHEAT_COMMONSKILL_OUTPUT(m.CommonSkill, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.SubSkillOutput, byteBuffer);
    NetData.NetWriteUint32(m.PetSkillOutput, byteBuffer);
    NetData.NetWriteUint32(m.OtherSkillOutput, byteBuffer);

    return true;
}

var Decode_GMPKG_ANTICHEAT_WEAPONUP_EVENT = function(byteBuffer, m){
    var ret = {err : false};
    m.EatTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.WeaponUpType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ANTICHEAT_WEAPONUP_EVENT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.EatTime, byteBuffer);
    NetData.NetWriteUint8(m.WeaponUpType, byteBuffer);

    return true;
}

var Decode_GMPKG_ANTICHEAT_BUFF_EVENT = function(byteBuffer, m){
    var ret = {err : false};
    m.EatTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuffTarget = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuffID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuffLevel = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ANTICHEAT_BUFF_EVENT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.EatTime, byteBuffer);
    NetData.NetWriteUint8(m.BuffTarget, byteBuffer);
    NetData.NetWriteUint16(m.BuffID, byteBuffer);
    NetData.NetWriteUint8(m.BuffLevel, byteBuffer);

    return true;
}

var Decode_GMPKG_ANTICHEAT_HERODAMAGE_EVENT = function(byteBuffer, m){
    var ret = {err : false};
    m.HitTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Damage = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ANTICHEAT_HERODAMAGE_EVENT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.HitTime, byteBuffer);
    NetData.NetWriteUint32(m.Damage, byteBuffer);

    return true;
}

var Decode_GMPKG_ANTICHEAT_INIT = function(byteBuffer, m){
    var ret = {err : false};
    m.StartTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.IsCrazy = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CrazyStartTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.WeaponLevel = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfBuffOnHero = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBuffOnHero > P.PT_BAG_MAX_SIZE){return false;}
    m.BuffOnHero = [];
    for(let i = 0; i < sizeOfBuffOnHero; i++){
        let v = {};
        if(Decode_GMPKG_ANTICHEAT_BUFF_EVENT(byteBuffer, v) == false){
            return false;
        }
        m.BuffOnHero.push(v);
    }

    return true;
}

var Encode_GMPKG_ANTICHEAT_INIT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.StartTime, byteBuffer);
    NetData.NetWriteUint32(m.EndTime, byteBuffer);
    NetData.NetWriteUint8(m.IsCrazy, byteBuffer);
    NetData.NetWriteUint32(m.CrazyStartTime, byteBuffer);
    NetData.NetWriteUint8(m.WeaponLevel, byteBuffer);
    if(!m.BuffOnHero){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BuffOnHero.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.BuffOnHero.length, byteBuffer);
        for(let v of m.BuffOnHero){
            if(Encode_GMPKG_ANTICHEAT_BUFF_EVENT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ANTICHEAT_INFO = function(byteBuffer, m){
    var ret = {err : false};
    m.Key = NetData.NetReadString(byteBuffer, P.PT_MD5_LEN, ret);
    if(ret.err){return false;}

    m.InitInfo = {};
    if(Decode_GMPKG_ANTICHEAT_INIT(byteBuffer, m.InitInfo) == false){
        return false;
    }

    let sizeOfWeaponOutput = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfWeaponOutput > P.PT_BAG_MAX_SIZE){return false;}
    m.WeaponOutput = [];
    for(let i = 0; i < sizeOfWeaponOutput; i++){
        let v = {};
        if(Decode_GMPKG_ANTICHEAT_WEAPON_OUTPUT(byteBuffer, v) == false){
            return false;
        }
        m.WeaponOutput.push(v);
    }

    m.ManualSkillOutput = {};
    if(Decode_GMPKG_ANTICHEAT_MANUALSKILL_OUTPUT(byteBuffer, m.ManualSkillOutput) == false){
        return false;
    }

    let sizeOfWeaponUpEvent = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfWeaponUpEvent > P.PT_BAG_MAX_SIZE){return false;}
    m.WeaponUpEvent = [];
    for(let i = 0; i < sizeOfWeaponUpEvent; i++){
        let v = {};
        if(Decode_GMPKG_ANTICHEAT_WEAPONUP_EVENT(byteBuffer, v) == false){
            return false;
        }
        m.WeaponUpEvent.push(v);
    }

    let sizeOfBuffEvent = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBuffEvent > P.PT_BAG_MAX_SIZE){return false;}
    m.BuffEvent = [];
    for(let i = 0; i < sizeOfBuffEvent; i++){
        let v = {};
        if(Decode_GMPKG_ANTICHEAT_BUFF_EVENT(byteBuffer, v) == false){
            return false;
        }
        m.BuffEvent.push(v);
    }

    let sizeOfHeroDamageEvent = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfHeroDamageEvent > P.PT_BAG_MAX_SIZE){return false;}
    m.HeroDamageEvent = [];
    for(let i = 0; i < sizeOfHeroDamageEvent; i++){
        let v = {};
        if(Decode_GMPKG_ANTICHEAT_HERODAMAGE_EVENT(byteBuffer, v) == false){
            return false;
        }
        m.HeroDamageEvent.push(v);
    }

    return true;
}

var Encode_GMPKG_ANTICHEAT_INFO = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.Key, P.PT_MD5_LEN, byteBuffer) == false){
        return false;
    }
    if(Encode_GMPKG_ANTICHEAT_INIT(m.InitInfo, byteBuffer) == false){
        return false;
    }
    if(!m.WeaponOutput){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.WeaponOutput.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.WeaponOutput.length, byteBuffer);
        for(let v of m.WeaponOutput){
            if(Encode_GMPKG_ANTICHEAT_WEAPON_OUTPUT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMPKG_ANTICHEAT_MANUALSKILL_OUTPUT(m.ManualSkillOutput, byteBuffer) == false){
        return false;
    }
    if(!m.WeaponUpEvent){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.WeaponUpEvent.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.WeaponUpEvent.length, byteBuffer);
        for(let v of m.WeaponUpEvent){
            if(Encode_GMPKG_ANTICHEAT_WEAPONUP_EVENT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.BuffEvent){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BuffEvent.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.BuffEvent.length, byteBuffer);
        for(let v of m.BuffEvent){
            if(Encode_GMPKG_ANTICHEAT_BUFF_EVENT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.HeroDamageEvent){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.HeroDamageEvent.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.HeroDamageEvent.length, byteBuffer);
        for(let v of m.HeroDamageEvent){
            if(Encode_GMPKG_ANTICHEAT_HERODAMAGE_EVENT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_CAMP_WIN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.CrystalPer = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_CAMP_WIN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.CrystalPer, byteBuffer);

    return true;
}

var Decode_GMPKG_CAMP_RESULT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.Result == P.PT_CAMP_RESULT_WIN){
    m.Win = {};
    if(Decode_GMDT_CAMP_WIN_REQ(byteBuffer, m.Win) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CAMP_RESULT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Result, byteBuffer);
    if(m.Result == P.PT_CAMP_RESULT_WIN){
    if(Encode_GMDT_CAMP_WIN_REQ(m.Win, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CAMP_REVIVE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ReveiveTime = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Free = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_REVIVE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ReveiveTime, byteBuffer);
    NetData.NetWriteUint8(m.Free, byteBuffer);

    return true;
}

var Decode_GMDT_CAMP_REVIVE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.DieCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_CAMP_REVIVE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.DieCount, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);

    return true;
}

var Decode_GMPKG_CAMP_REVIVE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ReveiveTime = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_CAMP_REVIVE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CAMP_REVIVE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ReveiveTime, byteBuffer);
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CAMP_REVIVE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMDT_CAMP_FIRST_REWARD = function(byteBuffer, m){
    var ret = {err : false};
    m.RewardExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardGold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardDiamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    return true;
}

var Encode_GMDT_CAMP_FIRST_REWARD = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.RewardExp, byteBuffer);
    NetData.NetWriteInt32(m.RewardGold, byteBuffer);
    NetData.NetWriteInt32(m.RewardDiamond, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_MEMBER_EXP_REWARD = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MEMBER_EXP_REWARD = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteInt32(m.RewardExp, byteBuffer);
    NetData.NetWriteUint16(m.MemberLevel, byteBuffer);
    NetData.NetWriteInt32(m.MemberExp, byteBuffer);

    return true;
}

var Decode_GMDT_CAMP_RESULT_WIN = function(byteBuffer, m){
    var ret = {err : false};
    m.Star = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Score = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardGold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardDiamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.FirstRewardFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.FirstRewardFlag == P.PT_CONST_1){
    m.FirstReward = {};
    if(Decode_GMDT_CAMP_FIRST_REWARD(byteBuffer, m.FirstReward) == false){
        return false;
    }
    }

    let sizeOfDrawItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDrawItem > P.PT_BAG_MAX_SIZE){return false;}
    m.DrawItem = [];
    for(let i = 0; i < sizeOfDrawItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.DrawItem.push(v);
    }

    let sizeOfMemberExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMemberExp > P.PT_MEMBER_MAX_COUNT){return false;}
    m.MemberExp = [];
    for(let i = 0; i < sizeOfMemberExp; i++){
        let v = {};
        if(Decode_GMDT_MEMBER_EXP_REWARD(byteBuffer, v) == false){
            return false;
        }
        m.MemberExp.push(v);
    }

    return true;
}

var Encode_GMDT_CAMP_RESULT_WIN = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Star, byteBuffer);
    NetData.NetWriteInt32(m.Score, byteBuffer);
    NetData.NetWriteInt32(m.RewardExp, byteBuffer);
    NetData.NetWriteInt32(m.RewardGold, byteBuffer);
    NetData.NetWriteInt32(m.RewardDiamond, byteBuffer);
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.FirstRewardFlag, byteBuffer);
    if(m.FirstRewardFlag == P.PT_CONST_1){
    if(Encode_GMDT_CAMP_FIRST_REWARD(m.FirstReward, byteBuffer) == false){
        return false;
    }
    }
    if(!m.DrawItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.DrawItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.DrawItem.length, byteBuffer);
        for(let v of m.DrawItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.MemberExp){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.MemberExp.length > P.PT_MEMBER_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.MemberExp.length, byteBuffer);
        for(let v of m.MemberExp){
            if(Encode_GMDT_MEMBER_EXP_REWARD(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_CAMP_RESULT_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChapterID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CampaignID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.Result == P.PT_CAMP_RESULT_WIN){
    m.Win = {};
    if(Decode_GMDT_CAMP_RESULT_WIN(byteBuffer, m.Win) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMDT_CAMP_RESULT_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Result, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.ChapterID, byteBuffer);
    NetData.NetWriteUint16(m.CampaignID, byteBuffer);
    if(m.Result == P.PT_CAMP_RESULT_WIN){
    if(Encode_GMDT_CAMP_RESULT_WIN(m.Win, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CAMP_RESULT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_CAMP_RESULT_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CAMP_RESULT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CAMP_RESULT_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CAMP_DRAWREWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_DRAWREWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Pos, byteBuffer);

    return true;
}

var Decode_GMDT_CAMP_DRAWREWARD_OK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    m.DrawCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_CAMP_DRAWREWARD_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.DrawCount, byteBuffer);
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);

    return true;
}

var Decode_GMPKG_CAMP_DRAWREWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_CAMP_DRAWREWARD_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CAMP_DRAWREWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CAMP_DRAWREWARD_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CAMP_QUIT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Flag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_QUIT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Flag, byteBuffer);

    return true;
}

var Decode_GMPKG_CAMP_QUIT_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_QUIT_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_CAMP_CAMPACTIVE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ChapterType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChapterID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CampaignID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Campaign = {};
    if(Decode_GMDT_CAMPAIGN(byteBuffer, m.Campaign) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_CAMP_CAMPACTIVE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ChapterType, byteBuffer);
    NetData.NetWriteUint8(m.ChapterID, byteBuffer);
    NetData.NetWriteUint16(m.CampaignID, byteBuffer);
    if(Encode_GMDT_CAMPAIGN(m.Campaign, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_CAMP_CHAPTERACTIVE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ChapterType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Chapter = {};
    if(Decode_GMDT_CHAPTER(byteBuffer, m.Chapter) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_CAMP_CHAPTERACTIVE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ChapterType, byteBuffer);
    if(Encode_GMDT_CHAPTER(m.Chapter, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_CAMP_BUYCOUNT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.CampType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChapterID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CampaignID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_BUYCOUNT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampType, byteBuffer);
    NetData.NetWriteUint8(m.ChapterID, byteBuffer);
    NetData.NetWriteUint16(m.CampaignID, byteBuffer);

    return true;
}

var Decode_GMDT_CAMP_BUYCOUNT_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChapterID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CampaignID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Campaign = {};
    if(Decode_GMDT_CAMPAIGN(byteBuffer, m.Campaign) == false){
        return false;
    }

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_CAMP_BUYCOUNT_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampType, byteBuffer);
    NetData.NetWriteUint8(m.ChapterID, byteBuffer);
    NetData.NetWriteUint16(m.CampaignID, byteBuffer);
    if(Encode_GMDT_CAMPAIGN(m.Campaign, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);

    return true;
}

var Decode_GMPKG_CAMP_BUYCOUNT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_CAMP_BUYCOUNT_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CAMP_BUYCOUNT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CAMP_BUYCOUNT_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CAMP_CHAPTER_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.CampType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChapterID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Pos = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_CHAPTER_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampType, byteBuffer);
    NetData.NetWriteUint8(m.ChapterID, byteBuffer);
    NetData.NetWriteUint16(m.Pos, byteBuffer);

    return true;
}

var Decode_GMDT_CAMP_CHAPTER_REWARD_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChapterID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Pos = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMDT_CAMP_CHAPTER_REWARD_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampType, byteBuffer);
    NetData.NetWriteUint8(m.ChapterID, byteBuffer);
    NetData.NetWriteUint16(m.Pos, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_CAMP_CHAPTER_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_CAMP_CHAPTER_REWARD_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CAMP_CHAPTER_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CAMP_CHAPTER_REWARD_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CAMP_SAODANG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChapterID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CampaignID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_SAODANG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.ChapterID, byteBuffer);
    NetData.NetWriteUint16(m.CampaignID, byteBuffer);

    return true;
}

var Decode_GMDT_CAMP_SAODANG_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChapterID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CampaignID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardGold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardDiamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Sp = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.PlayerLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    let sizeOfDrawItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDrawItem > P.PT_BAG_MAX_SIZE){return false;}
    m.DrawItem = [];
    for(let i = 0; i < sizeOfDrawItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.DrawItem.push(v);
    }

    let sizeOfMemberExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMemberExp > P.PT_MEMBER_MAX_COUNT){return false;}
    m.MemberExp = [];
    for(let i = 0; i < sizeOfMemberExp; i++){
        let v = {};
        if(Decode_GMDT_MEMBER_EXP_REWARD(byteBuffer, v) == false){
            return false;
        }
        m.MemberExp.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_CAMP_SAODANG_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampType, byteBuffer);
    NetData.NetWriteUint8(m.ChapterID, byteBuffer);
    NetData.NetWriteUint16(m.CampaignID, byteBuffer);
    NetData.NetWriteInt32(m.RewardExp, byteBuffer);
    NetData.NetWriteInt32(m.RewardGold, byteBuffer);
    NetData.NetWriteInt32(m.RewardDiamond, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    NetData.NetWriteUint16(m.Sp, byteBuffer);
    NetData.NetWriteUint16(m.PlayerLevel, byteBuffer);
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.DrawItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.DrawItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.DrawItem.length, byteBuffer);
        for(let v of m.DrawItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.MemberExp){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.MemberExp.length > P.PT_MEMBER_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.MemberExp.length, byteBuffer);
        for(let v of m.MemberExp){
            if(Encode_GMDT_MEMBER_EXP_REWARD(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_CAMP_SAODANG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_CAMP_SAODANG_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CAMP_SAODANG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CAMP_SAODANG_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CAMP_SAODANG_DRAW_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_SAODANG_DRAW_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Pos, byteBuffer);

    return true;
}

var Decode_GMDT_CAMP_SAODANG_DRAW_OK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    m.DrawCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_CAMP_SAODANG_DRAW_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.DrawCount, byteBuffer);
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_CAMP_SAODANG_DRAW_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_CAMP_SAODANG_DRAW_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_CAMP_SAODANG_DRAW_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_CAMP_SAODANG_DRAW_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_CAMP_FREEDRAW_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CAMP_FREEDRAW_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_CAMP_FREEDRAW_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_CAMP_FREEDRAW_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ENDLESS_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_ENDLESS_STATUS = function(byteBuffer, m){
    var ret = {err : false};
    m.StatusID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StatusCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ENDLESS_STATUS = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatusID, byteBuffer);
    NetData.NetWriteUint16(m.StatusCount, byteBuffer);

    return true;
}

var Decode_GMDT_ENDLESS_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.PowerPoint = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RankID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ScoreCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastPowerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.HistoryMaxScore = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.WeekMaxScore = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.BlessStatusID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyPowerPointCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfStatus = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfStatus > P.PT_ENDLESS_STATUS_MAX_COUNT){return false;}
    m.Status = [];
    for(let i = 0; i < sizeOfStatus; i++){
        let v = {};
        if(Decode_GMDT_ENDLESS_STATUS(byteBuffer, v) == false){
            return false;
        }
        m.Status.push(v);
    }

    m.TodayGold = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TodayChargeReward = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ENDLESS_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.PowerPoint, byteBuffer);
    NetData.NetWriteUint8(m.RankID, byteBuffer);
    NetData.NetWriteUint8(m.ScoreCount, byteBuffer);
    NetData.NetWriteUint32(m.LastPowerTime, byteBuffer);
    NetData.NetWriteUint64(m.HistoryMaxScore, byteBuffer);
    NetData.NetWriteUint64(m.WeekMaxScore, byteBuffer);
    NetData.NetWriteUint8(m.BlessStatusID, byteBuffer);
    NetData.NetWriteUint8(m.BuyPowerPointCount, byteBuffer);
    if(!m.Status){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Status.length > P.PT_ENDLESS_STATUS_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.Status.length, byteBuffer);
        for(let v of m.Status){
            if(Encode_GMDT_ENDLESS_STATUS(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint32(m.TodayGold, byteBuffer);
    NetData.NetWriteUint8(m.TodayChargeReward, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.Bag = {};
    if(Decode_GMDT_ENDLESS_BAG(byteBuffer, m.Bag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_ENDLESS_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_ENDLESS_BAG(m.Bag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ENDLESS_RANKUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_RANKUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_ENDLESS_RANKUP_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.RankID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ScoreCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ENDLESS_RANKUP_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.RankID, byteBuffer);
    NetData.NetWriteUint8(m.ScoreCount, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_RANKUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ENDLESS_RANKUP_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ENDLESS_RANKUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ENDLESS_RANKUP_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ENDLESS_POWERPOINT_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.PowerPoint = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastPowerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_POWERPOINT_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.PowerPoint, byteBuffer);
    NetData.NetWriteUint32(m.LastPowerTime, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_STARTBATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_STARTBATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_ENDLESS_STARTBATTLE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Seed = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChuZhanConf = {};
    if(Decode_GMDT_CHUZHAN_CONF(byteBuffer, m.ChuZhanConf) == false){
        return false;
    }

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    m.BagBlessStatusID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfBagStatus = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBagStatus > P.PT_ENDLESS_STATUS_MAX_COUNT){return false;}
    m.BagStatus = [];
    for(let i = 0; i < sizeOfBagStatus; i++){
        let v = {};
        if(Decode_GMDT_ENDLESS_STATUS(byteBuffer, v) == false){
            return false;
        }
        m.BagStatus.push(v);
    }

    m.BattleBlessStatusID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfBattleStatus = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBattleStatus > P.PT_ENDLESS_STATUS_MAX_COUNT){return false;}
    m.BattleStatus = [];
    for(let i = 0; i < sizeOfBattleStatus; i++){
        let v = {};
        if(Decode_GMDT_ENDLESS_STATUS(byteBuffer, v) == false){
            return false;
        }
        m.BattleStatus.push(v);
    }

    return true;
}

var Encode_GMDT_ENDLESS_STARTBATTLE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Seed, byteBuffer);
    if(Encode_GMDT_CHUZHAN_CONF(m.ChuZhanConf, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.BagBlessStatusID, byteBuffer);
    if(!m.BagStatus){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BagStatus.length > P.PT_ENDLESS_STATUS_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.BagStatus.length, byteBuffer);
        for(let v of m.BagStatus){
            if(Encode_GMDT_ENDLESS_STATUS(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.BattleBlessStatusID, byteBuffer);
    if(!m.BattleStatus){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BattleStatus.length > P.PT_ENDLESS_STATUS_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.BattleStatus.length, byteBuffer);
        for(let v of m.BattleStatus){
            if(Encode_GMDT_ENDLESS_STATUS(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ENDLESS_STARTBATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ENDLESS_STARTBATTLE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ENDLESS_STARTBATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ENDLESS_STARTBATTLE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ENDLESS_ENDBATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Score = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.BigRound = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PackageCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Token = NetData.NetReadString(byteBuffer, P.PT_TOKEN_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_ENDBATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.Score, byteBuffer);
    NetData.NetWriteInt32(m.BigRound, byteBuffer);
    NetData.NetWriteUint8(m.PackageCount, byteBuffer);
    if(NetData.NetWriteString(m.Token, P.PT_TOKEN_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_ENDLESS_ENDBATTLE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Score = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.ScoreCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.PowerPoint = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastPowerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    m.HistoryMaxScore = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.WeekMaxScore = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ENDLESS_ENDBATTLE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.Score, byteBuffer);
    NetData.NetWriteUint8(m.ScoreCount, byteBuffer);
    NetData.NetWriteUint8(m.PowerPoint, byteBuffer);
    NetData.NetWriteUint32(m.LastPowerTime, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint64(m.HistoryMaxScore, byteBuffer);
    NetData.NetWriteUint64(m.WeekMaxScore, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_ENDBATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MaxScore = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ENDLESS_ENDBATTLE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ENDLESS_ENDBATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.MaxScore, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ENDLESS_ENDBATTLE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ENDLESS_QUITBATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_QUITBATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_QUITBATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_QUITBATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_BUYBLESS_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Free = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_BUYBLESS_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Free, byteBuffer);

    return true;
}

var Decode_GMDT_ENDLESS_BUYBLESS_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.StatusID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ENDLESS_BUYBLESS_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatusID, byteBuffer);
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_BUYBLESS_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ENDLESS_BUYBLESS_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ENDLESS_BUYBLESS_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ENDLESS_BUYBLESS_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ENDLESS_BUYSTATUS_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.StatusID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Free = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_BUYSTATUS_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatusID, byteBuffer);
    NetData.NetWriteUint8(m.Free, byteBuffer);

    return true;
}

var Decode_GMDT_ENDLESS_BUYSTATUS_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Status = {};
    if(Decode_GMDT_ENDLESS_STATUS(byteBuffer, m.Status) == false){
        return false;
    }

    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ENDLESS_BUYSTATUS_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_ENDLESS_STATUS(m.Status, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_BUYSTATUS_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ENDLESS_BUYSTATUS_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ENDLESS_BUYSTATUS_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ENDLESS_BUYSTATUS_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ENDLESS_USESTATUS_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.StatusID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_USESTATUS_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatusID, byteBuffer);

    return true;
}

var Decode_GMDT_ENDLESS_USESTATUS_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.BagStatus = {};
    if(Decode_GMDT_ENDLESS_STATUS(byteBuffer, m.BagStatus) == false){
        return false;
    }

    m.BattleStatus = {};
    if(Decode_GMDT_ENDLESS_STATUS(byteBuffer, m.BattleStatus) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_ENDLESS_USESTATUS_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_ENDLESS_STATUS(m.BagStatus, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ENDLESS_STATUS(m.BattleStatus, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ENDLESS_USESTATUS_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ENDLESS_USESTATUS_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ENDLESS_USESTATUS_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ENDLESS_USESTATUS_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ENDLESS_STATUS_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Status = {};
    if(Decode_GMDT_ENDLESS_STATUS(byteBuffer, m.Status) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_ENDLESS_STATUS_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_ENDLESS_STATUS(m.Status, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ENDLESS_BUY_POWERPOINT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_BUY_POWERPOINT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_ENDLESS_BUY_POWERPOINT_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.PowerPoint = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastPowerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ENDLESS_BUY_POWERPOINT_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    NetData.NetWriteUint8(m.BuyCount, byteBuffer);
    NetData.NetWriteUint8(m.PowerPoint, byteBuffer);
    NetData.NetWriteUint32(m.LastPowerTime, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_BUY_POWERPOINT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ENDLESS_BUY_POWERPOINT_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ENDLESS_BUY_POWERPOINT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ENDLESS_BUY_POWERPOINT_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ENDLESS_GETGOLD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.GetGold = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_GETGOLD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.GetGold, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_GETGOLD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TodayGold = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_GETGOLD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteUint32(m.TodayGold, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_CHARGE_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ENDLESS_CHARGE_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_ENDLESS_CHARGE_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TodayChargeReward = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfShowItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfShowItem > P.PT_BAG_MAX_SIZE){return false;}
    m.ShowItem = [];
    for(let i = 0; i < sizeOfShowItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ShowItem.push(v);
    }

    return true;
}

var Encode_GMPKG_ENDLESS_CHARGE_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.TodayChargeReward, byteBuffer);
    if(!m.ShowItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ShowItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ShowItem.length, byteBuffer);
        for(let v of m.ShowItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_CAMP = function(byteBuffer, m){
    var ret = {err : false};
    m.Explored = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CampaignID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardPackage = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BOSSTOWER_CAMP = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Explored, byteBuffer);
    NetData.NetWriteUint16(m.CampaignID, byteBuffer);
    NetData.NetWriteUint16(m.RewardPackage, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.MaxFloor = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MaxCampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurFloor = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.UnlockFloor = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ResetCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurCampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurBuffPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshBuffCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfCamps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfCamps > P.PT_BOSSTOWER_CAMP_COUNT){return false;}
    m.Camps = [];
    for(let i = 0; i < sizeOfCamps; i++){
        let v = {};
        if(Decode_GMDT_BOSSTOWER_CAMP(byteBuffer, v) == false){
            return false;
        }
        m.Camps.push(v);
    }

    return true;
}

var Encode_GMDT_BOSSTOWER_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MaxFloor, byteBuffer);
    NetData.NetWriteUint8(m.MaxCampPos, byteBuffer);
    NetData.NetWriteUint16(m.CurFloor, byteBuffer);
    NetData.NetWriteUint16(m.UnlockFloor, byteBuffer);
    NetData.NetWriteUint8(m.ResetCount, byteBuffer);
    NetData.NetWriteUint8(m.CurCampPos, byteBuffer);
    NetData.NetWriteUint8(m.CurBuffPos, byteBuffer);
    NetData.NetWriteUint8(m.RefreshBuffCount, byteBuffer);
    NetData.NetWriteInt32(m.BuyTimes, byteBuffer);
    if(!m.Camps){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Camps.length > P.PT_BOSSTOWER_CAMP_COUNT){return false;}
        NetData.NetWriteInt32(m.Camps.length, byteBuffer);
        for(let v of m.Camps){
            if(Encode_GMDT_BOSSTOWER_CAMP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.BossTowerBag = {};
    if(Decode_GMDT_BOSSTOWER_BAG(byteBuffer, m.BossTowerBag) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BOSSTOWER_BAG(m.BossTowerBag, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_EXPLORE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.CampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_EXPLORE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampPos, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_EXPLORE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Explored = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshBuffCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurBuffPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BOSSTOWER_EXPLORE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampPos, byteBuffer);
    NetData.NetWriteUint8(m.Explored, byteBuffer);
    NetData.NetWriteUint8(m.RefreshBuffCount, byteBuffer);
    NetData.NetWriteUint8(m.CurBuffPos, byteBuffer);

    return true;
}

var Decode_GMPKG_BOSSTOWER_EXPLORE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_BOSSTOWER_EXPLORE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_EXPLORE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BOSSTOWER_EXPLORE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_REFRESH_BUFF_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_REFRESH_BUFF_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_REFRESH_BUFF_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CurBuffPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshBuffCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BOSSTOWER_REFRESH_BUFF_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CurBuffPos, byteBuffer);
    NetData.NetWriteUint8(m.RefreshBuffCount, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);

    return true;
}

var Decode_GMPKG_BOSSTOWER_REFRESH_BUFF_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_BOSSTOWER_REFRESH_BUFF_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_REFRESH_BUFF_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BOSSTOWER_REFRESH_BUFF_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_START_BATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.CampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_START_BATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampPos, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_START_BATTLE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Seed = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChuZhanConf = {};
    if(Decode_GMDT_CHUZHAN_CONF(byteBuffer, m.ChuZhanConf) == false){
        return false;
    }

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_BOSSTOWER_START_BATTLE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampPos, byteBuffer);
    NetData.NetWriteUint32(m.Seed, byteBuffer);
    if(Encode_GMDT_CHUZHAN_CONF(m.ChuZhanConf, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_START_BATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_BOSSTOWER_START_BATTLE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_START_BATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BOSSTOWER_START_BATTLE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_ENDBATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_ENDBATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Result, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_ENDBATTLE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurBuffPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshBuffCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_BOSSTOWER_ENDBATTLE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampPos, byteBuffer);
    NetData.NetWriteUint8(m.CurBuffPos, byteBuffer);
    NetData.NetWriteUint8(m.RefreshBuffCount, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_ENDBATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_BOSSTOWER_ENDBATTLE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_ENDBATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BOSSTOWER_ENDBATTLE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_MTBOX_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Num = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_MTBOX_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_BOSSTOWER_MTBOX_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_MTBOX_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.BuyTimes, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_QUITBATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Flag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_QUITBATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Flag, byteBuffer);

    return true;
}

var Decode_GMPKG_BOSSTOWER_QUITBATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_QUITBATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_BOSSTOWER_SAODANG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_SAODANG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_SAODANG_CAMP = function(byteBuffer, m){
    var ret = {err : false};
    m.CampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    return true;
}

var Encode_GMDT_BOSSTOWER_SAODANG_CAMP = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampPos, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_BOSSTOWER_SAODANG_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurBuffPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshBuffCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfCamps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfCamps > P.PT_BOSSTOWER_CAMP_COUNT){return false;}
    m.Camps = [];
    for(let i = 0; i < sizeOfCamps; i++){
        let v = {};
        if(Decode_GMDT_BOSSTOWER_SAODANG_CAMP(byteBuffer, v) == false){
            return false;
        }
        m.Camps.push(v);
    }

    return true;
}

var Encode_GMDT_BOSSTOWER_SAODANG_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampPos, byteBuffer);
    NetData.NetWriteUint8(m.CurBuffPos, byteBuffer);
    NetData.NetWriteUint8(m.RefreshBuffCount, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Camps){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Camps.length > P.PT_BOSSTOWER_CAMP_COUNT){return false;}
        NetData.NetWriteInt32(m.Camps.length, byteBuffer);
        for(let v of m.Camps){
            if(Encode_GMDT_BOSSTOWER_SAODANG_CAMP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_SAODANG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_BOSSTOWER_SAODANG_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_SAODANG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BOSSTOWER_SAODANG_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_GETREWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.CampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_GETREWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampPos, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_GETREWARD_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurBuffPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshBuffCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_BOSSTOWER_GETREWARD_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampPos, byteBuffer);
    NetData.NetWriteUint8(m.CurBuffPos, byteBuffer);
    NetData.NetWriteUint8(m.RefreshBuffCount, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_GETREWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_BOSSTOWER_GETREWARD_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_GETREWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BOSSTOWER_GETREWARD_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_NEXTFLOOR_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_NEXTFLOOR_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_NEXTFLOOR_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CurFloor = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurCampPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurBuffPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshBuffCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfCamps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfCamps > P.PT_BOSSTOWER_CAMP_COUNT){return false;}
    m.Camps = [];
    for(let i = 0; i < sizeOfCamps; i++){
        let v = {};
        if(Decode_GMDT_BOSSTOWER_CAMP(byteBuffer, v) == false){
            return false;
        }
        m.Camps.push(v);
    }

    return true;
}

var Encode_GMDT_BOSSTOWER_NEXTFLOOR_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.CurFloor, byteBuffer);
    NetData.NetWriteUint8(m.CurCampPos, byteBuffer);
    NetData.NetWriteUint8(m.CurBuffPos, byteBuffer);
    NetData.NetWriteUint8(m.RefreshBuffCount, byteBuffer);
    if(!m.Camps){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Camps.length > P.PT_BOSSTOWER_CAMP_COUNT){return false;}
        NetData.NetWriteInt32(m.Camps.length, byteBuffer);
        for(let v of m.Camps){
            if(Encode_GMDT_BOSSTOWER_CAMP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_NEXTFLOOR_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_BOSSTOWER_NEXTFLOOR_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_NEXTFLOOR_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BOSSTOWER_NEXTFLOOR_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_RESET_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_RESET_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_RESET_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.ResetCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BossTowerBag = {};
    if(Decode_GMDT_BOSSTOWER_BAG(byteBuffer, m.BossTowerBag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_BOSSTOWER_RESET_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ResetCount, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(Encode_GMDT_BOSSTOWER_BAG(m.BossTowerBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_RESET_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_BOSSTOWER_RESET_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_RESET_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BOSSTOWER_RESET_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_UNLOCK_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BOSSTOWER_UNLOCK_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_BOSSTOWER_UNLOCK_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.UnlockFloor = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_BOSSTOWER_UNLOCK_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.UnlockFloor, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BOSSTOWER_UNLOCK_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_BOSSTOWER_UNLOCK_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_BOSSTOWER_UNLOCK_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_BOSSTOWER_UNLOCK_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMDT_NUCLEAR_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.FreeCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.TopScore1 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TopScore2 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardActiveStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardDraw = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardDraw > P.PT_NUCLEAR_REWARD_FLAG_SIZE){return false;}
    m.RewardDraw = [];
    for(let i = 0; i < sizeOfRewardDraw; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.RewardDraw.push(v);
    }

    return true;
}

var Encode_GMDT_NUCLEAR_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.FreeCount, byteBuffer);
    NetData.NetWriteUint16(m.BuyCount, byteBuffer);
    NetData.NetWriteInt32(m.TopScore1, byteBuffer);
    NetData.NetWriteInt32(m.TopScore2, byteBuffer);
    NetData.NetWriteUint8(m.RewardActiveStep, byteBuffer);
    if(!m.RewardDraw){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardDraw.length > P.PT_NUCLEAR_REWARD_FLAG_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardDraw.length, byteBuffer);
        for(let v of m.RewardDraw){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_NUCLEAR_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NUCLEAR_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_NUCLEAR_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.Bag = {};
    if(Decode_GMDT_NUCLEAR_BAG(byteBuffer, m.Bag) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_NUCLEAR_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_NUCLEAR_BAG(m.Bag, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_NUCLEAR_START_BATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NUCLEAR_START_BATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_NUCLEAR_START_BATTLE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Seed = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.VipLevel = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_NUCLEAR_START_BATTLE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Seed, byteBuffer);
    NetData.NetWriteUint8(m.VipLevel, byteBuffer);
    NetData.NetWriteUint8(m.FreeCount, byteBuffer);
    NetData.NetWriteUint16(m.BuyCount, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_NUCLEAR_START_BATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_NUCLEAR_START_BATTLE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_NUCLEAR_START_BATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_NUCLEAR_START_BATTLE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_NUCLEAR_END_BATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Score = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NUCLEAR_END_BATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Score, byteBuffer);

    return true;
}

var Decode_GMDT_NUCLEAR_END_BATTLE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Score = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TopScore1 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TopScore2 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardActiveStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_NUCLEAR_END_BATTLE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Score, byteBuffer);
    NetData.NetWriteInt32(m.TopScore1, byteBuffer);
    NetData.NetWriteInt32(m.TopScore2, byteBuffer);
    NetData.NetWriteUint8(m.RewardActiveStep, byteBuffer);

    return true;
}

var Decode_GMPKG_NUCLEAR_END_BATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_NUCLEAR_END_BATTLE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_NUCLEAR_END_BATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_NUCLEAR_END_BATTLE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_NUCLEAR_QUIT_BATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Flag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NUCLEAR_QUIT_BATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Flag, byteBuffer);

    return true;
}

var Decode_GMPKG_NUCLEAR_QUIT_BATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NUCLEAR_QUIT_BATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_NUCLEAR_GET_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfID > P.PT_CONST_100){return false;}
    m.ID = [];
    for(let i = 0; i < sizeOfID; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.ID.push(v);
    }

    return true;
}

var Encode_GMPKG_NUCLEAR_GET_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.ID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ID.length > P.PT_CONST_100){return false;}
        NetData.NetWriteInt32(m.ID.length, byteBuffer);
        for(let v of m.ID){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMDT_NUCLEAR_GET_REWARD_OK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfID > P.PT_CONST_100){return false;}
    m.ID = [];
    for(let i = 0; i < sizeOfID; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.ID.push(v);
    }

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_NUCLEAR_GET_REWARD_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.ID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ID.length > P.PT_CONST_100){return false;}
        NetData.NetWriteInt32(m.ID.length, byteBuffer);
        for(let v of m.ID){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_NUCLEAR_GET_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_NUCLEAR_GET_REWARD_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_NUCLEAR_GET_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_NUCLEAR_GET_REWARD_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMDT_NUCLEAR_RANK_MEMBER = function(byteBuffer, m){
    var ret = {err : false};
    m.IconID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Avatar = NetData.NetReadString(byteBuffer, P.PT_MAX_AVATAR_LEN, ret);
    if(ret.err){return false;}

    m.Ranking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalScore = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_NUCLEAR_RANK_MEMBER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.IconID, byteBuffer);
    if(NetData.NetWriteString(m.Avatar, P.PT_MAX_AVATAR_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.Ranking, byteBuffer);
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    NetData.NetWriteInt32(m.TotalScore, byteBuffer);
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_NUCLEAR_GET_RANKLIST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NUCLEAR_GET_RANKLIST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_NUCLEAR_GET_RANKLIST_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfMembers = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMembers > P.PT_NUCLEAR_RANK_LIST_SIZE){return false;}
    m.Members = [];
    for(let i = 0; i < sizeOfMembers; i++){
        let v = {};
        if(Decode_GMDT_NUCLEAR_RANK_MEMBER(byteBuffer, v) == false){
            return false;
        }
        m.Members.push(v);
    }

    return true;
}

var Encode_GMPKG_NUCLEAR_GET_RANKLIST_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Members){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Members.length > P.PT_NUCLEAR_RANK_LIST_SIZE){return false;}
        NetData.NetWriteInt32(m.Members.length, byteBuffer);
        for(let v of m.Members){
            if(Encode_GMDT_NUCLEAR_RANK_MEMBER(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_NUCLEAR_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NUCLEAR_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMDT_RCG_TIMECARD = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ExpireTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DrawToday = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_RCG_TIMECARD = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint32(m.ExpireTime, byteBuffer);
    NetData.NetWriteUint8(m.DrawToday, byteBuffer);

    return true;
}

var Decode_GMDT_RCG_HUIKUI = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DrawStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ActiveStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Progress = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_RCG_HUIKUI = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteUint8(m.DrawStep, byteBuffer);
    NetData.NetWriteUint8(m.ActiveStep, byteBuffer);
    NetData.NetWriteInt32(m.Progress, byteBuffer);

    return true;
}

var Decode_GMDT_RCG_HUIKUI_BAG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfHuiKui = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfHuiKui > P.PT_RCG_HUIKUI_COUNT){return false;}
    m.HuiKui = [];
    for(let i = 0; i < sizeOfHuiKui; i++){
        let v = {};
        if(Decode_GMDT_RCG_HUIKUI(byteBuffer, v) == false){
            return false;
        }
        m.HuiKui.push(v);
    }

    return true;
}

var Encode_GMDT_RCG_HUIKUI_BAG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.HuiKui){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.HuiKui.length > P.PT_RCG_HUIKUI_COUNT){return false;}
        NetData.NetWriteInt32(m.HuiKui.length, byteBuffer);
        for(let v of m.HuiKui){
            if(Encode_GMDT_RCG_HUIKUI(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_RCG_RECORD = function(byteBuffer, m){
    var ret = {err : false};
    m.RechargeID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_RCG_RECORD = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.RechargeID, byteBuffer);
    NetData.NetWriteUint8(m.Count, byteBuffer);

    return true;
}

var Decode_GMDT_RCG_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.DiamondCZ = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.VipExp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfTimeCard = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfTimeCard > P.PT_RCG_TIMECARD_COUNT){return false;}
    m.TimeCard = [];
    for(let i = 0; i < sizeOfTimeCard; i++){
        let v = {};
        if(Decode_GMDT_RCG_TIMECARD(byteBuffer, v) == false){
            return false;
        }
        m.TimeCard.push(v);
    }

    m.HuiKuiBag = {};
    if(Decode_GMDT_RCG_HUIKUI_BAG(byteBuffer, m.HuiKuiBag) == false){
        return false;
    }

    m.VipPackage = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRcgRecord = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRcgRecord > P.PT_RCG_RECORD_MAX){return false;}
    m.RcgRecord = [];
    for(let i = 0; i < sizeOfRcgRecord; i++){
        let v = {};
        if(Decode_GMDT_RCG_RECORD(byteBuffer, v) == false){
            return false;
        }
        m.RcgRecord.push(v);
    }

    m.RcgVoucher = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeDiamondCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_RCG_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.DiamondCZ, byteBuffer);
    NetData.NetWriteUint32(m.VipExp, byteBuffer);
    if(!m.TimeCard){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.TimeCard.length > P.PT_RCG_TIMECARD_COUNT){return false;}
        NetData.NetWriteInt32(m.TimeCard.length, byteBuffer);
        for(let v of m.TimeCard){
            if(Encode_GMDT_RCG_TIMECARD(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_RCG_HUIKUI_BAG(m.HuiKuiBag, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.VipPackage, byteBuffer);
    if(!m.RcgRecord){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RcgRecord.length > P.PT_RCG_RECORD_MAX){return false;}
        NetData.NetWriteInt32(m.RcgRecord.length, byteBuffer);
        for(let v of m.RcgRecord){
            if(Encode_GMDT_RCG_RECORD(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.RcgVoucher, byteBuffer);
    NetData.NetWriteInt32(m.FreeDiamondCount, byteBuffer);

    return true;
}

var Decode_GMPKG_RCG_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_RCG_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_RCG_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.Bag = {};
    if(Decode_GMDT_RCG_BAG(byteBuffer, m.Bag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_RCG_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_RCG_BAG(m.Bag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_RCG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.RechargeID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_RCG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.RechargeID, byteBuffer);

    return true;
}

var Decode_GMDT_RCG_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Vip = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.VipExp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCZ = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfTimeCard = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfTimeCard > P.PT_RCG_TIMECARD_COUNT){return false;}
    m.TimeCard = [];
    for(let i = 0; i < sizeOfTimeCard; i++){
        let v = {};
        if(Decode_GMDT_RCG_TIMECARD(byteBuffer, v) == false){
            return false;
        }
        m.TimeCard.push(v);
    }

    m.RcgRecord = {};
    if(Decode_GMDT_RCG_RECORD(byteBuffer, m.RcgRecord) == false){
        return false;
    }

    m.RcgVoucher = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_RCG_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Vip, byteBuffer);
    NetData.NetWriteUint32(m.VipExp, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCZ, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(!m.TimeCard){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.TimeCard.length > P.PT_RCG_TIMECARD_COUNT){return false;}
        NetData.NetWriteInt32(m.TimeCard.length, byteBuffer);
        for(let v of m.TimeCard){
            if(Encode_GMDT_RCG_TIMECARD(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_RCG_RECORD(m.RcgRecord, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.RcgVoucher, byteBuffer);

    return true;
}

var Decode_GMPKG_RCG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_RCG_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_RCG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_RCG_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_RCG_TIMECARD_GETREWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.RechargeID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_RCG_TIMECARD_GETREWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.RechargeID, byteBuffer);

    return true;
}

var Decode_GMDT_RCG_TIMECARD_GETREWARD_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TimeCard = {};
    if(Decode_GMDT_RCG_TIMECARD(byteBuffer, m.TimeCard) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_RCG_TIMECARD_GETREWARD_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(Encode_GMDT_RCG_TIMECARD(m.TimeCard, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_RCG_TIMECARD_GETREWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_RCG_TIMECARD_GETREWARD_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_RCG_TIMECARD_GETREWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_RCG_TIMECARD_GETREWARD_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_RCG_HUIKUI_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_RCG_HUIKUI_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_RCG_HUIKUI_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.HuiKuiBag = {};
    if(Decode_GMDT_RCG_HUIKUI_BAG(byteBuffer, m.HuiKuiBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_RCG_HUIKUI_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_RCG_HUIKUI_BAG(m.HuiKuiBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_RCG_HUIKUI_GETREWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.HuiKuiID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_RCG_HUIKUI_GETREWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.HuiKuiID, byteBuffer);

    return true;
}

var Decode_GMDT_RCG_HUIKUI_GETREWARD_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.HuiKui = {};
    if(Decode_GMDT_RCG_HUIKUI(byteBuffer, m.HuiKui) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMDT_RCG_HUIKUI_GETREWARD_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_RCG_HUIKUI(m.HuiKui, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_RCG_HUIKUI_GETREWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_RCG_HUIKUI_GETREWARD_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_RCG_HUIKUI_GETREWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_RCG_HUIKUI_GETREWARD_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_RCG_HUIKUI_NEW_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.HuiKui = {};
    if(Decode_GMDT_RCG_HUIKUI(byteBuffer, m.HuiKui) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_RCG_HUIKUI_NEW_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_RCG_HUIKUI(m.HuiKui, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_VIP_PACKAGE_GET_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Vip = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_VIP_PACKAGE_GET_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Vip, byteBuffer);

    return true;
}

var Decode_GMDT_VIP_PACKAGE_GET_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.VipPackage = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_VIP_PACKAGE_GET_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.VipPackage, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_VIP_PACKAGE_GET_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_VIP_PACKAGE_GET_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_VIP_PACKAGE_GET_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_VIP_PACKAGE_GET_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_VOUCHER_EXCHANGE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_VOUCHER_EXCHANGE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_VOUCHER_EXCHANGE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Voucher = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_VOUCHER_EXCHANGE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    NetData.NetWriteInt32(m.Voucher, byteBuffer);

    return true;
}

var Decode_GMPKG_GET_FREE_DIAMOND_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GET_FREE_DIAMOND_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GET_FREE_DIAMOND_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeDiamondCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GET_FREE_DIAMOND_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    NetData.NetWriteInt32(m.FreeDiamondCount, byteBuffer);

    return true;
}

var Decode_GMPKG_GET_FREE_GOLD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GET_FREE_GOLD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GET_FREE_GOLD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeGoldCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GET_FREE_GOLD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.FreeGoldCount, byteBuffer);

    return true;
}

var Decode_GMPKG_SP_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Free = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_SP_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Free, byteBuffer);

    return true;
}

var Decode_GMDT_SP_BUY_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Sp = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpBack = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_SP_BUY_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Sp, byteBuffer);
    NetData.NetWriteUint16(m.SpBack, byteBuffer);
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    NetData.NetWriteUint8(m.FreeCount, byteBuffer);

    return true;
}

var Decode_GMPKG_SP_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_SP_BUY_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_SP_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_SP_BUY_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_SP_GETBACK_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_SP_GETBACK_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMDT_SP_GETBACK_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Sp = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpBack = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpGet = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_SP_GETBACK_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Sp, byteBuffer);
    NetData.NetWriteUint16(m.SpBack, byteBuffer);
    NetData.NetWriteUint16(m.SpGet, byteBuffer);

    return true;
}

var Decode_GMPKG_SP_GETBACK_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_SP_GETBACK_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_SP_GETBACK_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_SP_GETBACK_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_SP_CHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Sp = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SpBack = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastRecoverTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_SP_CHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Sp, byteBuffer);
    NetData.NetWriteUint16(m.SpBack, byteBuffer);
    NetData.NetWriteUint32(m.LastRecoverTime, byteBuffer);

    return true;
}

var Decode_GMPKG_STORE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_STORE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMPKG_STORE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Expires = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshTimes = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_STORE_ITEM_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_STORE_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    m.ServerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_STORE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint32(m.Expires, byteBuffer);
    NetData.NetWriteUint16(m.RefreshTimes, byteBuffer);
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_STORE_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_STORE_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint32(m.ServerTime, byteBuffer);

    return true;
}

var Decode_GMPKG_STORE_REFRESH_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_STORE_REFRESH_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMPKG_STORE_REFRESH_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshTimes = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_STORE_ITEM_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_STORE_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    return true;
}

var Encode_GMPKG_STORE_REFRESH_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint16(m.RefreshTimes, byteBuffer);
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_STORE_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_STORE_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_STORE_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Expires = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_STORE_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint32(m.Expires, byteBuffer);

    return true;
}

var Decode_GMPKG_STORE_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.State = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_STORE_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.State, byteBuffer);

    return true;
}

var Decode_GMPKG_STORE_BUY_NUM_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Index = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_STORE_BUY_NUM_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint16(m.Index, byteBuffer);
    NetData.NetWriteInt32(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_STORE_BUY_NUM_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Index = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_STORE_BUY_NUM_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint16(m.Index, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_STORE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_STORE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_TREASURE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_TREASURE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_TREASURE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldMiningTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGoldMiningRewards = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGoldMiningRewards > P.PT_TREASURE_MAX){return false;}
    m.GoldMiningRewards = [];
    for(let i = 0; i < sizeOfGoldMiningRewards; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.GoldMiningRewards.push(v);
    }

    m.ServerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.OneFreeCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldFreeCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_TREASURE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.GoldMiningTimes, byteBuffer);
    if(!m.GoldMiningRewards){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GoldMiningRewards.length > P.PT_TREASURE_MAX){return false;}
        NetData.NetWriteInt32(m.GoldMiningRewards.length, byteBuffer);
        for(let v of m.GoldMiningRewards){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteUint32(m.ServerTime, byteBuffer);
    NetData.NetWriteInt32(m.OneFreeCount, byteBuffer);
    NetData.NetWriteInt32(m.GoldFreeCount, byteBuffer);

    return true;
}

var Decode_GMPKG_TREASURE_MINING_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Free = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_TREASURE_MINING_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.Free, byteBuffer);

    return true;
}

var Decode_GMPKG_TREASURE_MINING_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.MiningTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ServerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    m.Crit = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.OneFreeCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldFreeCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_TREASURE_MINING_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.MiningTimes, byteBuffer);
    NetData.NetWriteUint32(m.ServerTime, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.Crit, byteBuffer);
    NetData.NetWriteInt32(m.OneFreeCount, byteBuffer);
    NetData.NetWriteInt32(m.GoldFreeCount, byteBuffer);

    return true;
}

var Decode_GMPKG_TREASURE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_TREASURE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_TREASURE_GOLDMINING_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Times = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_TREASURE_GOLDMINING_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Times, byteBuffer);

    return true;
}

var Decode_GMPKG_TREASURE_GOLDMINING_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGoldMiningRewards = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGoldMiningRewards > P.PT_TREASURE_MAX){return false;}
    m.GoldMiningRewards = [];
    for(let i = 0; i < sizeOfGoldMiningRewards; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.GoldMiningRewards.push(v);
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_TREASURE_GOLDMINING_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.GoldMiningRewards){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GoldMiningRewards.length > P.PT_TREASURE_MAX){return false;}
        NetData.NetWriteInt32(m.GoldMiningRewards.length, byteBuffer);
        for(let v of m.GoldMiningRewards){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);

    return true;
}

var Decode_GMPKG_LOTTERY_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LOTTERY_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_LOTTERY_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PackageID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Chance = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Active = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Expires = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ServerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LOTTERY_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.PackageID, byteBuffer);
    NetData.NetWriteUint8(m.Chance, byteBuffer);
    NetData.NetWriteInt32(m.Active, byteBuffer);
    NetData.NetWriteUint32(m.Expires, byteBuffer);
    NetData.NetWriteUint32(m.ServerTime, byteBuffer);

    return true;
}

var Decode_GMPKG_LOTTERY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LOTTERY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_LOTTERY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Chance = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_LOTTERY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Chance, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_LOTTERY_TEN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LOTTERY_TEN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_LOTTERY_TEN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Chance = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_LOTTERY_TEN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Chance, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_LOTTERY_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_LOTTERY_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_SIGNIN_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_SIGNIN_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_SIGNIN_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PassDay = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Plan = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSigninState = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSigninState > P.PT_SIGNIN_MAX){return false;}
    m.SigninState = [];
    for(let i = 0; i < sizeOfSigninState; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.SigninState.push(v);
    }

    return true;
}

var Encode_GMPKG_SIGNIN_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.PassDay, byteBuffer);
    NetData.NetWriteUint16(m.Plan, byteBuffer);
    if(!m.SigninState){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SigninState.length > P.PT_SIGNIN_MAX){return false;}
        NetData.NetWriteInt32(m.SigninState.length, byteBuffer);
        for(let v of m.SigninState){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_SIGNIN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_SIGNIN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Day, byteBuffer);

    return true;
}

var Decode_GMPKG_SIGNIN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PassDay = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Plan = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSigninState = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSigninState > P.PT_SIGNIN_MAX){return false;}
    m.SigninState = [];
    for(let i = 0; i < sizeOfSigninState; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.SigninState.push(v);
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_SIGNIN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.PassDay, byteBuffer);
    NetData.NetWriteUint16(m.Plan, byteBuffer);
    if(!m.SigninState){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SigninState.length > P.PT_SIGNIN_MAX){return false;}
        NetData.NetWriteInt32(m.SigninState.length, byteBuffer);
        for(let v of m.SigninState){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_SIGNIN_HEAP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_SIGNIN_HEAP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Day, byteBuffer);

    return true;
}

var Decode_GMPKG_SIGNIN_HEAP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSigninState = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSigninState > P.PT_SIGNIN_MAX){return false;}
    m.SigninState = [];
    for(let i = 0; i < sizeOfSigninState; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.SigninState.push(v);
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_SIGNIN_HEAP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.SigninState){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SigninState.length > P.PT_SIGNIN_MAX){return false;}
        NetData.NetWriteInt32(m.SigninState.length, byteBuffer);
        for(let v of m.SigninState){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_SIGNIN_NTF_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_SIGNIN_NTF_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_SIGNIN_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_SIGNIN_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMDT_MAIL_ATTACHMENT = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MAIL_ATTACHMENT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteInt32(m.ItemCount, byteBuffer);

    return true;
}

var Decode_GMDT_MAIL_LESSINFO = function(byteBuffer, m){
    var ret = {err : false};
    m.MailID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Subject = NetData.NetReadString(byteBuffer, P.PT_MAX_MAIL_SUBJECT, ret);
    if(ret.err){return false;}

    m.IconID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SenderID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.Time = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.HasAttachment = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ReadStatus = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MAIL_LESSINFO = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.MailID, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    if(NetData.NetWriteString(m.Subject, P.PT_MAX_MAIL_SUBJECT, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.IconID, byteBuffer);
    NetData.NetWriteUint64(m.SenderID, byteBuffer);
    NetData.NetWriteUint32(m.Time, byteBuffer);
    NetData.NetWriteUint8(m.HasAttachment, byteBuffer);
    NetData.NetWriteUint8(m.ReadStatus, byteBuffer);

    return true;
}

var Decode_GMDT_MAIL = function(byteBuffer, m){
    var ret = {err : false};
    m.MailID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Subject = NetData.NetReadString(byteBuffer, P.PT_MAX_MAIL_SUBJECT, ret);
    if(ret.err){return false;}

    m.IconID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SenderID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.Content = NetData.NetReadString(byteBuffer, P.PT_MAX_MAIL_CONTENT, ret);
    if(ret.err){return false;}

    m.Time = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfAttachments = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfAttachments > P.PT_MAX_MAIL_ATTACHMENT){return false;}
    m.Attachments = [];
    for(let i = 0; i < sizeOfAttachments; i++){
        let v = {};
        if(Decode_GMDT_MAIL_ATTACHMENT(byteBuffer, v) == false){
            return false;
        }
        m.Attachments.push(v);
    }

    m.ReadStatus = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MAIL = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.MailID, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    if(NetData.NetWriteString(m.Subject, P.PT_MAX_MAIL_SUBJECT, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.IconID, byteBuffer);
    NetData.NetWriteUint64(m.SenderID, byteBuffer);
    if(NetData.NetWriteString(m.Content, P.PT_MAX_MAIL_CONTENT, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.Time, byteBuffer);
    if(!m.Attachments){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Attachments.length > P.PT_MAX_MAIL_ATTACHMENT){return false;}
        NetData.NetWriteInt32(m.Attachments.length, byteBuffer);
        for(let v of m.Attachments){
            if(Encode_GMDT_MAIL_ATTACHMENT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.ReadStatus, byteBuffer);

    return true;
}

var Decode_GMPKG_MAIL_GET_LIST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MAIL_GET_LIST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_MAIL_GET_LIST_ACK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfMailList = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMailList > P.PT_MAIL_LIST_MAX){return false;}
    m.MailList = [];
    for(let i = 0; i < sizeOfMailList; i++){
        let v = {};
        if(Decode_GMDT_MAIL(byteBuffer, v) == false){
            return false;
        }
        m.MailList.push(v);
    }

    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MAIL_GET_LIST_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.MailList){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.MailList.length > P.PT_MAIL_LIST_MAX){return false;}
        NetData.NetWriteInt32(m.MailList.length, byteBuffer);
        for(let v of m.MailList){
            if(Encode_GMDT_MAIL(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_MAIL_READ_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MailID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MAIL_READ_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.MailID, byteBuffer);

    return true;
}

var Decode_GMPKG_MAIL_READ_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.MailID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MAIL_READ_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.MailID, byteBuffer);
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_MAIL_RECEIVE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Mail = {};
    if(Decode_GMDT_MAIL(byteBuffer, m.Mail) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MAIL_RECEIVE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_MAIL(m.Mail, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MAIL_DEL_NTF = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfMailID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMailID > P.PT_MAIL_LIST_MAX){return false;}
    m.MailID = [];
    for(let i = 0; i < sizeOfMailID; i++){
        let v = NetData.NetReadUint64(byteBuffer, ret);
        if(ret.err){return false;}
        m.MailID.push(v);
    }

    return true;
}

var Encode_GMPKG_MAIL_DEL_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.MailID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.MailID.length > P.PT_MAIL_LIST_MAX){return false;}
        NetData.NetWriteInt32(m.MailID.length, byteBuffer);
        for(let v of m.MailID){
            NetData.NetWriteUint64(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMDT_GUILD_INFO = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.WeeklyLiveness = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CaptainName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Switch = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LimitedLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Announcement = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDANNOUNCEMENT_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_INFO = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.GuildID, byteBuffer);
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint8(m.MemberCount, byteBuffer);
    NetData.NetWriteUint32(m.WeeklyLiveness, byteBuffer);
    if(NetData.NetWriteString(m.CaptainName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.Switch, byteBuffer);
    NetData.NetWriteUint16(m.LimitedLevel, byteBuffer);
    if(NetData.NetWriteString(m.Announcement, P.PT_MAX_GUILDANNOUNCEMENT_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_GUILD_MSG = function(byteBuffer, m){
    var ret = {err : false};
    m.MsgTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MsgContent = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDMSG_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_MSG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.MsgTime, byteBuffer);
    if(NetData.NetWriteString(m.MsgContent, P.PT_MAX_GUILDMSG_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_LIST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Page = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_LIST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Page, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_LIST_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Page = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastPage = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGuilds = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuilds > P.PT_GUILD_LIST_MAX_COUNT){return false;}
    m.Guilds = [];
    for(let i = 0; i < sizeOfGuilds; i++){
        let v = {};
        if(Decode_GMDT_GUILD_INFO(byteBuffer, v) == false){
            return false;
        }
        m.Guilds.push(v);
    }

    return true;
}

var Encode_GMPKG_GUILD_LIST_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.Page, byteBuffer);
    NetData.NetWriteUint16(m.LastPage, byteBuffer);
    if(!m.Guilds){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Guilds.length > P.PT_GUILD_LIST_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.Guilds.length, byteBuffer);
        for(let v of m.Guilds){
            if(Encode_GMDT_GUILD_INFO(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_CREATE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_CREATE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_CREATE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.GuildID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}
    }

    return true;
}

var Encode_GMPKG_GUILD_CREATE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    NetData.NetWriteUint64(m.GuildID, byteBuffer);
    }

    return true;
}

var Decode_GMPKG_GUILD_SEARCH_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_SEARCH_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_SEARCH_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.Guild = {};
    if(Decode_GMDT_GUILD_INFO(byteBuffer, m.Guild) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GUILD_SEARCH_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_INFO(m.Guild, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_GUILD_APPLY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_APPLY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.GuildID, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_APPLY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_APPLY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.GuildID, byteBuffer);
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_APPLY_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.CandidateRoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_APPLY_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.CandidateRoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_EDIT_ANNOUNCEMENT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Announcement = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDANNOUNCEMENT_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_EDIT_ANNOUNCEMENT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.Announcement, P.PT_MAX_GUILDANNOUNCEMENT_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_EDIT_ANNOUNCEMENT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Announcement = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDANNOUNCEMENT_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_EDIT_ANNOUNCEMENT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(NetData.NetWriteString(m.Announcement, P.PT_MAX_GUILDANNOUNCEMENT_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_ACCEPT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TargetRoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_ACCEPT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.TargetRoleID, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_ACCEPT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_ACCEPT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_ACCEPT_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_ACCEPT_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_REFUSE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TargetRoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_REFUSE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.TargetRoleID, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_REFUSE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_REFUSE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_REFUSE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_REFUSE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_SETLIMIT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Switch = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Limit = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_SETLIMIT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Switch, byteBuffer);
    NetData.NetWriteUint8(m.Limit, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_SETLIMIT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Switch = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Limit = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_SETLIMIT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Switch, byteBuffer);
    NetData.NetWriteUint8(m.Limit, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_CONTRIBUTE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_CONTRIBUTE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_CONTRIBUTE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Contribute = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.HistoryContribute = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_CONTRIBUTE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Contribute, byteBuffer);
    NetData.NetWriteInt32(m.HistoryContribute, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_FIRE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TargetRoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_FIRE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.TargetRoleID, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_FIRE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_FIRE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_FIRE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_FIRE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_NOMINATE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TargetRoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_NOMINATE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.TargetRoleID, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_NOMINATE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_NOMINATE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_NOMINATE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_NOMINATE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_RELIEVE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TargetRoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_RELIEVE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.TargetRoleID, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_RELIEVE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_RELIEVE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_RELIEVE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_RELIEVE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_DISMISS_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_DISMISS_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_DISMISS_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_DISMISS_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_NEWS_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_NEWS_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_NEWS_ACK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfMsgHistory = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMsgHistory > P.PT_MAX_MSGHISTORY_COUNT){return false;}
    m.MsgHistory = [];
    for(let i = 0; i < sizeOfMsgHistory; i++){
        let v = {};
        if(Decode_GMDT_GUILD_MSG(byteBuffer, v) == false){
            return false;
        }
        m.MsgHistory.push(v);
    }

    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_NEWS_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.MsgHistory){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.MsgHistory.length > P.PT_MAX_MSGHISTORY_COUNT){return false;}
        NetData.NetWriteInt32(m.MsgHistory.length, byteBuffer);
        for(let v of m.MsgHistory){
            if(Encode_GMDT_GUILD_MSG(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_ACTIVE_MEDAL_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MedalID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_ACTIVE_MEDAL_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MedalID, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_ACTIVE_MEDAL_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Medal = {};
    if(Decode_GMDT_GUILD_MEDAL(byteBuffer, m.Medal) == false){
        return false;
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Contribute = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_ACTIVE_MEDAL_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_GUILD_MEDAL(m.Medal, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    NetData.NetWriteInt32(m.Contribute, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_ACTIVE_MEDAL_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_GUILD_ACTIVE_MEDAL_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GUILD_ACTIVE_MEDAL_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_ACTIVE_MEDAL_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_GUILD_UPGRADE_MEDAL_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MedalID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_UPGRADE_MEDAL_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MedalID, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_UPGRADE_MEDAL_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.MedalID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MedalLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Contribute = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_UPGRADE_MEDAL_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MedalID, byteBuffer);
    NetData.NetWriteUint16(m.MedalLevel, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    NetData.NetWriteInt32(m.Contribute, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_UPGRADE_MEDAL_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_GUILD_UPGRADE_MEDAL_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GUILD_UPGRADE_MEDAL_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_UPGRADE_MEDAL_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_GUILD_INFO_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_INFO_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_INFO_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.GuildInfo = {};
    if(Decode_GMDT_GUILD_INFO(byteBuffer, m.GuildInfo) == false){
        return false;
    }
    }

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.GuildExp = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}
    }

    m.Announcement = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDANNOUNCEMENT_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_INFO_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_INFO(m.GuildInfo, byteBuffer) == false){
        return false;
    }
    }
    if(m.ErrCode == P.PTERR_SUCCESS){
    NetData.NetWriteUint32(m.GuildExp, byteBuffer);
    }
    if(NetData.NetWriteString(m.Announcement, P.PT_MAX_GUILDANNOUNCEMENT_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_REQ_LIST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_REQ_LIST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_REQ_LIST_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGuildReqs = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuildReqs > P.PT_MAX_GUILD_REQS){return false;}
    m.GuildReqs = [];
    for(let i = 0; i < sizeOfGuildReqs; i++){
        let v = {};
        if(Decode_GMDT_GUILD_LIST_REQ(byteBuffer, v) == false){
            return false;
        }
        m.GuildReqs.push(v);
    }

    return true;
}

var Encode_GMPKG_GUILD_REQ_LIST_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.GuildReqs){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GuildReqs.length > P.PT_MAX_GUILD_REQS){return false;}
        NetData.NetWriteInt32(m.GuildReqs.length, byteBuffer);
        for(let v of m.GuildReqs){
            if(Encode_GMDT_GUILD_LIST_REQ(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_MEMBER_LIST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_MEMBER_LIST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_MEMBER_LIST_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGuildMembers = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuildMembers > P.PT_MAX_GUILD_MEMBERS){return false;}
    m.GuildMembers = [];
    for(let i = 0; i < sizeOfGuildMembers; i++){
        let v = {};
        if(Decode_GMDT_GUILD_LIST_MEMBER(byteBuffer, v) == false){
            return false;
        }
        m.GuildMembers.push(v);
    }

    return true;
}

var Encode_GMPKG_GUILD_MEMBER_LIST_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.GuildMembers){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GuildMembers.length > P.PT_MAX_GUILD_MEMBERS){return false;}
        NetData.NetWriteInt32(m.GuildMembers.length, byteBuffer);
        for(let v of m.GuildMembers){
            if(Encode_GMDT_GUILD_LIST_MEMBER(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_MEMBER_WEEKLY_REFRESH_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_MEMBER_WEEKLY_REFRESH_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_QUIT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_QUIT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_QUIT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.Time = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}
    }

    return true;
}

var Encode_GMPKG_GUILD_QUIT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    NetData.NetWriteUint32(m.Time, byteBuffer);
    }

    return true;
}

var Decode_GMPKG_GUILD_BUBBLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_BUBBLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_BUBBLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGuildBubbles = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuildBubbles > P.PT_MAX_GUILD_BUBBLE){return false;}
    m.GuildBubbles = [];
    for(let i = 0; i < sizeOfGuildBubbles; i++){
        let v = {};
        if(Decode_GMDT_GUILD_BUBBLE(byteBuffer, v) == false){
            return false;
        }
        m.GuildBubbles.push(v);
    }

    return true;
}

var Encode_GMPKG_GUILD_BUBBLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.GuildBubbles){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GuildBubbles.length > P.PT_MAX_GUILD_BUBBLE){return false;}
        NetData.NetWriteInt32(m.GuildBubbles.length, byteBuffer);
        for(let v of m.GuildBubbles){
            if(Encode_GMDT_GUILD_BUBBLE(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_BUBBLE_RECEIVED_RPT = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_BUBBLE_RECEIVED_RPT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_ENDLESS_RANKING_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_ENDLESS_RANKING_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_ENDLESS_RANKING_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.SelfRank = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGuildMembers = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuildMembers > P.PT_MAX_GUILD_MEMBERS){return false;}
    m.GuildMembers = [];
    for(let i = 0; i < sizeOfGuildMembers; i++){
        let v = {};
        if(Decode_GMDT_GUILD_LIST_RANKING_MEMBER(byteBuffer, v) == false){
            return false;
        }
        m.GuildMembers.push(v);
    }

    return true;
}

var Encode_GMDT_GUILD_ENDLESS_RANKING_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint8(m.SelfRank, byteBuffer);
    if(!m.GuildMembers){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GuildMembers.length > P.PT_MAX_GUILD_MEMBERS){return false;}
        NetData.NetWriteInt32(m.GuildMembers.length, byteBuffer);
        for(let v of m.GuildMembers){
            if(Encode_GMDT_GUILD_LIST_RANKING_MEMBER(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_ENDLESS_RANKING_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_GUILD_ENDLESS_RANKING_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GUILD_ENDLESS_RANKING_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_ENDLESS_RANKING_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_GUILD_ENDLESS_RANKING_LIKE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TargetRoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_ENDLESS_RANKING_LIKE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.TargetRoleID, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_ENDLESS_RANKING_LIKE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.LikeClicks = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.PowerPoint = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_ENDLESS_RANKING_LIKE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.LikeClicks, byteBuffer);
    NetData.NetWriteUint8(m.PowerPoint, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_LIST_RAN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_LIST_RAN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_LIST_RAN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGuilds = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuilds > P.PT_GUILD_LIST_RAN_MAX_COUNT){return false;}
    m.Guilds = [];
    for(let i = 0; i < sizeOfGuilds; i++){
        let v = {};
        if(Decode_GMDT_GUILD_INFO(byteBuffer, v) == false){
            return false;
        }
        m.Guilds.push(v);
    }

    return true;
}

var Encode_GMPKG_GUILD_LIST_RAN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    if(!m.Guilds){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Guilds.length > P.PT_GUILD_LIST_RAN_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.Guilds.length, byteBuffer);
        for(let v of m.Guilds){
            if(Encode_GMDT_GUILD_INFO(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_LUCKY_DRAW_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_LUCKY_DRAW_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_LUCKY_DRAW_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.LuckyDrawsCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfShowItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfShowItems > P.PT_GUILD_HONGBAO_RAN_ITEM_MAX){return false;}
    m.ShowItems = [];
    for(let i = 0; i < sizeOfShowItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ShowItems.push(v);
    }

    return true;
}

var Encode_GMPKG_GUILD_LUCKY_DRAW_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.LuckyDrawsCount, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.ShowItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ShowItems.length > P.PT_GUILD_HONGBAO_RAN_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ShowItems.length, byteBuffer);
        for(let v of m.ShowItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_TRANSFER_CAPTAIN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TargetRoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_TRANSFER_CAPTAIN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.TargetRoleID, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_TRANSFER_CAPTAIN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_TRANSFER_CAPTAIN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_TRANSFER_CAPTAIN_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.OldCaptainRoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.OldCaptainRolename = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_TRANSFER_CAPTAIN_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.OldCaptainRoleID, byteBuffer);
    if(NetData.NetWriteString(m.OldCaptainRolename, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_GET_CAPTAIN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_GET_CAPTAIN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_GET_CAPTAIN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_GET_CAPTAIN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_BOSS_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_BOSS_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_BOSS_EVENT = function(byteBuffer, m){
    var ret = {err : false};
    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Event = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Value = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_BOSS_EVENT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.Event, byteBuffer);
    NetData.NetWriteInt32(m.Value, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_BOSS_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurBossID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurBossHP = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalDamage = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuildTotalDamage = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfEvent = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfEvent > P.PT_GUILD_BOSSEVENT_MAX){return false;}
    m.Event = [];
    for(let i = 0; i < sizeOfEvent; i++){
        let v = {};
        if(Decode_GMDT_GUILD_BOSS_EVENT(byteBuffer, v) == false){
            return false;
        }
        m.Event.push(v);
    }

    m.RewardActiveStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardDraw = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardDraw > P.PT_GUILD_BOSS_REWARD_FLAG_SIZE){return false;}
    m.RewardDraw = [];
    for(let i = 0; i < sizeOfRewardDraw; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.RewardDraw.push(v);
    }

    return true;
}

var Encode_GMDT_GUILD_BOSS_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    NetData.NetWriteUint8(m.BuyCount, byteBuffer);
    NetData.NetWriteUint8(m.CurBossID, byteBuffer);
    NetData.NetWriteUint64(m.CurBossHP, byteBuffer);
    NetData.NetWriteUint64(m.TotalDamage, byteBuffer);
    NetData.NetWriteUint64(m.GuildTotalDamage, byteBuffer);
    if(!m.Event){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Event.length > P.PT_GUILD_BOSSEVENT_MAX){return false;}
        NetData.NetWriteInt32(m.Event.length, byteBuffer);
        for(let v of m.Event){
            if(Encode_GMDT_GUILD_BOSS_EVENT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.RewardActiveStep, byteBuffer);
    if(!m.RewardDraw){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardDraw.length > P.PT_GUILD_BOSS_REWARD_FLAG_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardDraw.length, byteBuffer);
        for(let v of m.RewardDraw){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_GUILD_BOSS_BAG(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GUILD_BOSS_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_BOSS_BAG(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_CHANLLEGE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_BOSS_CHANLLEGE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_BOSS_CHANLLEGE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.ChanBossID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChanBossHP = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.Damage = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Bag = {};
    if(Decode_GMDT_GUILD_BOSS_BAG(byteBuffer, m.Bag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_GUILD_BOSS_CHANLLEGE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ChanBossID, byteBuffer);
    NetData.NetWriteUint64(m.ChanBossHP, byteBuffer);
    NetData.NetWriteInt32(m.Damage, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(Encode_GMDT_GUILD_BOSS_BAG(m.Bag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_CHANLLEGE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_GUILD_BOSS_CHANLLEGE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GUILD_BOSS_CHANLLEGE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_BOSS_CHANLLEGE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_GET_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfID > P.PT_CONST_100){return false;}
    m.ID = [];
    for(let i = 0; i < sizeOfID; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.ID.push(v);
    }

    return true;
}

var Encode_GMPKG_GUILD_BOSS_GET_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.ID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ID.length > P.PT_CONST_100){return false;}
        NetData.NetWriteInt32(m.ID.length, byteBuffer);
        for(let v of m.ID){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMDT_GUILD_BOSS_GET_REWARD_OK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfID > P.PT_CONST_100){return false;}
    m.ID = [];
    for(let i = 0; i < sizeOfID; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.ID.push(v);
    }

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_GUILD_BOSS_GET_REWARD_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.ID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ID.length > P.PT_CONST_100){return false;}
        NetData.NetWriteInt32(m.ID.length, byteBuffer);
        for(let v of m.ID){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_GET_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_GUILD_BOSS_GET_REWARD_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GUILD_BOSS_GET_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_BOSS_GET_REWARD_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMDT_GUILD_BOSS_RANK_PLAYER = function(byteBuffer, m){
    var ret = {err : false};
    m.IconID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalDamage = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_BOSS_RANK_PLAYER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.IconID, byteBuffer);
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    NetData.NetWriteUint64(m.TotalDamage, byteBuffer);
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_PLAYER_RANK_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_BOSS_PLAYER_RANK_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_BOSS_PLAYER_RANK_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.MyRank = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MyDamage = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfMembers = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMembers > P.PT_GUILD_BOSS_PLAYER_RANK_SIZE){return false;}
    m.Members = [];
    for(let i = 0; i < sizeOfMembers; i++){
        let v = {};
        if(Decode_GMDT_GUILD_BOSS_RANK_PLAYER(byteBuffer, v) == false){
            return false;
        }
        m.Members.push(v);
    }

    return true;
}

var Encode_GMDT_GUILD_BOSS_PLAYER_RANK_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.MyRank, byteBuffer);
    NetData.NetWriteUint64(m.MyDamage, byteBuffer);
    if(!m.Members){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Members.length > P.PT_GUILD_BOSS_PLAYER_RANK_SIZE){return false;}
        NetData.NetWriteInt32(m.Members.length, byteBuffer);
        for(let v of m.Members){
            if(Encode_GMDT_GUILD_BOSS_RANK_PLAYER(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_PLAYER_RANK_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_GUILD_BOSS_PLAYER_RANK_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GUILD_BOSS_PLAYER_RANK_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_BOSS_PLAYER_RANK_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_GUILD_RANK_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_BOSS_GUILD_RANK_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_BOSS_RANK_GUILD = function(byteBuffer, m){
    var ret = {err : false};
    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalDamage = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_BOSS_RANK_GUILD = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint8(m.MemberCount, byteBuffer);
    NetData.NetWriteUint64(m.TotalDamage, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_BOSS_GUILD_RANK_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.MyRank = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MyGuild = {};
    if(Decode_GMDT_GUILD_BOSS_RANK_GUILD(byteBuffer, m.MyGuild) == false){
        return false;
    }

    let sizeOfGuilds = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuilds > P.PT_CONST_100){return false;}
    m.Guilds = [];
    for(let i = 0; i < sizeOfGuilds; i++){
        let v = {};
        if(Decode_GMDT_GUILD_BOSS_RANK_GUILD(byteBuffer, v) == false){
            return false;
        }
        m.Guilds.push(v);
    }

    return true;
}

var Encode_GMDT_GUILD_BOSS_GUILD_RANK_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.MyRank, byteBuffer);
    if(Encode_GMDT_GUILD_BOSS_RANK_GUILD(m.MyGuild, byteBuffer) == false){
        return false;
    }
    if(!m.Guilds){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Guilds.length > P.PT_CONST_100){return false;}
        NetData.NetWriteInt32(m.Guilds.length, byteBuffer);
        for(let v of m.Guilds){
            if(Encode_GMDT_GUILD_BOSS_RANK_GUILD(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_GUILD_RANK_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_GUILD_BOSS_GUILD_RANK_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GUILD_BOSS_GUILD_RANK_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_BOSS_GUILD_RANK_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_START_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurBossID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurBossHP = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalDamage = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RewardActiveStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardDraw = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardDraw > P.PT_GUILD_BOSS_REWARD_FLAG_SIZE){return false;}
    m.RewardDraw = [];
    for(let i = 0; i < sizeOfRewardDraw; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.RewardDraw.push(v);
    }

    return true;
}

var Encode_GMPKG_GUILD_BOSS_START_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    NetData.NetWriteUint8(m.BuyCount, byteBuffer);
    NetData.NetWriteUint8(m.CurBossID, byteBuffer);
    NetData.NetWriteUint64(m.CurBossHP, byteBuffer);
    NetData.NetWriteUint64(m.TotalDamage, byteBuffer);
    NetData.NetWriteUint8(m.RewardActiveStep, byteBuffer);
    if(!m.RewardDraw){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardDraw.length > P.PT_GUILD_BOSS_REWARD_FLAG_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardDraw.length, byteBuffer);
        for(let v of m.RewardDraw){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_GUILD_BOSS_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUILD_BOSS_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_GUILD_BOSS_BUY_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.BuyCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_GUILD_BOSS_BUY_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.BuyCount, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);

    return true;
}

var Decode_GMPKG_GUILD_BOSS_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_GUILD_BOSS_BUY_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GUILD_BOSS_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GUILD_BOSS_BUY_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DAILY_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DAILY_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_DAILY = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.State = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Var = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_DAILY = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint8(m.State, byteBuffer);
    NetData.NetWriteInt32(m.Var, byteBuffer);

    return true;
}

var Decode_GMPKG_DAILY_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ServerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Active = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfActiveReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfActiveReward > P.PT_DAILY_ACTIVE_MAX){return false;}
    m.ActiveReward = [];
    for(let i = 0; i < sizeOfActiveReward; i++){
        let v = NetData.NetReadInt32(byteBuffer, ret);
        if(ret.err){return false;}
        m.ActiveReward.push(v);
    }

    let sizeOfDaily = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDaily > P.PT_DAILY_TASK_MAX){return false;}
    m.Daily = [];
    for(let i = 0; i < sizeOfDaily; i++){
        let v = {};
        if(Decode_GMDT_DAILY(byteBuffer, v) == false){
            return false;
        }
        m.Daily.push(v);
    }

    return true;
}

var Encode_GMPKG_DAILY_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.ServerTime, byteBuffer);
    NetData.NetWriteInt32(m.Active, byteBuffer);
    if(!m.ActiveReward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ActiveReward.length > P.PT_DAILY_ACTIVE_MAX){return false;}
        NetData.NetWriteInt32(m.ActiveReward.length, byteBuffer);
        for(let v of m.ActiveReward){
            NetData.NetWriteInt32(v, byteBuffer);
        }
    }
    if(!m.Daily){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Daily.length > P.PT_DAILY_TASK_MAX){return false;}
        NetData.NetWriteInt32(m.Daily.length, byteBuffer);
        for(let v of m.Daily){
            if(Encode_GMDT_DAILY(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DAILY_ACTIVE_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Active = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DAILY_ACTIVE_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Active, byteBuffer);

    return true;
}

var Decode_GMPKG_DAILY_ACTIVE_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfActiveReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfActiveReward > P.PT_DAILY_ACTIVE_MAX){return false;}
    m.ActiveReward = [];
    for(let i = 0; i < sizeOfActiveReward; i++){
        let v = NetData.NetReadInt32(byteBuffer, ret);
        if(ret.err){return false;}
        m.ActiveReward.push(v);
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_DAILY_ACTIVE_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.ActiveReward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ActiveReward.length > P.PT_DAILY_ACTIVE_MAX){return false;}
        NetData.NetWriteInt32(m.ActiveReward.length, byteBuffer);
        for(let v of m.ActiveReward){
            NetData.NetWriteInt32(v, byteBuffer);
        }
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DAILY_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DAILY_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_DAILY_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ServerTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Active = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfDaily = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDaily > P.PT_DAILY_TASK_MAX){return false;}
    m.Daily = [];
    for(let i = 0; i < sizeOfDaily; i++){
        let v = {};
        if(Decode_GMDT_DAILY(byteBuffer, v) == false){
            return false;
        }
        m.Daily.push(v);
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_DAILY_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.ServerTime, byteBuffer);
    NetData.NetWriteInt32(m.Active, byteBuffer);
    if(!m.Daily){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Daily.length > P.PT_DAILY_TASK_MAX){return false;}
        NetData.NetWriteInt32(m.Daily.length, byteBuffer);
        for(let v of m.Daily){
            if(Encode_GMDT_DAILY(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DAILY_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DAILY_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_ACHIEVE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ACHIEVE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_ACHIEVE = function(byteBuffer, m){
    var ret = {err : false};
    m.SID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Step = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Var = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ACHIEVE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.SID, byteBuffer);
    NetData.NetWriteUint16(m.Step, byteBuffer);
    NetData.NetWriteInt32(m.Var, byteBuffer);

    return true;
}

var Decode_GMPKG_ACHIEVE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfAchieve = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfAchieve > P.PT_ACHIEVE_MAX){return false;}
    m.Achieve = [];
    for(let i = 0; i < sizeOfAchieve; i++){
        let v = {};
        if(Decode_GMDT_ACHIEVE(byteBuffer, v) == false){
            return false;
        }
        m.Achieve.push(v);
    }

    m.RewardDiamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ACHIEVE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Achieve){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Achieve.length > P.PT_ACHIEVE_MAX){return false;}
        NetData.NetWriteInt32(m.Achieve.length, byteBuffer);
        for(let v of m.Achieve){
            if(Encode_GMDT_ACHIEVE(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.RewardDiamond, byteBuffer);

    return true;
}

var Decode_GMPKG_ACHIEVE_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.SID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ACHIEVE_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.SID, byteBuffer);

    return true;
}

var Decode_GMPKG_ACHIEVE_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Achieve = {};
    if(Decode_GMDT_ACHIEVE(byteBuffer, m.Achieve) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    m.RewardDiamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ACHIEVE_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_ACHIEVE(m.Achieve, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.RewardDiamond, byteBuffer);

    return true;
}

var Decode_GMPKG_ACHIEVE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.System = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ACHIEVE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.System, byteBuffer);
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_STAT_FLAGS_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_STAT_FLAGS_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_STAT_FLAGS_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Flags = {};
    if(Decode_GMDT_STAT_FLAGS(byteBuffer, m.Flags) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_STAT_FLAGS_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_STAT_FLAGS(m.Flags, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_CLIENT_EVENT_RPT = function(byteBuffer, m){
    var ret = {err : false};
    m.EventID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Param1 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Param2 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Param3 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_CLIENT_EVENT_RPT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.EventID, byteBuffer);
    NetData.NetWriteInt32(m.Param1, byteBuffer);
    NetData.NetWriteInt32(m.Param2, byteBuffer);
    NetData.NetWriteInt32(m.Param3, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_GIFT_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_GIFT_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMDT_FULI_GIFT = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_FULI_GIFT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteUint8(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_GIFT_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGift = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGift > P.PT_FULI_GIFT_LIMIT_MAX){return false;}
    m.Gift = [];
    for(let i = 0; i < sizeOfGift; i++){
        let v = {};
        if(Decode_GMDT_FULI_GIFT(byteBuffer, v) == false){
            return false;
        }
        m.Gift.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_GIFT_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    if(!m.Gift){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Gift.length > P.PT_FULI_GIFT_LIMIT_MAX){return false;}
        NetData.NetWriteInt32(m.Gift.length, byteBuffer);
        for(let v of m.Gift){
            if(Encode_GMDT_FULI_GIFT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FULI_GIFT_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_GIFT_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteUint8(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_GIFT_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGift = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGift > P.PT_FULI_GIFT_LIMIT_MAX){return false;}
    m.Gift = [];
    for(let i = 0; i < sizeOfGift; i++){
        let v = {};
        if(Decode_GMDT_FULI_GIFT(byteBuffer, v) == false){
            return false;
        }
        m.Gift.push(v);
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_GIFT_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    if(!m.Gift){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Gift.length > P.PT_FULI_GIFT_LIMIT_MAX){return false;}
        NetData.NetWriteInt32(m.Gift.length, byteBuffer);
        for(let v of m.Gift){
            if(Encode_GMDT_FULI_GIFT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FULI_GIFT_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_GIFT_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SEVEN_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SEVEN_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Day, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SEVEN_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Act = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.HeapCZ = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.All = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CZStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DareStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DareVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CreateDay = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfDayFlag = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDayFlag > P.PT_FULI_SEVEN_MAX){return false;}
    m.DayFlag = [];
    for(let i = 0; i < sizeOfDayFlag; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.DayFlag.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_SEVEN_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Act, byteBuffer);
    NetData.NetWriteUint32(m.EndTime, byteBuffer);
    NetData.NetWriteInt32(m.HeapCZ, byteBuffer);
    NetData.NetWriteUint8(m.All, byteBuffer);
    NetData.NetWriteUint8(m.CZStep, byteBuffer);
    NetData.NetWriteUint8(m.BuyStep, byteBuffer);
    NetData.NetWriteUint8(m.DareStep, byteBuffer);
    NetData.NetWriteInt32(m.DareVar, byteBuffer);
    NetData.NetWriteInt32(m.CreateDay, byteBuffer);
    if(!m.DayFlag){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.DayFlag.length > P.PT_FULI_SEVEN_MAX){return false;}
        NetData.NetWriteInt32(m.DayFlag.length, byteBuffer);
        for(let v of m.DayFlag){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_FULI_SEVEN_ALL_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SEVEN_ALL_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Day, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SEVEN_ALL_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_SEVEN_ALL_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FULI_SEVEN_CZ_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SEVEN_CZ_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Day, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SEVEN_CZ_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CZStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_SEVEN_CZ_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.CZStep, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FULI_SEVEN_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SEVEN_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Day, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SEVEN_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_SEVEN_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.BuyStep, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FULI_SEVEN_DARE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SEVEN_DARE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Day, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SEVEN_DARE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DareStep = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DareVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SEVEN_DARE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.DareStep, byteBuffer);
    NetData.NetWriteInt32(m.DareVar, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SEVEN_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SEVEN_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SEVEN_DAY_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SEVEN_DAY_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Day, byteBuffer);
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_CZ_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_CZ_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_CZ_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Flag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfDaily = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDaily > P.PT_FULI_CZ_MAX){return false;}
    m.Daily = [];
    for(let i = 0; i < sizeOfDaily; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Daily.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_CZ_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Flag, byteBuffer);
    if(!m.Daily){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Daily.length > P.PT_FULI_CZ_MAX){return false;}
        NetData.NetWriteInt32(m.Daily.length, byteBuffer);
        for(let v of m.Daily){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_FULI_CZ_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Free = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Ticket = NetData.NetReadString(byteBuffer, P.PT_CONST_1000, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_CZ_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Free, byteBuffer);
    if(NetData.NetWriteString(m.Ticket, P.PT_CONST_1000, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_FULI_CZ_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_CZ_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FULI_CZ_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_CZ_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_CZ_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    let sizeOfDaily = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDaily > P.PT_FULI_CZ_MAX){return false;}
    m.Daily = [];
    for(let i = 0; i < sizeOfDaily; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Daily.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_CZ_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.Daily){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Daily.length > P.PT_FULI_CZ_MAX){return false;}
        NetData.NetWriteInt32(m.Daily.length, byteBuffer);
        for(let v of m.Daily){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_FULI_CZ_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_CZ_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_VIPBONUS_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_VIPBONUS_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_VIPBONUS_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TodayCZ = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CZ = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.VIP = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_VIPBONUS_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.TodayCZ, byteBuffer);
    NetData.NetWriteUint8(m.CZ, byteBuffer);
    NetData.NetWriteUint8(m.VIP, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_VIPBONUS_CZ_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_VIPBONUS_CZ_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_VIPBONUS_CZ_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_VIPBONUS_CZ_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FULI_VIPBONUS_VIP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_VIPBONUS_VIP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_VIPBONUS_VIP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_VIPBONUS_VIP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FULI_VIPBONUS_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_VIPBONUS_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SHARE_DAILY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SHARE_DAILY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SHARE_DAILY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuliShareDaily = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_SHARE_DAILY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.FuliShareDaily, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FULI_SHARE_RECOMMAND_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SHARE_RECOMMAND_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SHARE_RECOMMAND_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuliShareRecommand = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SHARE_RECOMMAND_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.FuliShareRecommand, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SHARE_MEMBER_TESTPLAY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_SHARE_MEMBER_TESTPLAY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_SHARE_MEMBER_TESTPLAY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FuliShareMemberTestPlay = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_SHARE_MEMBER_TESTPLAY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint8(m.FuliShareMemberTestPlay, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ARENA_OPEN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ARENA_OPEN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_ARENA_MEMBER = function(byteBuffer, m){
    var ret = {err : false};
    m.IconID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Ranking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Likes = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ARENA_MEMBER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.IconID, byteBuffer);
    NetData.NetWriteUint32(m.Ranking, byteBuffer);
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    NetData.NetWriteUint32(m.Likes, byteBuffer);

    return true;
}

var Decode_GMDT_ARENA_OPEN_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Ranking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Points = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeLimit = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfArenaList = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfArenaList > P.PT_ARENA_LIST_MAX_SIZE){return false;}
    m.ArenaList = [];
    for(let i = 0; i < sizeOfArenaList; i++){
        let v = {};
        if(Decode_GMDT_ARENA_MEMBER(byteBuffer, v) == false){
            return false;
        }
        m.ArenaList.push(v);
    }

    let sizeOfRankingHistories = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRankingHistories > P.PT_ARENA_REWARD_DAYS){return false;}
    m.RankingHistories = [];
    for(let i = 0; i < sizeOfRankingHistories; i++){
        let v = NetData.NetReadUint32(byteBuffer, ret);
        if(ret.err){return false;}
        m.RankingHistories.push(v);
    }

    let sizeOfDayRewardGetFlags = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDayRewardGetFlags > P.PT_ARENA_REWARD_DAYS){return false;}
    m.DayRewardGetFlags = [];
    for(let i = 0; i < sizeOfDayRewardGetFlags; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.DayRewardGetFlags.push(v);
    }

    m.TotalWin = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalLose = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ARENA_OPEN_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Ranking, byteBuffer);
    NetData.NetWriteInt32(m.Points, byteBuffer);
    NetData.NetWriteUint16(m.ChallengeCount, byteBuffer);
    NetData.NetWriteUint16(m.ChallengeLimit, byteBuffer);
    NetData.NetWriteUint16(m.FreeChallengeCount, byteBuffer);
    if(!m.ArenaList){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ArenaList.length > P.PT_ARENA_LIST_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ArenaList.length, byteBuffer);
        for(let v of m.ArenaList){
            if(Encode_GMDT_ARENA_MEMBER(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.RankingHistories){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RankingHistories.length > P.PT_ARENA_REWARD_DAYS){return false;}
        NetData.NetWriteInt32(m.RankingHistories.length, byteBuffer);
        for(let v of m.RankingHistories){
            NetData.NetWriteUint32(v, byteBuffer);
        }
    }
    if(!m.DayRewardGetFlags){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.DayRewardGetFlags.length > P.PT_ARENA_REWARD_DAYS){return false;}
        NetData.NetWriteInt32(m.DayRewardGetFlags.length, byteBuffer);
        for(let v of m.DayRewardGetFlags){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteUint32(m.TotalWin, byteBuffer);
    NetData.NetWriteUint32(m.TotalLose, byteBuffer);

    return true;
}

var Decode_GMPKG_ARENA_OPEN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ARENA_OPEN_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ARENA_OPEN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ARENA_OPEN_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ARENA_REPORT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ARENA_REPORT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_ARENA_REPORT = function(byteBuffer, m){
    var ret = {err : false};
    m.RankingNew = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RankingOld = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeResult = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Time = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ReportTag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ARENA_REPORT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.RankingNew, byteBuffer);
    NetData.NetWriteUint32(m.RankingOld, byteBuffer);
    NetData.NetWriteUint8(m.ChallengeResult, byteBuffer);
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.Time, byteBuffer);
    NetData.NetWriteUint8(m.ReportTag, byteBuffer);

    return true;
}

var Decode_GMDT_ARENA_REPORT_OK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfReportList = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReportList > P.PT_ARENA_REPORT_MAX_SIZE){return false;}
    m.ReportList = [];
    for(let i = 0; i < sizeOfReportList; i++){
        let v = {};
        if(Decode_GMDT_ARENA_REPORT(byteBuffer, v) == false){
            return false;
        }
        m.ReportList.push(v);
    }

    return true;
}

var Encode_GMDT_ARENA_REPORT_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.ReportList){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ReportList.length > P.PT_ARENA_REPORT_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ReportList.length, byteBuffer);
        for(let v of m.ReportList){
            if(Encode_GMDT_ARENA_REPORT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ARENA_REPORT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ARENA_REPORT_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ARENA_REPORT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ARENA_REPORT_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ARENA_RANK_TOP_LIST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ARENA_RANK_TOP_LIST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_ARENA_RANK_TOP_LIST_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Ranking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Points = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Likes = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.LikeClicks = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LikeClicksLimit = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfArenaList = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfArenaList > P.PT_ARENA_RANK_TOP_LIST_MAX_SIZE){return false;}
    m.ArenaList = [];
    for(let i = 0; i < sizeOfArenaList; i++){
        let v = {};
        if(Decode_GMDT_ARENA_MEMBER(byteBuffer, v) == false){
            return false;
        }
        m.ArenaList.push(v);
    }

    return true;
}

var Encode_GMDT_ARENA_RANK_TOP_LIST_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Ranking, byteBuffer);
    NetData.NetWriteInt32(m.Points, byteBuffer);
    NetData.NetWriteUint32(m.Likes, byteBuffer);
    NetData.NetWriteUint16(m.LikeClicks, byteBuffer);
    NetData.NetWriteUint16(m.LikeClicksLimit, byteBuffer);
    if(!m.ArenaList){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ArenaList.length > P.PT_ARENA_RANK_TOP_LIST_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ArenaList.length, byteBuffer);
        for(let v of m.ArenaList){
            if(Encode_GMDT_ARENA_MEMBER(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ARENA_RANK_TOP_LIST_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ARENA_RANK_TOP_LIST_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ARENA_RANK_TOP_LIST_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ARENA_RANK_TOP_LIST_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ARENA_LIKE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TargetRoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ARENA_LIKE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint64(m.TargetRoleID, byteBuffer);

    return true;
}

var Decode_GMDT_ARENA_LIKE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.LikeClicks = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LikeClicksLimit = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ARENA_LIKE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.LikeClicks, byteBuffer);
    NetData.NetWriteUint16(m.LikeClicksLimit, byteBuffer);
    NetData.NetWriteInt32(m.GoldReward, byteBuffer);
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);

    return true;
}

var Decode_GMPKG_ARENA_LIKE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ARENA_LIKE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ARENA_LIKE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ARENA_LIKE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ARENA_CHALLENGE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.BeChallengedRanking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ARENA_CHALLENGE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.BeChallengedRanking, byteBuffer);
    NetData.NetWriteUint8(m.ChallengeType, byteBuffer);

    return true;
}

var Decode_GMDT_ARENA_OPPONENT_EQUIP = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfGuaZaiItemID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuaZaiItemID > P.PT_GUAZAI_MAX_COUNT){return false;}
    m.GuaZaiItemID = [];
    for(let i = 0; i < sizeOfGuaZaiItemID; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.GuaZaiItemID.push(v);
    }

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.DressID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.WeaponID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ARENA_OPPONENT_EQUIP = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.GuaZaiItemID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GuaZaiItemID.length > P.PT_GUAZAI_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.GuaZaiItemID.length, byteBuffer);
        for(let v of m.GuaZaiItemID){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.DressID, byteBuffer);
    NetData.NetWriteUint16(m.WeaponID, byteBuffer);
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_ARENA_CHALLENGE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.NewRanking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.OldRanking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Points = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeResult = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeLimit = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.OpponentEquip = {};
    if(Decode_GMDT_ARENA_OPPONENT_EQUIP(byteBuffer, m.OpponentEquip) == false){
        return false;
    }

    m.WhetherFirstTime = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ARENA_CHALLENGE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.NewRanking, byteBuffer);
    NetData.NetWriteUint32(m.OldRanking, byteBuffer);
    NetData.NetWriteInt32(m.Points, byteBuffer);
    NetData.NetWriteInt32(m.DiamondReward, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    NetData.NetWriteUint8(m.ChallengeResult, byteBuffer);
    NetData.NetWriteUint16(m.ChallengeCount, byteBuffer);
    NetData.NetWriteUint16(m.ChallengeLimit, byteBuffer);
    NetData.NetWriteUint16(m.FreeChallengeCount, byteBuffer);
    if(Encode_GMDT_ARENA_OPPONENT_EQUIP(m.OpponentEquip, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.WhetherFirstTime, byteBuffer);

    return true;
}

var Decode_GMPKG_ARENA_CHALLENGE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ARENA_CHALLENGE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ARENA_CHALLENGE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ARENA_CHALLENGE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ARENA_CHALLENGE_COUNT_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TicketCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ARENA_CHALLENGE_COUNT_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);
    NetData.NetWriteUint16(m.TicketCount, byteBuffer);

    return true;
}

var Decode_GMDT_ARENA_CHALLENGE_COUNT_BUY_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ARENA_CHALLENGE_COUNT_BUY_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    NetData.NetWriteInt32(m.DiamondChange, byteBuffer);

    return true;
}

var Decode_GMPKG_ARENA_CHALLENGE_COUNT_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ARENA_CHALLENGE_COUNT_BUY_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ARENA_CHALLENGE_COUNT_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ARENA_CHALLENGE_COUNT_BUY_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ARENA_POINTS_CHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.PointsChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PointsCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ARENA_POINTS_CHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.PointsChange, byteBuffer);
    NetData.NetWriteInt32(m.PointsCur, byteBuffer);

    return true;
}

var Decode_GMPKG_ARENA_DAY_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Ranking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ARENA_DAY_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Day, byteBuffer);
    NetData.NetWriteUint32(m.Ranking, byteBuffer);

    return true;
}

var Decode_GMDT_ARENA_DAY_REWARD_OK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    return true;
}

var Encode_GMDT_ARENA_DAY_REWARD_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ARENA_DAY_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Ranking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ARENA_DAY_REWARD_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ARENA_DAY_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Day, byteBuffer);
    NetData.NetWriteUint32(m.Ranking, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ARENA_DAY_REWARD_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ARENA_SAODANG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.BeChallengedRanking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ARENA_SAODANG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.BeChallengedRanking, byteBuffer);
    NetData.NetWriteUint8(m.ChallengeType, byteBuffer);

    return true;
}

var Decode_GMDT_ARENA_SAODANG_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.NewRanking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.OldRanking = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Points = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeResult = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChallengeLimit = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.FreeChallengeCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ARENA_SAODANG_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.NewRanking, byteBuffer);
    NetData.NetWriteUint32(m.OldRanking, byteBuffer);
    NetData.NetWriteInt32(m.Points, byteBuffer);
    NetData.NetWriteInt32(m.DiamondReward, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    NetData.NetWriteUint8(m.ChallengeResult, byteBuffer);
    NetData.NetWriteUint16(m.ChallengeCount, byteBuffer);
    NetData.NetWriteUint16(m.ChallengeLimit, byteBuffer);
    NetData.NetWriteUint16(m.FreeChallengeCount, byteBuffer);

    return true;
}

var Decode_GMPKG_ARENA_SAODANG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ARENA_SAODANG_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ARENA_SAODANG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ARENA_SAODANG_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMDT_ACT_RULE = function(byteBuffer, m){
    var ret = {err : false};
    m.RuleID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Compare = NetData.NetReadString(byteBuffer, P.PT_AMS_STR_LEN, ret);
    if(ret.err){return false;}

    m.Var = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Param = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ACT_RULE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.RuleID, byteBuffer);
    if(NetData.NetWriteString(m.Compare, P.PT_AMS_STR_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Var, byteBuffer);
    NetData.NetWriteInt32(m.Param, byteBuffer);

    return true;
}

var Decode_GMDT_ACT_RULE_CFG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfRuleList = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRuleList > P.PT_AMS_MAX){return false;}
    m.RuleList = [];
    for(let i = 0; i < sizeOfRuleList; i++){
        let v = {};
        if(Decode_GMDT_ACT_RULE(byteBuffer, v) == false){
            return false;
        }
        m.RuleList.push(v);
    }

    return true;
}

var Encode_GMDT_ACT_RULE_CFG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.RuleList){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RuleList.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.RuleList.length, byteBuffer);
        for(let v of m.RuleList){
            if(Encode_GMDT_ACT_RULE(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_ACT_ITEM = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Price = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ACT_ITEM = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);
    NetData.NetWriteInt32(m.Price, byteBuffer);

    return true;
}

var Decode_GMDT_ACT_ITEM_PROB = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Prob = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Price = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ACT_ITEM_PROB = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);
    NetData.NetWriteInt32(m.Prob, byteBuffer);
    NetData.NetWriteInt32(m.Price, byteBuffer);

    return true;
}

var Decode_GMDT_ACT_FEN_CFG = function(byteBuffer, m){
    var ret = {err : false};
    m.LimitNum = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_AMS_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ACT_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    let sizeOfItemProbs = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemProbs > P.PT_AMS_MAX){return false;}
    m.ItemProbs = [];
    for(let i = 0; i < sizeOfItemProbs; i++){
        let v = {};
        if(Decode_GMDT_ACT_ITEM_PROB(byteBuffer, v) == false){
            return false;
        }
        m.ItemProbs.push(v);
    }

    return true;
}

var Encode_GMDT_ACT_FEN_CFG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.LimitNum, byteBuffer);
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ACT_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.ItemProbs){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemProbs.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.ItemProbs.length, byteBuffer);
        for(let v of m.ItemProbs){
            if(Encode_GMDT_ACT_ITEM_PROB(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_ACT_RANK_CFG = function(byteBuffer, m){
    var ret = {err : false};
    m.Up = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Down = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_AMS_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ACT_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    return true;
}

var Encode_GMDT_ACT_RANK_CFG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Up, byteBuffer);
    NetData.NetWriteUint16(m.Down, byteBuffer);
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ACT_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_ACT_RANK_LIMIT = function(byteBuffer, m){
    var ret = {err : false};
    m.Integral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.VipLevel = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ACT_RANK_LIMIT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Integral, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteUint8(m.VipLevel, byteBuffer);

    return true;
}

var Decode_GMDT_ACT_VAST_CFG = function(byteBuffer, m){
    var ret = {err : false};
    m.Var = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Times = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ACT_VAST_CFG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Var, byteBuffer);
    NetData.NetWriteUint16(m.Times, byteBuffer);

    return true;
}

var Decode_GMDT_ACT_EXCHANGE_CFG = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Limit = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Integral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ACT_EXCHANGE_CFG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);
    NetData.NetWriteInt32(m.Limit, byteBuffer);
    NetData.NetWriteInt32(m.Integral, byteBuffer);

    return true;
}

var Decode_GMDT_ACT_OP_CFG = function(byteBuffer, m){
    var ret = {err : false};
    m.Op = NetData.NetReadString(byteBuffer, P.PT_AMS_STR_LEN, ret);
    if(ret.err){return false;}

    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_AMS_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ACT_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    let sizeOfItemProbs = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemProbs > P.PT_AMS_MAX){return false;}
    m.ItemProbs = [];
    for(let i = 0; i < sizeOfItemProbs; i++){
        let v = {};
        if(Decode_GMDT_ACT_ITEM_PROB(byteBuffer, v) == false){
            return false;
        }
        m.ItemProbs.push(v);
    }

    let sizeOfFenCfg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfFenCfg > P.PT_AMS_MAX){return false;}
    m.FenCfg = [];
    for(let i = 0; i < sizeOfFenCfg; i++){
        let v = {};
        if(Decode_GMDT_ACT_FEN_CFG(byteBuffer, v) == false){
            return false;
        }
        m.FenCfg.push(v);
    }

    let sizeOfRankCfg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRankCfg > P.PT_AMS_MAX){return false;}
    m.RankCfg = [];
    for(let i = 0; i < sizeOfRankCfg; i++){
        let v = {};
        if(Decode_GMDT_ACT_RANK_CFG(byteBuffer, v) == false){
            return false;
        }
        m.RankCfg.push(v);
    }

    m.RankLimit = {};
    if(Decode_GMDT_ACT_RANK_LIMIT(byteBuffer, m.RankLimit) == false){
        return false;
    }

    m.RechargeID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfVastCfg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfVastCfg > P.PT_AMS_MAX){return false;}
    m.VastCfg = [];
    for(let i = 0; i < sizeOfVastCfg; i++){
        let v = {};
        if(Decode_GMDT_ACT_VAST_CFG(byteBuffer, v) == false){
            return false;
        }
        m.VastCfg.push(v);
    }

    m.VastVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfExchangeCfg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfExchangeCfg > P.PT_AMS_MAX){return false;}
    m.ExchangeCfg = [];
    for(let i = 0; i < sizeOfExchangeCfg; i++){
        let v = {};
        if(Decode_GMDT_ACT_EXCHANGE_CFG(byteBuffer, v) == false){
            return false;
        }
        m.ExchangeCfg.push(v);
    }

    m.LifeItemExpireTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfDayRankCfg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDayRankCfg > P.PT_AMS_MAX){return false;}
    m.DayRankCfg = [];
    for(let i = 0; i < sizeOfDayRankCfg; i++){
        let v = {};
        if(Decode_GMDT_ACT_RANK_CFG(byteBuffer, v) == false){
            return false;
        }
        m.DayRankCfg.push(v);
    }

    let sizeOfAllDayRankCfg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfAllDayRankCfg > P.PT_AMS_MAX){return false;}
    m.AllDayRankCfg = [];
    for(let i = 0; i < sizeOfAllDayRankCfg; i++){
        let v = {};
        if(Decode_GMDT_ACT_RANK_CFG(byteBuffer, v) == false){
            return false;
        }
        m.AllDayRankCfg.push(v);
    }

    let sizeOfAllRankCfg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfAllRankCfg > P.PT_AMS_MAX){return false;}
    m.AllRankCfg = [];
    for(let i = 0; i < sizeOfAllRankCfg; i++){
        let v = {};
        if(Decode_GMDT_ACT_RANK_CFG(byteBuffer, v) == false){
            return false;
        }
        m.AllRankCfg.push(v);
    }

    return true;
}

var Encode_GMDT_ACT_OP_CFG = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.Op, P.PT_AMS_STR_LEN, byteBuffer) == false){
        return false;
    }
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ACT_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.ItemProbs){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemProbs.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.ItemProbs.length, byteBuffer);
        for(let v of m.ItemProbs){
            if(Encode_GMDT_ACT_ITEM_PROB(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.FenCfg){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.FenCfg.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.FenCfg.length, byteBuffer);
        for(let v of m.FenCfg){
            if(Encode_GMDT_ACT_FEN_CFG(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.RankCfg){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RankCfg.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.RankCfg.length, byteBuffer);
        for(let v of m.RankCfg){
            if(Encode_GMDT_ACT_RANK_CFG(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ACT_RANK_LIMIT(m.RankLimit, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.RechargeID, byteBuffer);
    if(!m.VastCfg){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.VastCfg.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.VastCfg.length, byteBuffer);
        for(let v of m.VastCfg){
            if(Encode_GMDT_ACT_VAST_CFG(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.VastVar, byteBuffer);
    if(!m.ExchangeCfg){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ExchangeCfg.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.ExchangeCfg.length, byteBuffer);
        for(let v of m.ExchangeCfg){
            if(Encode_GMDT_ACT_EXCHANGE_CFG(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint32(m.LifeItemExpireTime, byteBuffer);
    if(!m.DayRankCfg){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.DayRankCfg.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.DayRankCfg.length, byteBuffer);
        for(let v of m.DayRankCfg){
            if(Encode_GMDT_ACT_RANK_CFG(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.AllDayRankCfg){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.AllDayRankCfg.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.AllDayRankCfg.length, byteBuffer);
        for(let v of m.AllDayRankCfg){
            if(Encode_GMDT_ACT_RANK_CFG(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.AllRankCfg){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.AllRankCfg.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.AllRankCfg.length, byteBuffer);
        for(let v of m.AllRankCfg){
            if(Encode_GMDT_ACT_RANK_CFG(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_ACT_COST_CFG = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_AMS_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ACT_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    return true;
}

var Encode_GMDT_ACT_COST_CFG = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ACT_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_ACT = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Name = NetData.NetReadString(byteBuffer, P.PT_AMS_STR_LEN, ret);
    if(ret.err){return false;}

    m.Desc = NetData.NetReadString(byteBuffer, P.PT_AMS_DESC_LEN, ret);
    if(ret.err){return false;}

    m.NameImg = NetData.NetReadString(byteBuffer, P.PT_AMS_STR_LEN, ret);
    if(ret.err){return false;}

    m.StartTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Limit = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LimitNum = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalLimit = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Status = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.OpCfg = {};
    if(Decode_GMDT_ACT_OP_CFG(byteBuffer, m.OpCfg) == false){
        return false;
    }

    let sizeOfShowCfg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfShowCfg > P.PT_AMS_MAX){return false;}
    m.ShowCfg = [];
    for(let i = 0; i < sizeOfShowCfg; i++){
        let v = {};
        if(Decode_GMDT_ACT_RULE_CFG(byteBuffer, v) == false){
            return false;
        }
        m.ShowCfg.push(v);
    }

    let sizeOfRuleCfg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRuleCfg > P.PT_AMS_MAX){return false;}
    m.RuleCfg = [];
    for(let i = 0; i < sizeOfRuleCfg; i++){
        let v = {};
        if(Decode_GMDT_ACT_RULE_CFG(byteBuffer, v) == false){
            return false;
        }
        m.RuleCfg.push(v);
    }

    m.Cost = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfCostCfg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfCostCfg > P.PT_AMS_MAX){return false;}
    m.CostCfg = [];
    for(let i = 0; i < sizeOfCostCfg; i++){
        let v = {};
        if(Decode_GMDT_ACT_COST_CFG(byteBuffer, v) == false){
            return false;
        }
        m.CostCfg.push(v);
    }

    m.Order = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RelatedActid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ACT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    if(NetData.NetWriteString(m.Name, P.PT_AMS_STR_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.Desc, P.PT_AMS_DESC_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.NameImg, P.PT_AMS_STR_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.StartTime, byteBuffer);
    NetData.NetWriteUint32(m.EndTime, byteBuffer);
    NetData.NetWriteUint8(m.Limit, byteBuffer);
    NetData.NetWriteInt32(m.LimitNum, byteBuffer);
    NetData.NetWriteInt32(m.TotalLimit, byteBuffer);
    NetData.NetWriteInt32(m.TotalJoin, byteBuffer);
    NetData.NetWriteUint8(m.Status, byteBuffer);
    if(Encode_GMDT_ACT_OP_CFG(m.OpCfg, byteBuffer) == false){
        return false;
    }
    if(!m.ShowCfg){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ShowCfg.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.ShowCfg.length, byteBuffer);
        for(let v of m.ShowCfg){
            if(Encode_GMDT_ACT_RULE_CFG(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.RuleCfg){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RuleCfg.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.RuleCfg.length, byteBuffer);
        for(let v of m.RuleCfg){
            if(Encode_GMDT_ACT_RULE_CFG(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.Cost, byteBuffer);
    if(!m.CostCfg){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.CostCfg.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.CostCfg.length, byteBuffer);
        for(let v of m.CostCfg){
            if(Encode_GMDT_ACT_COST_CFG(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint32(m.Order, byteBuffer);
    NetData.NetWriteUint32(m.RelatedActid, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_LIST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RelatedActid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_LIST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint32(m.RelatedActid, byteBuffer);

    return true;
}

var Decode_GMDT_ACT_TITLE = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Name = NetData.NetReadString(byteBuffer, P.PT_AMS_STR_LEN, ret);
    if(ret.err){return false;}

    m.NameImg = NetData.NetReadString(byteBuffer, P.PT_AMS_STR_LEN, ret);
    if(ret.err){return false;}

    m.StartTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Order = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ACT_TITLE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    if(NetData.NetWriteString(m.Name, P.PT_AMS_STR_LEN, byteBuffer) == false){
        return false;
    }
    if(NetData.NetWriteString(m.NameImg, P.PT_AMS_STR_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.StartTime, byteBuffer);
    NetData.NetWriteUint32(m.EndTime, byteBuffer);
    NetData.NetWriteUint32(m.Order, byteBuffer);
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_LIST_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RelatedActid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfActList = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfActList > P.PT_AMS_MAX){return false;}
    m.ActList = [];
    for(let i = 0; i < sizeOfActList; i++){
        let v = {};
        if(Decode_GMDT_ACT_TITLE(byteBuffer, v) == false){
            return false;
        }
        m.ActList.push(v);
    }

    return true;
}

var Encode_GMPKG_AMS_LIST_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint32(m.RelatedActid, byteBuffer);
    if(!m.ActList){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ActList.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.ActList.length, byteBuffer);
        for(let v of m.ActList){
            if(Encode_GMDT_ACT_TITLE(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_AMS_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);

    return true;
}

var Decode_GMDT_AMS_JOIN = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Join = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_AMS_JOIN = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteInt32(m.Join, byteBuffer);

    return true;
}

var Decode_GMDT_AMS_EXCHANGE = function(byteBuffer, m){
    var ret = {err : false};
    m.Index = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_AMS_EXCHANGE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Index, byteBuffer);
    NetData.NetWriteInt32(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Act = {};
    if(Decode_GMDT_ACT(byteBuffer, m.Act) == false){
        return false;
    }

    let sizeOfJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfJoin > P.PT_AMS_MAX){return false;}
    m.Join = [];
    for(let i = 0; i < sizeOfJoin; i++){
        let v = {};
        if(Decode_GMDT_AMS_JOIN(byteBuffer, v) == false){
            return false;
        }
        m.Join.push(v);
    }

    m.Integral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RuleVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalLimit = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfExchange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfExchange > P.PT_AMS_MAX){return false;}
    m.Exchange = [];
    for(let i = 0; i < sizeOfExchange; i++){
        let v = {};
        if(Decode_GMDT_AMS_EXCHANGE(byteBuffer, v) == false){
            return false;
        }
        m.Exchange.push(v);
    }

    m.TodayIntegral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_ACT(m.Act, byteBuffer) == false){
        return false;
    }
    if(!m.Join){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Join.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Join.length, byteBuffer);
        for(let v of m.Join){
            if(Encode_GMDT_AMS_JOIN(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.Integral, byteBuffer);
    NetData.NetWriteInt32(m.RuleVar, byteBuffer);
    NetData.NetWriteInt32(m.TotalJoin, byteBuffer);
    NetData.NetWriteInt32(m.TotalLimit, byteBuffer);
    if(!m.Exchange){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Exchange.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Exchange.length, byteBuffer);
        for(let v of m.Exchange){
            if(Encode_GMDT_AMS_EXCHANGE(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.TodayIntegral, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_JOIN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Ticket = NetData.NetReadString(byteBuffer, P.PT_CONST_1000, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_JOIN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    if(NetData.NetWriteString(m.Ticket, P.PT_CONST_1000, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_AMS_JOIN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RuleVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfJoin > P.PT_AMS_MAX){return false;}
    m.Join = [];
    for(let i = 0; i < sizeOfJoin; i++){
        let v = {};
        if(Decode_GMDT_AMS_JOIN(byteBuffer, v) == false){
            return false;
        }
        m.Join.push(v);
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    m.ActTotalJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_JOIN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteInt32(m.RuleVar, byteBuffer);
    if(!m.Join){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Join.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Join.length, byteBuffer);
        for(let v of m.Join){
            if(Encode_GMDT_AMS_JOIN(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.ActTotalJoin, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_FEN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Ticket = NetData.NetReadString(byteBuffer, P.PT_CONST_1000, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_FEN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteInt32(m.Num, byteBuffer);
    if(NetData.NetWriteString(m.Ticket, P.PT_CONST_1000, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_AMS_FEN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RuleVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfJoin > P.PT_AMS_MAX){return false;}
    m.Join = [];
    for(let i = 0; i < sizeOfJoin; i++){
        let v = {};
        if(Decode_GMDT_AMS_JOIN(byteBuffer, v) == false){
            return false;
        }
        m.Join.push(v);
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_AMS_FEN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteInt32(m.RuleVar, byteBuffer);
    NetData.NetWriteUint8(m.ID, byteBuffer);
    if(!m.Join){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Join.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Join.length, byteBuffer);
        for(let v of m.Join){
            if(Encode_GMDT_AMS_JOIN(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_AMS_TREASURY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_TREASURY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteUint8(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_TREASURY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RuleVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfJoin > P.PT_AMS_MAX){return false;}
    m.Join = [];
    for(let i = 0; i < sizeOfJoin; i++){
        let v = {};
        if(Decode_GMDT_AMS_JOIN(byteBuffer, v) == false){
            return false;
        }
        m.Join.push(v);
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    m.Integral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_TREASURY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteInt32(m.RuleVar, byteBuffer);
    NetData.NetWriteUint8(m.ID, byteBuffer);
    if(!m.Join){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Join.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Join.length, byteBuffer);
        for(let v of m.Join){
            if(Encode_GMDT_AMS_JOIN(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.Integral, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_RANK_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_RANK_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMDT_AMS_RANK_MEMBER = function(byteBuffer, m){
    var ret = {err : false};
    m.Rank = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Icon = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Avatar = NetData.NetReadString(byteBuffer, P.PT_MAX_AVATAR_LEN, ret);
    if(ret.err){return false;}

    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Integral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TodayIntegral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_AMS_RANK_MEMBER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Rank, byteBuffer);
    NetData.NetWriteUint16(m.Icon, byteBuffer);
    if(NetData.NetWriteString(m.Avatar, P.PT_MAX_AVATAR_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Integral, byteBuffer);
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    NetData.NetWriteInt32(m.TodayIntegral, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_RANK_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MyMember = {};
    if(Decode_GMDT_AMS_RANK_MEMBER(byteBuffer, m.MyMember) == false){
        return false;
    }

    let sizeOfMembers = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMembers > P.PT_AMS_RANK_MAX){return false;}
    m.Members = [];
    for(let i = 0; i < sizeOfMembers; i++){
        let v = {};
        if(Decode_GMDT_AMS_RANK_MEMBER(byteBuffer, v) == false){
            return false;
        }
        m.Members.push(v);
    }

    return true;
}

var Encode_GMPKG_AMS_RANK_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    if(Encode_GMDT_AMS_RANK_MEMBER(m.MyMember, byteBuffer) == false){
        return false;
    }
    if(!m.Members){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Members.length > P.PT_AMS_RANK_MAX){return false;}
        NetData.NetWriteInt32(m.Members.length, byteBuffer);
        for(let v of m.Members){
            if(Encode_GMDT_AMS_RANK_MEMBER(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_AMS_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_ACT_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_ACT_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_RCG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_RCG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_RCG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfJoin > P.PT_AMS_MAX){return false;}
    m.Join = [];
    for(let i = 0; i < sizeOfJoin; i++){
        let v = {};
        if(Decode_GMDT_AMS_JOIN(byteBuffer, v) == false){
            return false;
        }
        m.Join.push(v);
    }

    m.RechargeID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_RCG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    if(!m.Join){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Join.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Join.length, byteBuffer);
        for(let v of m.Join){
            if(Encode_GMDT_AMS_JOIN(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint16(m.RechargeID, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_RCG_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfJoin > P.PT_AMS_MAX){return false;}
    m.Join = [];
    for(let i = 0; i < sizeOfJoin; i++){
        let v = {};
        if(Decode_GMDT_AMS_JOIN(byteBuffer, v) == false){
            return false;
        }
        m.Join.push(v);
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    m.RuleVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_RCG_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    if(!m.Join){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Join.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Join.length, byteBuffer);
        for(let v of m.Join){
            if(Encode_GMDT_AMS_JOIN(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.RuleVar, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_VAST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_VAST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteInt32(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_VAST_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RuleVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TotalLimit = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_AMS_VAST_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteInt32(m.RuleVar, byteBuffer);
    NetData.NetWriteInt32(m.TotalJoin, byteBuffer);
    NetData.NetWriteInt32(m.TotalLimit, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_AMS_TYPE_ACTID_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_TYPE_ACTID_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_TYPE_ACTID = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_TYPE_ACTID = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_TYPE_ACTID_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfActidList = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfActidList > P.PT_AMS_MAX){return false;}
    m.ActidList = [];
    for(let i = 0; i < sizeOfActidList; i++){
        let v = {};
        if(Decode_GMPKG_AMS_TYPE_ACTID(byteBuffer, v) == false){
            return false;
        }
        m.ActidList.push(v);
    }

    return true;
}

var Encode_GMPKG_AMS_TYPE_ACTID_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.ActidList){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ActidList.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.ActidList.length, byteBuffer);
        for(let v of m.ActidList){
            if(Encode_GMPKG_AMS_TYPE_ACTID(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_AMS_HONGBAO_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_HONGBAO_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_HONGBAO_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Integral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RuleVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfJoin > P.PT_AMS_MAX){return false;}
    m.Join = [];
    for(let i = 0; i < sizeOfJoin; i++){
        let v = {};
        if(Decode_GMDT_AMS_JOIN(byteBuffer, v) == false){
            return false;
        }
        m.Join.push(v);
    }

    m.TotalJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_AMS_HONGBAO_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteInt32(m.Integral, byteBuffer);
    NetData.NetWriteInt32(m.RuleVar, byteBuffer);
    if(!m.Join){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Join.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Join.length, byteBuffer);
        for(let v of m.Join){
            if(Encode_GMDT_AMS_JOIN(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.TotalJoin, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_AMS_HONGBAO_EXCHANGE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Index = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_HONGBAO_EXCHANGE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteUint16(m.Index, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_HONGBAO_EXCHANGE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Integral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    let sizeOfExchange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfExchange > P.PT_AMS_MAX){return false;}
    m.Exchange = [];
    for(let i = 0; i < sizeOfExchange; i++){
        let v = {};
        if(Decode_GMDT_AMS_EXCHANGE(byteBuffer, v) == false){
            return false;
        }
        m.Exchange.push(v);
    }

    return true;
}

var Encode_GMPKG_AMS_HONGBAO_EXCHANGE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteInt32(m.Integral, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.Exchange){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Exchange.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Exchange.length, byteBuffer);
        for(let v of m.Exchange){
            if(Encode_GMDT_AMS_EXCHANGE(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_AMS_INTEGRAL_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Integral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.TodayIntegral = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_INTEGRAL_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteInt32(m.Integral, byteBuffer);
    NetData.NetWriteInt32(m.TodayIntegral, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_WEEKFUND_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_AMS_WEEKFUND_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteUint8(m.Day, byteBuffer);

    return true;
}

var Decode_GMPKG_AMS_WEEKFUND_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Actid = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Day = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RuleVar = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfJoin > P.PT_AMS_MAX){return false;}
    m.Join = [];
    for(let i = 0; i < sizeOfJoin; i++){
        let v = {};
        if(Decode_GMDT_AMS_JOIN(byteBuffer, v) == false){
            return false;
        }
        m.Join.push(v);
    }

    m.TotalJoin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_AMS_WEEKFUND_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint32(m.Actid, byteBuffer);
    NetData.NetWriteUint8(m.Day, byteBuffer);
    NetData.NetWriteInt32(m.RuleVar, byteBuffer);
    if(!m.Join){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Join.length > P.PT_AMS_MAX){return false;}
        NetData.NetWriteInt32(m.Join.length, byteBuffer);
        for(let v of m.Join){
            if(Encode_GMDT_AMS_JOIN(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.TotalJoin, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_MEMBER_PIECE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_PIECE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_PIECE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PieceCryStal = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfPiece = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfPiece > P.PT_MEMBER_PIECE_MAX){return false;}
    m.Piece = [];
    for(let i = 0; i < sizeOfPiece; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Piece.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_PIECE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.PieceCryStal, byteBuffer);
    if(!m.Piece){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Piece.length > P.PT_MEMBER_PIECE_MAX){return false;}
        NetData.NetWriteInt32(m.Piece.length, byteBuffer);
        for(let v of m.Piece){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_MEMBER_PIECE_BREAK_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_PIECE_BREAK_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_PIECE_BREAK_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PieceCryStal = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PieceCryStalChg = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfPiece = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfPiece > P.PT_MEMBER_PIECE_MAX){return false;}
    m.Piece = [];
    for(let i = 0; i < sizeOfPiece; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Piece.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_PIECE_BREAK_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.PieceCryStal, byteBuffer);
    NetData.NetWriteInt32(m.PieceCryStalChg, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Piece){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Piece.length > P.PT_MEMBER_PIECE_MAX){return false;}
        NetData.NetWriteInt32(m.Piece.length, byteBuffer);
        for(let v of m.Piece){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_MEMBER_PIECE_COM_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MEMBER_PIECE_COM_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteUint8(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_MEMBER_PIECE_COM_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfShowItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfShowItem > P.PT_BAG_MAX_SIZE){return false;}
    m.ShowItem = [];
    for(let i = 0; i < sizeOfShowItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ShowItem.push(v);
    }

    return true;
}

var Encode_GMPKG_MEMBER_PIECE_COM_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.ShowItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ShowItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ShowItem.length, byteBuffer);
        for(let v of m.ShowItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GIFT_CARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Code = NetData.NetReadString(byteBuffer, P.PT_CARD_CODE_MAX, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GIFT_CARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(NetData.NetWriteString(m.Code, P.PT_CARD_CODE_MAX, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_GIFT_CARD_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Status = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_GIFT_CARD_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Status, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GIFT_CARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_GIFT_CARD_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_GIFT_CARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_GIFT_CARD_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLEEQUIP_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_ROLEEQUIP_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.Bag = {};
    if(Decode_GMDT_ROLEEQUIP_BAG(byteBuffer, m.Bag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_ROLEEQUIP_BAG(m.Bag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_PUTON_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.OffSlot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.OnSlot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLEEQUIP_PUTON_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.OffSlot, byteBuffer);
    NetData.NetWriteUint16(m.OnSlot, byteBuffer);

    return true;
}

var Decode_GMDT_ROLEEQUIP_PUTON_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.OnEquip = {};
    if(Decode_GMDT_ROLEEQUIP(byteBuffer, m.OnEquip) == false){
        return false;
    }

    m.OffEquip = {};
    if(Decode_GMDT_ROLEEQUIP(byteBuffer, m.OffEquip) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_ROLEEQUIP_PUTON_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_ROLEEQUIP(m.OnEquip, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ROLEEQUIP(m.OffEquip, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_PUTON_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ROLEEQUIP_PUTON_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_PUTON_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ROLEEQUIP_PUTON_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_PUTOFF_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.OnSlot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLEEQUIP_PUTOFF_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.OnSlot, byteBuffer);

    return true;
}

var Decode_GMDT_ROLEEQUIP_PUTOFF_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.OnSlot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.OffEquip = {};
    if(Decode_GMDT_ROLEEQUIP(byteBuffer, m.OffEquip) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_ROLEEQUIP_PUTOFF_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.OnSlot, byteBuffer);
    if(Encode_GMDT_ROLEEQUIP(m.OffEquip, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_PUTOFF_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ROLEEQUIP_PUTOFF_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_PUTOFF_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ROLEEQUIP_PUTOFF_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_LINGWU_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLEEQUIP_LINGWU_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_ROLEEQUIP_LINGWU_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.LingWuLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ROLEEQUIP_LINGWU_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.LingWuLevel, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMPKG_ROLEEQUIP_LINGWU_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ROLEEQUIP_LINGWU_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_LINGWU_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ROLEEQUIP_LINGWU_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_SPLIT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSlots = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSlots > P.PT_ROLEEQUIP_BAG_MAX){return false;}
    m.Slots = [];
    for(let i = 0; i < sizeOfSlots; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.Slots.push(v);
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_SPLIT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    if(!m.Slots){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Slots.length > P.PT_ROLEEQUIP_BAG_MAX){return false;}
        NetData.NetWriteInt32(m.Slots.length, byteBuffer);
        for(let v of m.Slots){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMDT_ROLEEQUIP_SPLIT_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGetItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItems > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItems = [];
    for(let i = 0; i < sizeOfGetItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItems.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfOffEquips = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfOffEquips > P.PT_ROLEEQUIP_BAG_MAX){return false;}
    m.OffEquips = [];
    for(let i = 0; i < sizeOfOffEquips; i++){
        let v = {};
        if(Decode_GMDT_ROLEEQUIP(byteBuffer, v) == false){
            return false;
        }
        m.OffEquips.push(v);
    }

    return true;
}

var Encode_GMDT_ROLEEQUIP_SPLIT_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(!m.GetItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItems.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItems.length, byteBuffer);
        for(let v of m.GetItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.OffEquips){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.OffEquips.length > P.PT_ROLEEQUIP_BAG_MAX){return false;}
        NetData.NetWriteInt32(m.OffEquips.length, byteBuffer);
        for(let v of m.OffEquips){
            if(Encode_GMDT_ROLEEQUIP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_SPLIT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ROLEEQUIP_SPLIT_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_SPLIT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ROLEEQUIP_SPLIT_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_CHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfEquips = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfEquips > P.PT_ROLEEQUIP_BAG_MAX){return false;}
    m.Equips = [];
    for(let i = 0; i < sizeOfEquips; i++){
        let v = {};
        if(Decode_GMDT_ROLEEQUIP(byteBuffer, v) == false){
            return false;
        }
        m.Equips.push(v);
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_CHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Equips){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Equips.length > P.PT_ROLEEQUIP_BAG_MAX){return false;}
        NetData.NetWriteInt32(m.Equips.length, byteBuffer);
        for(let v of m.Equips){
            if(Encode_GMDT_ROLEEQUIP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_COMPOSE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.PieceID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLEEQUIP_COMPOSE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.PieceID, byteBuffer);

    return true;
}

var Decode_GMDT_ROLEEQUIP_COMPOSE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleEquipID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_ROLEEQUIP_COMPOSE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    NetData.NetWriteUint16(m.RoleEquipID, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_COMPOSE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ROLEEQUIP_COMPOSE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_COMPOSE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ROLEEQUIP_COMPOSE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_GEM_UPGRADE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Slot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLEEQUIP_GEM_UPGRADE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Slot, byteBuffer);

    return true;
}

var Decode_GMDT_ROLEEQUIP_GEM_UPGRADE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Slot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_ROLEEQUIP_GEM_UPGRADE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Slot, byteBuffer);
    NetData.NetWriteUint8(m.Level, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_GEM_UPGRADE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ROLEEQUIP_GEM_UPGRADE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_GEM_UPGRADE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ROLEEQUIP_GEM_UPGRADE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_GEM_COMPOSE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Level = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLEEQUIP_GEM_COMPOSE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);

    return true;
}

var Decode_GMDT_ROLEEQUIP_GEM_COMPOSE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Success = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.GemLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_ROLEEQUIP_GEM_COMPOSE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Success, byteBuffer);
    NetData.NetWriteUint16(m.GemLevel, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_GEM_COMPOSE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ROLEEQUIP_GEM_COMPOSE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_GEM_COMPOSE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ROLEEQUIP_GEM_COMPOSE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_QIANGHUA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Slot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLEEQUIP_QIANGHUA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Slot, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMDT_ROLEEQUIP_QIANGHUA_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Slot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_ROLEEQUIP_QIANGHUA_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Slot, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_QIANGHUA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_ROLEEQUIP_QIANGHUA_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_QIANGHUA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_ROLEEQUIP_QIANGHUA_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_ROLEEQUIP_GEM_COMTEN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Level = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ROLEEQUIP_GEM_COMTEN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);

    return true;
}

var Decode_GMPKG_ROLEEQUIP_GEM_COMTEN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.SuccessCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGetItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItems > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItems = [];
    for(let i = 0; i < sizeOfGetItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItems.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_ROLEEQUIP_GEM_COMTEN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.SuccessCount, byteBuffer);
    if(!m.GetItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItems.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItems.length, byteBuffer);
        for(let v of m.GetItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_NEBULA_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NEBULA_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_NEBULA_USR_TO_ROB = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RateID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.CombatPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGuaZais = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGuaZais > P.PT_GUAZAI_MAX_COUNT){return false;}
    m.GuaZais = [];
    for(let i = 0; i < sizeOfGuaZais; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.GuaZais.push(v);
    }

    m.Icon = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_NEBULA_USR_TO_ROB = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.RateID, byteBuffer);
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.CombatPoint, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    if(!m.GuaZais){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GuaZais.length > P.PT_GUAZAI_MAX_COUNT){return false;}
        NetData.NetWriteInt32(m.GuaZais.length, byteBuffer);
        for(let v of m.GuaZais){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }
    NetData.NetWriteUint16(m.Icon, byteBuffer);

    return true;
}

var Decode_GMDT_NEBULA_ROB_LIST = function(byteBuffer, m){
    var ret = {err : false};
    m.Material = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRobList = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRobList > P.PT_NEBULA_ROB_LIST_COUNT){return false;}
    m.RobList = [];
    for(let i = 0; i < sizeOfRobList; i++){
        let v = {};
        if(Decode_GMDT_NEBULA_USR_TO_ROB(byteBuffer, v) == false){
            return false;
        }
        m.RobList.push(v);
    }

    return true;
}

var Encode_GMDT_NEBULA_ROB_LIST = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Material, byteBuffer);
    if(!m.RobList){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RobList.length > P.PT_NEBULA_ROB_LIST_COUNT){return false;}
        NetData.NetWriteInt32(m.RobList.length, byteBuffer);
        for(let v of m.RobList){
            if(Encode_GMDT_NEBULA_USR_TO_ROB(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_NEBULA_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.Energy = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_NEBULA_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Energy, byteBuffer);
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);

    return true;
}

var Decode_GMPKG_NEBULA_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.Bag = {};
    if(Decode_GMDT_NEBULA_BAG(byteBuffer, m.Bag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_NEBULA_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_NEBULA_BAG(m.Bag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_NEBULA_MINE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Num = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NEBULA_MINE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Num, byteBuffer);

    return true;
}

var Decode_GMDT_NEBULA_MINE_OK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfGetItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItems > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItems = [];
    for(let i = 0; i < sizeOfGetItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItems.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_NEBULA_MINE_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.GetItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItems.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItems.length, byteBuffer);
        for(let v of m.GetItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_NEBULA_MINE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_NEBULA_MINE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_NEBULA_MINE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_NEBULA_MINE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_NEBULA_OPENCHEST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ChestID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NEBULA_OPENCHEST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ChestID, byteBuffer);

    return true;
}

var Decode_GMDT_NEBULA_OPENCHEST_OK = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfGetItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItems > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItems = [];
    for(let i = 0; i < sizeOfGetItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItems.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ZiZuan = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_NEBULA_OPENCHEST_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.GetItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItems.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItems.length, byteBuffer);
        for(let v of m.GetItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    NetData.NetWriteInt32(m.ZiZuan, byteBuffer);

    return true;
}

var Decode_GMPKG_NEBULA_OPENCHEST_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_NEBULA_OPENCHEST_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_NEBULA_OPENCHEST_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_NEBULA_OPENCHEST_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_NEBULA_ROB_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Material = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NEBULA_ROB_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Material, byteBuffer);
    NetData.NetWriteUint8(m.Pos, byteBuffer);
    NetData.NetWriteUint8(m.Num, byteBuffer);

    return true;
}

var Decode_GMDT_NEBULA_ROB_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RobItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RobItemCount = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    m.List = {};
    if(Decode_GMDT_NEBULA_ROB_LIST(byteBuffer, m.List) == false){
        return false;
    }

    m.Energy = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_NEBULA_ROB_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Result, byteBuffer);
    NetData.NetWriteUint16(m.RobItemID, byteBuffer);
    NetData.NetWriteInt32(m.RobItemCount, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_NEBULA_ROB_LIST(m.List, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Energy, byteBuffer);
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_NEBULA_ROB_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_NEBULA_ROB_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_NEBULA_ROB_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_NEBULA_ROB_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_NEBULA_ROB_LIST_REFRESH_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Material = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NEBULA_ROB_LIST_REFRESH_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Material, byteBuffer);

    return true;
}

var Decode_GMDT_NEBULA_ROB_LIST_REFRESH_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.List = {};
    if(Decode_GMDT_NEBULA_ROB_LIST(byteBuffer, m.List) == false){
        return false;
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_NEBULA_ROB_LIST_REFRESH_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_NEBULA_ROB_LIST(m.List, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMPKG_NEBULA_ROB_LIST_REFRESH_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_NEBULA_ROB_LIST_REFRESH_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_NEBULA_ROB_LIST_REFRESH_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_NEBULA_ROB_LIST_REFRESH_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_NEBULA_ROB_LIST_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Material = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NEBULA_ROB_LIST_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Material, byteBuffer);

    return true;
}

var Decode_GMDT_NEBULA_ROB_LIST_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.List = {};
    if(Decode_GMDT_NEBULA_ROB_LIST(byteBuffer, m.List) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_NEBULA_ROB_LIST_OK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_NEBULA_ROB_LIST(m.List, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_NEBULA_ROB_LIST_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_NEBULA_ROB_LIST_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_NEBULA_ROB_LIST_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_NEBULA_ROB_LIST_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_NEBULA_BUYENERGY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NEBULA_BUYENERGY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_NEBULA_BUYENERGY_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Energy = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_NEBULA_BUYENERGY_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Energy, byteBuffer);
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMPKG_NEBULA_BUYENERGY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_NEBULA_BUYENERGY_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_NEBULA_BUYENERGY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_NEBULA_BUYENERGY_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_NEBULA_NERGY_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Energy = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NEBULA_NERGY_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Energy, byteBuffer);
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);

    return true;
}

var Decode_GMPKG_NEBULA_ZIZUAN_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ZiZuan = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NEBULA_ZIZUAN_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ZiZuan, byteBuffer);

    return true;
}

var Decode_GMPKG_HEROCAMP_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCAMP_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_HEROCAMP = function(byteBuffer, m){
    var ret = {err : false};
    m.CampID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_HEROCAMP = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.CampID, byteBuffer);
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    NetData.NetWriteUint8(m.BuyCount, byteBuffer);

    return true;
}

var Decode_GMDT_HEROCAMP_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.HeroSP = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyHeroSP = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.PassCampID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfCamps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfCamps > P.PT_HEROCAMP_COUNT){return false;}
    m.Camps = [];
    for(let i = 0; i < sizeOfCamps; i++){
        let v = {};
        if(Decode_GMDT_HEROCAMP(byteBuffer, v) == false){
            return false;
        }
        m.Camps.push(v);
    }

    return true;
}

var Encode_GMDT_HEROCAMP_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.HeroSP, byteBuffer);
    NetData.NetWriteUint8(m.BuyHeroSP, byteBuffer);
    NetData.NetWriteUint16(m.PassCampID, byteBuffer);
    if(!m.Camps){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Camps.length > P.PT_HEROCAMP_COUNT){return false;}
        NetData.NetWriteInt32(m.Camps.length, byteBuffer);
        for(let v of m.Camps){
            if(Encode_GMDT_HEROCAMP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_HEROCAMP_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampBag = {};
    if(Decode_GMDT_HEROCAMP_BAG(byteBuffer, m.CampBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_HEROCAMP_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_HEROCAMP_BAG(m.CampBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_HEROCAMP_BEGIN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.CampID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCAMP_BEGIN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampID, byteBuffer);

    return true;
}

var Decode_GMDT_HEROCAMP_BEGIN_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Seed = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChuZhanConf = {};
    if(Decode_GMDT_CHUZHAN_CONF(byteBuffer, m.ChuZhanConf) == false){
        return false;
    }

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_HEROCAMP_BEGIN_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampID, byteBuffer);
    NetData.NetWriteUint32(m.Seed, byteBuffer);
    if(Encode_GMDT_CHUZHAN_CONF(m.ChuZhanConf, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_HEROCAMP_BEGIN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_HEROCAMP_BEGIN_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_HEROCAMP_BEGIN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_HEROCAMP_BEGIN_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_HEROCAMP_END_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCAMP_END_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Result, byteBuffer);

    return true;
}

var Decode_GMDT_HEROCAMP_WIN = function(byteBuffer, m){
    var ret = {err : false};
    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.HeroSP = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.FirstRewardFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfFirstRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfFirstRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.FirstRewardItem = [];
    for(let i = 0; i < sizeOfFirstRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.FirstRewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    m.RewardGold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_HEROCAMP_WIN = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    NetData.NetWriteUint16(m.HeroSP, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.FirstRewardFlag, byteBuffer);
    if(!m.FirstRewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.FirstRewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.FirstRewardItem.length, byteBuffer);
        for(let v of m.FirstRewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.RewardGold, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);

    return true;
}

var Decode_GMDT_HEROCAMP_RESULT_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CampID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.Result == P.PT_CAMP_RESULT_WIN){
    m.Win = {};
    if(Decode_GMDT_HEROCAMP_WIN(byteBuffer, m.Win) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMDT_HEROCAMP_RESULT_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Result, byteBuffer);
    NetData.NetWriteUint16(m.CampID, byteBuffer);
    if(m.Result == P.PT_CAMP_RESULT_WIN){
    if(Encode_GMDT_HEROCAMP_WIN(m.Win, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_HEROCAMP_END_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_HEROCAMP_RESULT_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_HEROCAMP_END_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_HEROCAMP_RESULT_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_HEROCAMP_QUIT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Flag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCAMP_QUIT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Flag, byteBuffer);

    return true;
}

var Decode_GMPKG_HEROCAMP_QUIT_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCAMP_QUIT_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_HEROCAMP_REVIVE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ReveiveTime = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCAMP_REVIVE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ReveiveTime, byteBuffer);

    return true;
}

var Decode_GMDT_HEROCAMP_REVIVE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.ReveiveTime = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_HEROCAMP_REVIVE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ReveiveTime, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMPKG_HEROCAMP_REVIVE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_HEROCAMP_REVIVE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_HEROCAMP_REVIVE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_HEROCAMP_REVIVE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_HEROCAMP_SAODANG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.CampID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCAMP_SAODANG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.CampID, byteBuffer);

    return true;
}

var Decode_GMDT_HEROCAMP_SAODANG_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.HeroSP = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    m.RewardGold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_HEROCAMP_SAODANG_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.CampID, byteBuffer);
    NetData.NetWriteUint16(m.HeroSP, byteBuffer);
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.RewardGold, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);

    return true;
}

var Decode_GMPKG_HEROCAMP_SAODANG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_HEROCAMP_SAODANG_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_HEROCAMP_SAODANG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_HEROCAMP_SAODANG_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_HEROCHEST_OPEN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.CampID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCHEST_OPEN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.CampID, byteBuffer);

    return true;
}

var Decode_GMDT_HEROCHEST_OPEN_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_HEROCHEST_OPEN_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.CampID, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_HEROCHEST_OPEN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_HEROCHEST_OPEN_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_HEROCHEST_OPEN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_HEROCHEST_OPEN_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_HEROCAMP_BUYCOUNT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.CampID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCAMP_BUYCOUNT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.CampID, byteBuffer);

    return true;
}

var Decode_GMDT_HEROCAMP_BUYCOUNT_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.CampID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_HEROCAMP_BUYCOUNT_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.CampID, byteBuffer);
    NetData.NetWriteUint8(m.BuyCount, byteBuffer);
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMPKG_HEROCAMP_BUYCOUNT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_HEROCAMP_BUYCOUNT_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_HEROCAMP_BUYCOUNT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_HEROCAMP_BUYCOUNT_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_HEROCAMP_BUYSP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCAMP_BUYSP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_HEROCAMP_BUYSP_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.HeroSP = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_HEROCAMP_BUYSP_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.HeroSP, byteBuffer);
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMPKG_HEROCAMP_BUYSP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_HEROCAMP_BUYSP_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_HEROCAMP_BUYSP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_HEROCAMP_BUYSP_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_HEROCAMP_SPCHANGE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.HeroSP = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HEROCAMP_SPCHANGE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.HeroSP, byteBuffer);

    return true;
}

var Decode_GMPKG_HEROCAMP_ACTIVE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.CampBag = {};
    if(Decode_GMDT_HEROCAMP_BAG(byteBuffer, m.CampBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_HEROCAMP_ACTIVE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_HEROCAMP_BAG(m.CampBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MIBAO_STORE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MIBAO_STORE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_MIBAO_STORE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Item = {};
    if(Decode_GMDT_ITEM_COUNT(byteBuffer, m.Item) == false){
        return false;
    }

    m.TodayCZ = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MIBAO_STORE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    if(Encode_GMDT_ITEM_COUNT(m.Item, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.TodayCZ, byteBuffer);

    return true;
}

var Decode_GMPKG_MIBAO_STORE_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MIBAO_STORE_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_MIBAO_STORE_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItemShow = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemShow > P.PT_BAG_MAX_SIZE){return false;}
    m.ItemShow = [];
    for(let i = 0; i < sizeOfItemShow; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemShow.push(v);
    }

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Item = {};
    if(Decode_GMDT_ITEM_COUNT(byteBuffer, m.Item) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MIBAO_STORE_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.ItemShow){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemShow.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ItemShow.length, byteBuffer);
        for(let v of m.ItemShow){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    if(Encode_GMDT_ITEM_COUNT(m.Item, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_VIP_STORE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_VIP_STORE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_VIP_STORE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Item = {};
    if(Decode_GMDT_ITEM_COUNT(byteBuffer, m.Item) == false){
        return false;
    }

    m.TodayCZ = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_VIP_STORE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    if(Encode_GMDT_ITEM_COUNT(m.Item, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.TodayCZ, byteBuffer);

    return true;
}

var Decode_GMPKG_VIP_STORE_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_VIP_STORE_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_VIP_STORE_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItemShow = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemShow > P.PT_BAG_MAX_SIZE){return false;}
    m.ItemShow = [];
    for(let i = 0; i < sizeOfItemShow; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemShow.push(v);
    }

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Item = {};
    if(Decode_GMDT_ITEM_COUNT(byteBuffer, m.Item) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_VIP_STORE_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.ItemShow){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemShow.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ItemShow.length, byteBuffer);
        for(let v of m.ItemShow){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    if(Encode_GMDT_ITEM_COUNT(m.Item, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_WAR_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_WAR_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_WAR_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Floor = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastFloor = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastCurPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReward > P.PT_WAR_REWARD_FLAG_SIZE){return false;}
    m.Reward = [];
    for(let i = 0; i < sizeOfReward; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Reward.push(v);
    }

    m.Point = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_WAR_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Floor, byteBuffer);
    NetData.NetWriteUint8(m.CurPos, byteBuffer);
    NetData.NetWriteUint8(m.LastFloor, byteBuffer);
    NetData.NetWriteUint8(m.LastCurPos, byteBuffer);
    NetData.NetWriteInt32(m.BuyTimes, byteBuffer);
    if(!m.Reward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Reward.length > P.PT_WAR_REWARD_FLAG_SIZE){return false;}
        NetData.NetWriteInt32(m.Reward.length, byteBuffer);
        for(let v of m.Reward){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteInt32(m.Point, byteBuffer);

    return true;
}

var Decode_GMPKG_WAR_START_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_WAR_START_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Pos, byteBuffer);

    return true;
}

var Decode_GMPKG_WAR_START_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Seed = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChuZhanConf = {};
    if(Decode_GMDT_CHUZHAN_CONF(byteBuffer, m.ChuZhanConf) == false){
        return false;
    }

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_WAR_START_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Pos, byteBuffer);
    NetData.NetWriteUint32(m.Seed, byteBuffer);
    if(Encode_GMDT_CHUZHAN_CONF(m.ChuZhanConf, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_WAR_END_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_WAR_END_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Result, byteBuffer);

    return true;
}

var Decode_GMPKG_WAR_END_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_WAR_END_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Pos, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_WAR_QUIT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Flag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_WAR_QUIT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Flag, byteBuffer);

    return true;
}

var Decode_GMPKG_WAR_QUIT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_WAR_QUIT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_WAR_SAODANG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_WAR_SAODANG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Pos, byteBuffer);

    return true;
}

var Decode_GMPKG_WAR_SAODANG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_WAR_SAODANG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Pos, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_WAR_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_WAR_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_WAR_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Floor = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CurPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastFloor = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.LastCurPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReward > P.PT_WAR_REWARD_FLAG_SIZE){return false;}
    m.Reward = [];
    for(let i = 0; i < sizeOfReward; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Reward.push(v);
    }

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_WAR_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Floor, byteBuffer);
    NetData.NetWriteUint8(m.CurPos, byteBuffer);
    NetData.NetWriteUint8(m.LastFloor, byteBuffer);
    NetData.NetWriteUint8(m.LastCurPos, byteBuffer);
    if(!m.Reward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Reward.length > P.PT_WAR_REWARD_FLAG_SIZE){return false;}
        NetData.NetWriteInt32(m.Reward.length, byteBuffer);
        for(let v of m.Reward){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_WAR_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_WAR_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_WAR_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGetItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItem > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItem = [];
    for(let i = 0; i < sizeOfGetItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_WAR_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.BuyTimes, byteBuffer);
    if(!m.GetItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItem.length, byteBuffer);
        for(let v of m.GetItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_WAR_POINT_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Point = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_WAR_POINT_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Point, byteBuffer);

    return true;
}

var Decode_GMPKG_ZIZUAN_GIFT_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ZIZUAN_GIFT_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_ZIZUAN_GIFT = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_ZIZUAN_GIFT = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteInt32(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_ZIZUAN_GIFT_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGift = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGift > P.PT_ZIZUAN_GIFT_LIMIT_MAX){return false;}
    m.Gift = [];
    for(let i = 0; i < sizeOfGift; i++){
        let v = {};
        if(Decode_GMDT_ZIZUAN_GIFT(byteBuffer, v) == false){
            return false;
        }
        m.Gift.push(v);
    }

    m.Exchanged = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ZIZUAN_GIFT_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Gift){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Gift.length > P.PT_ZIZUAN_GIFT_LIMIT_MAX){return false;}
        NetData.NetWriteInt32(m.Gift.length, byteBuffer);
        for(let v of m.Gift){
            if(Encode_GMDT_ZIZUAN_GIFT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.Exchanged, byteBuffer);

    return true;
}

var Decode_GMPKG_ZIZUAN_GIFT_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ZIZUAN_GIFT_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteInt32(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_ZIZUAN_GIFT_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ZiZuan = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGift = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGift > P.PT_ZIZUAN_GIFT_LIMIT_MAX){return false;}
    m.Gift = [];
    for(let i = 0; i < sizeOfGift; i++){
        let v = {};
        if(Decode_GMDT_ZIZUAN_GIFT(byteBuffer, v) == false){
            return false;
        }
        m.Gift.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_ZIZUAN_GIFT_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.ZiZuan, byteBuffer);
    if(!m.Gift){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Gift.length > P.PT_ZIZUAN_GIFT_LIMIT_MAX){return false;}
        NetData.NetWriteInt32(m.Gift.length, byteBuffer);
        for(let v of m.Gift){
            if(Encode_GMDT_ZIZUAN_GIFT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_ZIZUAN_EXCHANGE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ZIZUAN_EXCHANGE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_ZIZUAN_EXCHANGE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ZiZuan = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Exchanged = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_ZIZUAN_EXCHANGE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.ZiZuan, byteBuffer);
    NetData.NetWriteInt32(m.Exchanged, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMDT_RANK_MEMBER = function(byteBuffer, m){
    var ret = {err : false};
    m.Icon = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Avatar = NetData.NetReadString(byteBuffer, P.PT_MAX_AVATAR_LEN, ret);
    if(ret.err){return false;}

    m.Rank = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleName = NetData.NetReadString(byteBuffer, P.PT_MAX_ROLENAME_LEN, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.CombatMax = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCZ = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndlessMaxScore = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndlessRankID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.HeroCampID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.WarFloor = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.WarPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildBoom = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChessIntegration = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuildName = NetData.NetReadString(byteBuffer, P.PT_MAX_GUILDNAME_LEN, ret);
    if(ret.err){return false;}

    m.DianZan = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_RANK_MEMBER = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.Icon, byteBuffer);
    if(NetData.NetWriteString(m.Avatar, P.PT_MAX_AVATAR_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.Rank, byteBuffer);
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(NetData.NetWriteString(m.RoleName, P.PT_MAX_ROLENAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.Level, byteBuffer);
    NetData.NetWriteInt32(m.CombatMax, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCZ, byteBuffer);
    NetData.NetWriteUint64(m.EndlessMaxScore, byteBuffer);
    NetData.NetWriteUint8(m.EndlessRankID, byteBuffer);
    NetData.NetWriteUint16(m.HeroCampID, byteBuffer);
    NetData.NetWriteUint8(m.WarFloor, byteBuffer);
    NetData.NetWriteUint8(m.WarPos, byteBuffer);
    NetData.NetWriteInt32(m.BuildBoom, byteBuffer);
    NetData.NetWriteUint32(m.ChessIntegration, byteBuffer);
    if(NetData.NetWriteString(m.GuildName, P.PT_MAX_GUILDNAME_LEN, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint32(m.DianZan, byteBuffer);

    return true;
}

var Decode_GMPKG_RANK_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_RANK_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMDT_RANK_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.MySelf = {};
    if(Decode_GMDT_RANK_MEMBER(byteBuffer, m.MySelf) == false){
        return false;
    }

    let sizeOfMembers = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMembers > P.PT_RANK_MEMBER_MAX){return false;}
    m.Members = [];
    for(let i = 0; i < sizeOfMembers; i++){
        let v = {};
        if(Decode_GMDT_RANK_MEMBER(byteBuffer, v) == false){
            return false;
        }
        m.Members.push(v);
    }

    return true;
}

var Encode_GMDT_RANK_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    if(Encode_GMDT_RANK_MEMBER(m.MySelf, byteBuffer) == false){
        return false;
    }
    if(!m.Members){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Members.length > P.PT_RANK_MEMBER_MAX){return false;}
        NetData.NetWriteInt32(m.Members.length, byteBuffer);
        for(let v of m.Members){
            if(Encode_GMDT_RANK_MEMBER(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_RANK_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_RANK_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    let sizeOfFlags = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfFlags > P.PT_RANK_DIANZAN_MAX){return false;}
    m.Flags = [];
    for(let i = 0; i < sizeOfFlags; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Flags.push(v);
    }

    return true;
}

var Encode_GMPKG_RANK_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_RANK_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }
    if(!m.Flags){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Flags.length > P.PT_RANK_DIANZAN_MAX){return false;}
        NetData.NetWriteInt32(m.Flags.length, byteBuffer);
        for(let v of m.Flags){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_RANK_DIANZAN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_RANK_DIANZAN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Type, byteBuffer);
    NetData.NetWriteUint64(m.RoleID, byteBuffer);

    return true;
}

var Decode_GMPKG_RANK_DIANZAN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RoleID = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfFlags = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfFlags > P.PT_RANK_DIANZAN_MAX){return false;}
    m.Flags = [];
    for(let i = 0; i < sizeOfFlags; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Flags.push(v);
    }

    let sizeOfShowItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfShowItem > P.PT_BAG_MAX_SIZE){return false;}
    m.ShowItem = [];
    for(let i = 0; i < sizeOfShowItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ShowItem.push(v);
    }

    return true;
}

var Encode_GMPKG_RANK_DIANZAN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint64(m.RoleID, byteBuffer);
    if(!m.Flags){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Flags.length > P.PT_RANK_DIANZAN_MAX){return false;}
        NetData.NetWriteInt32(m.Flags.length, byteBuffer);
        for(let v of m.Flags){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.ShowItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ShowItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ShowItem.length, byteBuffer);
        for(let v of m.ShowItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FUND_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FUND_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_FUND = function(byteBuffer, m){
    var ret = {err : false};
    m.FundID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardFlag = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardFlag > P.PT_FUND_MAX){return false;}
    m.RewardFlag = [];
    for(let i = 0; i < sizeOfRewardFlag; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.RewardFlag.push(v);
    }

    return true;
}

var Encode_GMDT_FUND = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.FundID, byteBuffer);
    NetData.NetWriteUint8(m.BuyFlag, byteBuffer);
    if(!m.RewardFlag){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardFlag.length > P.PT_FUND_MAX){return false;}
        NetData.NetWriteInt32(m.RewardFlag.length, byteBuffer);
        for(let v of m.RewardFlag){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_FUND_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndlessRank = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfFundList = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfFundList > P.PT_FUND_MAX){return false;}
    m.FundList = [];
    for(let i = 0; i < sizeOfFundList; i++){
        let v = {};
        if(Decode_GMDT_FUND(byteBuffer, v) == false){
            return false;
        }
        m.FundList.push(v);
    }

    return true;
}

var Encode_GMPKG_FUND_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.EndlessRank, byteBuffer);
    if(!m.FundList){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.FundList.length > P.PT_FUND_MAX){return false;}
        NetData.NetWriteInt32(m.FundList.length, byteBuffer);
        for(let v of m.FundList){
            if(Encode_GMDT_FUND(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FUND_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FUND_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_FUND_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FUND_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMPKG_FUND_GET_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Index = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FUND_GET_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteUint8(m.Index, byteBuffer);

    return true;
}

var Decode_GMPKG_FUND_GET_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfRewardFlag = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardFlag > P.PT_FUND_MAX){return false;}
    m.RewardFlag = [];
    for(let i = 0; i < sizeOfRewardFlag; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.RewardFlag.push(v);
    }

    m.AddDiamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FUND_GET_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.RewardFlag){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardFlag.length > P.PT_FUND_MAX){return false;}
        NetData.NetWriteInt32(m.RewardFlag.length, byteBuffer);
        for(let v of m.RewardFlag){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteInt32(m.AddDiamond, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMPKG_FUND_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FUND_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_NUCLEAR_STORE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NUCLEAR_STORE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_NUCLEAR_STORE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfID > P.PT_STORE_NUCLEAR_ITEM_MAX){return false;}
    m.ID = [];
    for(let i = 0; i < sizeOfID; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.ID.push(v);
    }

    return true;
}

var Encode_GMPKG_NUCLEAR_STORE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.ID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ID.length > P.PT_STORE_NUCLEAR_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ID.length, byteBuffer);
        for(let v of m.ID){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_NUCLEAR_STORE_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NUCLEAR_STORE_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_NUCLEAR_STORE_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItemShow = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemShow > P.PT_BAG_MAX_SIZE){return false;}
    m.ItemShow = [];
    for(let i = 0; i < sizeOfItemShow; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemShow.push(v);
    }

    let sizeOfIDS = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfIDS > P.PT_STORE_NUCLEAR_ITEM_MAX){return false;}
    m.IDS = [];
    for(let i = 0; i < sizeOfIDS; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.IDS.push(v);
    }

    return true;
}

var Encode_GMPKG_NUCLEAR_STORE_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.ItemShow){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemShow.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ItemShow.length, byteBuffer);
        for(let v of m.ItemShow){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.IDS){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.IDS.length > P.PT_STORE_NUCLEAR_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.IDS.length, byteBuffer);
        for(let v of m.IDS){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_TOWER_FLOOR_STORE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_TOWER_FLOOR_STORE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_STORE_TOWER_FLOOR_ITEM = function(byteBuffer, m){
    var ret = {err : false};
    m.Index = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.State = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_STORE_TOWER_FLOOR_ITEM = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Index, byteBuffer);
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);
    NetData.NetWriteUint8(m.State, byteBuffer);

    return true;
}

var Decode_GMPKG_TOWER_FLOOR_STORE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Floor = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_STORE_TOWER_FLOOR_ITEM_MAX){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_STORE_TOWER_FLOOR_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_TOWER_FLOOR_STORE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.Floor, byteBuffer);
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_STORE_TOWER_FLOOR_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_STORE_TOWER_FLOOR_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_TOWER_FLOOR_STORE_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_TOWER_FLOOR_STORE_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_TOWER_FLOOR_STORE_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItemShow = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemShow > P.PT_BAG_MAX_SIZE){return false;}
    m.ItemShow = [];
    for(let i = 0; i < sizeOfItemShow; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemShow.push(v);
    }

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_STORE_TOWER_FLOOR_ITEM_MAX){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_STORE_TOWER_FLOOR_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_TOWER_FLOOR_STORE_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.ItemShow){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemShow.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ItemShow.length, byteBuffer);
        for(let v of m.ItemShow){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_STORE_TOWER_FLOOR_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_STORE_TOWER_FLOOR_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_TOWER_FLOOR_STORE_NEXT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_TOWER_FLOOR_STORE_NEXT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_TOWER_FLOOR_STORE_NEXT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Floor = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_STORE_TOWER_FLOOR_ITEM_MAX){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_STORE_TOWER_FLOOR_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_TOWER_FLOOR_STORE_NEXT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.Floor, byteBuffer);
    NetData.NetWriteUint8(m.BuyTimes, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_STORE_TOWER_FLOOR_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_STORE_TOWER_FLOOR_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_STORE_RANK_ITEM = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_STORE_RANK_ITEM = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.BuyTimes, byteBuffer);

    return true;
}

var Decode_GMPKG_RANK_STORE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.StoreID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_RANK_STORE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.StoreID, byteBuffer);

    return true;
}

var Decode_GMPKG_RANK_STORE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.StoreID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_STORE_RANK_ITEM_MAX){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_STORE_RANK_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_RANK_STORE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.StoreID, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_STORE_RANK_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_STORE_RANK_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_RANK_STORE_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.StoreID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_RANK_STORE_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.StoreID, byteBuffer);
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_RANK_STORE_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.StoreID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuyTimes = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItemShow = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemShow > P.PT_BAG_MAX_SIZE){return false;}
    m.ItemShow = [];
    for(let i = 0; i < sizeOfItemShow; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemShow.push(v);
    }

    return true;
}

var Encode_GMPKG_RANK_STORE_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.StoreID, byteBuffer);
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.BuyTimes, byteBuffer);
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.ItemShow){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemShow.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ItemShow.length, byteBuffer);
        for(let v of m.ItemShow){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_STORE_DEVIL_ITEM = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_STORE_DEVIL_ITEM = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteInt32(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_DEVIL_STORE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DEVIL_STORE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_DEVIL_STORE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Trial = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_STORE_DEVIL_ITEM_MAX){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_STORE_DEVIL_ITEM(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_DEVIL_STORE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Trial, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_STORE_DEVIL_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_STORE_DEVIL_ITEM(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DEVIL_STORE_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Num = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DEVIL_STORE_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteInt32(m.Num, byteBuffer);

    return true;
}

var Decode_GMPKG_DEVIL_STORE_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.HasBuyNum = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Trial = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItemShow = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemShow > P.PT_BAG_MAX_SIZE){return false;}
    m.ItemShow = [];
    for(let i = 0; i < sizeOfItemShow; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemShow.push(v);
    }

    return true;
}

var Encode_GMPKG_DEVIL_STORE_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteInt32(m.HasBuyNum, byteBuffer);
    NetData.NetWriteInt32(m.Trial, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.ItemShow){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemShow.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.ItemShow.length, byteBuffer);
        for(let v of m.ItemShow){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_REWARD_CENTER_REWARD_INFO = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Seq = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Time = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Param1 = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_REWARD_CENTER_ITEM_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    return true;
}

var Encode_GMDT_REWARD_CENTER_REWARD_INFO = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.Seq, byteBuffer);
    NetData.NetWriteUint32(m.Time, byteBuffer);
    NetData.NetWriteInt32(m.Param1, byteBuffer);
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_REWARD_CENTER_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_REWARD_CENTER_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_REWARD_CENTER_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_REWARD_CENTER_NTF = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReward > P.PT_REWARD_CENTER_MAX){return false;}
    m.Reward = [];
    for(let i = 0; i < sizeOfReward; i++){
        let v = {};
        if(Decode_GMDT_REWARD_CENTER_REWARD_INFO(byteBuffer, v) == false){
            return false;
        }
        m.Reward.push(v);
    }

    return true;
}

var Encode_GMPKG_REWARD_CENTER_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Reward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Reward.length > P.PT_REWARD_CENTER_MAX){return false;}
        NetData.NetWriteInt32(m.Reward.length, byteBuffer);
        for(let v of m.Reward){
            if(Encode_GMDT_REWARD_CENTER_REWARD_INFO(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_REWARD_CENTER_GETREWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Seq = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_REWARD_CENTER_GETREWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Seq, byteBuffer);

    return true;
}

var Decode_GMDT_REWARD_CENTER_GETREWARD_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Seq = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_REWARD_CENTER_ITEM_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_REWARD_CENTER_GETREWARD_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Seq, byteBuffer);
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_REWARD_CENTER_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_REWARD_CENTER_GETREWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_REWARD_CENTER_GETREWARD_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_REWARD_CENTER_GETREWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_REWARD_CENTER_GETREWARD_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_REWARD_CENTER_ALLREWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_REWARD_CENTER_ALLREWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_REWARD_CENTER_ALLREWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_CONST_100){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_REWARD_CENTER_ALLREWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_CONST_100){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_DARK_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.DarkLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfDarkTech = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDarkTech > P.PT_DARK_TECH_SIZE){return false;}
    m.DarkTech = [];
    for(let i = 0; i < sizeOfDarkTech; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.DarkTech.push(v);
    }

    let sizeOfDarkItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDarkItems > P.PT_BAG_ITEM_MAX){return false;}
    m.DarkItems = [];
    for(let i = 0; i < sizeOfDarkItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.DarkItems.push(v);
    }

    m.DarkPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BossID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.BattleStatus = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DrawCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_DARK_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.DarkLevel, byteBuffer);
    if(!m.DarkTech){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.DarkTech.length > P.PT_DARK_TECH_SIZE){return false;}
        NetData.NetWriteInt32(m.DarkTech.length, byteBuffer);
        for(let v of m.DarkTech){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.DarkItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.DarkItems.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.DarkItems.length, byteBuffer);
        for(let v of m.DarkItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.DarkPoint, byteBuffer);
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    NetData.NetWriteUint8(m.RefreshCount, byteBuffer);
    NetData.NetWriteUint16(m.BossID, byteBuffer);
    NetData.NetWriteUint8(m.BattleStatus, byteBuffer);
    NetData.NetWriteUint8(m.DrawCount, byteBuffer);

    return true;
}

var Decode_GMPKG_DARK_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_DARK_BAG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.Bag = {};
    if(Decode_GMDT_DARK_BAG(byteBuffer, m.Bag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_DARK_BAG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_DARK_BAG(m.Bag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_DARK_START_BATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_START_BATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_DARK_START_BATTLE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.BossID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Seed = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    return true;
}

var Encode_GMDT_DARK_START_BATTLE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.BossID, byteBuffer);
    NetData.NetWriteUint32(m.Seed, byteBuffer);
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_DARK_START_BATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_DARK_START_BATTLE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_DARK_START_BATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_DARK_START_BATTLE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DARK_END_BATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Token = NetData.NetReadString(byteBuffer, P.PT_TOKEN_LEN, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_END_BATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Result, byteBuffer);
    if(NetData.NetWriteString(m.Token, P.PT_TOKEN_LEN, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMDT_DARK_END_BATTLE_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndDrawFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DrawCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItemGet = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemGet > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemGet = [];
    for(let i = 0; i < sizeOfItemGet; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemGet.push(v);
    }

    let sizeOfItemChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemChange > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemChange = [];
    for(let i = 0; i < sizeOfItemChange; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemChange.push(v);
    }

    return true;
}

var Encode_GMDT_DARK_END_BATTLE_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Result, byteBuffer);
    NetData.NetWriteUint8(m.EndDrawFlag, byteBuffer);
    NetData.NetWriteUint8(m.DrawCount, byteBuffer);
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    if(!m.ItemGet){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemGet.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemGet.length, byteBuffer);
        for(let v of m.ItemGet){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.ItemChange){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemChange.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemChange.length, byteBuffer);
        for(let v of m.ItemChange){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DARK_END_BATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_DARK_END_BATTLE_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_DARK_END_BATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_DARK_END_BATTLE_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DARK_BATTLE_DRAW_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_BATTLE_DRAW_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_DARK_BATTLE_DRAW_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.EndDrawFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DrawCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItemGet = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemGet > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemGet = [];
    for(let i = 0; i < sizeOfItemGet; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemGet.push(v);
    }

    let sizeOfItemChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemChange > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemChange = [];
    for(let i = 0; i < sizeOfItemChange; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemChange.push(v);
    }

    return true;
}

var Encode_GMDT_DARK_BATTLE_DRAW_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.EndDrawFlag, byteBuffer);
    NetData.NetWriteUint8(m.DrawCount, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(!m.ItemGet){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemGet.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemGet.length, byteBuffer);
        for(let v of m.ItemGet){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.ItemChange){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemChange.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemChange.length, byteBuffer);
        for(let v of m.ItemChange){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DARK_BATTLE_DRAW_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_DARK_BATTLE_DRAW_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_DARK_BATTLE_DRAW_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_DARK_BATTLE_DRAW_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DARK_QUIT_BATTLE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Flag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_QUIT_BATTLE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Flag, byteBuffer);

    return true;
}

var Decode_GMPKG_DARK_QUIT_BATTLE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.BossID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DrawCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_QUIT_BATTLE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.BossID, byteBuffer);
    NetData.NetWriteUint8(m.RefreshCount, byteBuffer);
    NetData.NetWriteUint8(m.DrawCount, byteBuffer);

    return true;
}

var Decode_GMPKG_DARK_SAODANG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_SAODANG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_DARK_SAODANG_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.EndDrawFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DrawCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.PlayCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItemGet = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemGet > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemGet = [];
    for(let i = 0; i < sizeOfItemGet; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemGet.push(v);
    }

    let sizeOfItemChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemChange > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemChange = [];
    for(let i = 0; i < sizeOfItemChange; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemChange.push(v);
    }

    return true;
}

var Encode_GMDT_DARK_SAODANG_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.EndDrawFlag, byteBuffer);
    NetData.NetWriteUint8(m.DrawCount, byteBuffer);
    NetData.NetWriteUint8(m.PlayCount, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(!m.ItemGet){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemGet.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemGet.length, byteBuffer);
        for(let v of m.ItemGet){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.ItemChange){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemChange.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemChange.length, byteBuffer);
        for(let v of m.ItemChange){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DARK_SAODANG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_DARK_SAODANG_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_DARK_SAODANG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_DARK_SAODANG_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DARK_SAODANG_DRAW_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_SAODANG_DRAW_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Result, byteBuffer);

    return true;
}

var Decode_GMDT_DARK_SAODANG_DRAW_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.EndDrawFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DrawCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItemGet = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemGet > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemGet = [];
    for(let i = 0; i < sizeOfItemGet; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemGet.push(v);
    }

    let sizeOfItemChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemChange > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemChange = [];
    for(let i = 0; i < sizeOfItemChange; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemChange.push(v);
    }

    return true;
}

var Encode_GMDT_DARK_SAODANG_DRAW_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.EndDrawFlag, byteBuffer);
    NetData.NetWriteUint8(m.DrawCount, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);
    if(!m.ItemGet){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemGet.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemGet.length, byteBuffer);
        for(let v of m.ItemGet){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.ItemChange){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemChange.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemChange.length, byteBuffer);
        for(let v of m.ItemChange){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DARK_SAODANG_DRAW_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_DARK_SAODANG_DRAW_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_DARK_SAODANG_DRAW_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_DARK_SAODANG_DRAW_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DARK_SAODANG_QUIT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_SAODANG_QUIT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_DARK_SAODANG_QUIT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.BossID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DrawCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_SAODANG_QUIT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.BossID, byteBuffer);
    NetData.NetWriteUint8(m.RefreshCount, byteBuffer);
    NetData.NetWriteUint8(m.DrawCount, byteBuffer);

    return true;
}

var Decode_GMPKG_DARK_REFRESH_BOSS_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_REFRESH_BOSS_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_DARK_REFRESH_BOSS_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.BossID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RefreshCount = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_DARK_REFRESH_BOSS_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.BossID, byteBuffer);
    NetData.NetWriteUint8(m.RefreshCount, byteBuffer);
    NetData.NetWriteInt32(m.DiamondCur, byteBuffer);

    return true;
}

var Decode_GMPKG_DARK_REFRESH_BOSS_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_DARK_REFRESH_BOSS_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_DARK_REFRESH_BOSS_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_DARK_REFRESH_BOSS_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DARK_BUY_ITEM_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_BUY_ITEM_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);

    return true;
}

var Decode_GMDT_DARK_BUY_ITEM_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItemChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemChange > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemChange = [];
    for(let i = 0; i < sizeOfItemChange; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemChange.push(v);
    }

    m.DarkPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_DARK_BUY_ITEM_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    if(!m.ItemChange){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemChange.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemChange.length, byteBuffer);
        for(let v of m.ItemChange){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.DarkPoint, byteBuffer);

    return true;
}

var Decode_GMPKG_DARK_BUY_ITEM_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_DARK_BUY_ITEM_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_DARK_BUY_ITEM_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_DARK_BUY_ITEM_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DARK_SELL_ITEM_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItems > P.PT_BAG_ITEM_MAX){return false;}
    m.Items = [];
    for(let i = 0; i < sizeOfItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Items.push(v);
    }

    return true;
}

var Encode_GMPKG_DARK_SELL_ITEM_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Items){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Items.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.Items.length, byteBuffer);
        for(let v of m.Items){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMDT_DARK_SELL_ITEM_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.DarkPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItemChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemChange > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemChange = [];
    for(let i = 0; i < sizeOfItemChange; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemChange.push(v);
    }

    return true;
}

var Encode_GMDT_DARK_SELL_ITEM_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.DarkPoint, byteBuffer);
    if(!m.ItemChange){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemChange.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemChange.length, byteBuffer);
        for(let v of m.ItemChange){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DARK_SELL_ITEM_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_DARK_SELL_ITEM_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_DARK_SELL_ITEM_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_DARK_SELL_ITEM_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DARK_ITEM_NTF = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfItemChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemChange > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemChange = [];
    for(let i = 0; i < sizeOfItemChange; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemChange.push(v);
    }

    return true;
}

var Encode_GMPKG_DARK_ITEM_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.ItemChange){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemChange.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemChange.length, byteBuffer);
        for(let v of m.ItemChange){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DARK_ACTIVE_TECH_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TechID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_ACTIVE_TECH_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.TechID, byteBuffer);

    return true;
}

var Decode_GMDT_DARK_ACTIVE_TECH_OK = function(byteBuffer, m){
    var ret = {err : false};
    m.DarkLevel = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.LevelUpFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TechID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItemChange = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItemChange > P.PT_BAG_ITEM_MAX){return false;}
    m.ItemChange = [];
    for(let i = 0; i < sizeOfItemChange; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.ItemChange.push(v);
    }

    return true;
}

var Encode_GMDT_DARK_ACTIVE_TECH_OK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.DarkLevel, byteBuffer);
    NetData.NetWriteUint8(m.LevelUpFlag, byteBuffer);
    NetData.NetWriteUint8(m.TechID, byteBuffer);
    if(!m.ItemChange){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ItemChange.length > P.PT_BAG_ITEM_MAX){return false;}
        NetData.NetWriteInt32(m.ItemChange.length, byteBuffer);
        for(let v of m.ItemChange){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_DARK_ACTIVE_TECH_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.ErrCode == P.PTERR_SUCCESS){
    m.OK = {};
    if(Decode_GMDT_DARK_ACTIVE_TECH_OK(byteBuffer, m.OK) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_DARK_ACTIVE_TECH_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(m.ErrCode == P.PTERR_SUCCESS){
    if(Encode_GMDT_DARK_ACTIVE_TECH_OK(m.OK, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_DARK_POINT_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.DarkPoint = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DARK_POINT_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.DarkPoint, byteBuffer);

    return true;
}

var Decode_GMPKG_DAILY_SHARE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DAILY_SHARE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_DAILY_SHARE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DAILY_SHARE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_GUAZAI_PUTON_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.GuaZaiPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.BagSlot = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUAZAI_PUTON_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.GuaZaiPos, byteBuffer);
    NetData.NetWriteUint16(m.BagSlot, byteBuffer);

    return true;
}

var Decode_GMPKG_GUAZAI_PUTON_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.OnGuaZai = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.OnGuaZai) == false){
        return false;
    }

    m.OffGuaZai = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.OffGuaZai) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_GUAZAI_PUTON_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_ITEM(m.OnGuaZai, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM(m.OffGuaZai, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUAZAI_QUALITYUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.GuaZaiPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSrcPos = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSrcPos > P.PT_BAG_MAX_SIZE){return false;}
    m.SrcPos = [];
    for(let i = 0; i < sizeOfSrcPos; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.SrcPos.push(v);
    }

    return true;
}

var Encode_GMPKG_GUAZAI_QUALITYUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.GuaZaiPos, byteBuffer);
    if(!m.SrcPos){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SrcPos.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.SrcPos.length, byteBuffer);
        for(let v of m.SrcPos){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_GUAZAI_QUALITYUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuaZai = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.GuaZai) == false){
        return false;
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_GUAZAI_QUALITYUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_ITEM(m.GuaZai, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUAZAI_LEVELUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.GuaZaiPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSrcItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSrcItem > P.PT_BAG_MAX_SIZE){return false;}
    m.SrcItem = [];
    for(let i = 0; i < sizeOfSrcItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.SrcItem.push(v);
    }

    return true;
}

var Encode_GMPKG_GUAZAI_LEVELUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.GuaZaiPos, byteBuffer);
    if(!m.SrcItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SrcItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.SrcItem.length, byteBuffer);
        for(let v of m.SrcItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUAZAI_LEVELUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuaZai = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.GuaZai) == false){
        return false;
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_GUAZAI_LEVELUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_ITEM(m.GuaZai, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUAZAI_STARUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.GuaZaiPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CostType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUAZAI_STARUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.GuaZaiPos, byteBuffer);
    NetData.NetWriteUint8(m.CostType, byteBuffer);

    return true;
}

var Decode_GMPKG_GUAZAI_STARUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Crit = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuaZai = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.GuaZai) == false){
        return false;
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_GUAZAI_STARUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Crit, byteBuffer);
    if(Encode_GMDT_ITEM(m.GuaZai, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUAZAI_AWAKE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.GuaZaiPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfSrcItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfSrcItem > P.PT_BAG_MAX_SIZE){return false;}
    m.SrcItem = [];
    for(let i = 0; i < sizeOfSrcItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.SrcItem.push(v);
    }

    return true;
}

var Encode_GMPKG_GUAZAI_AWAKE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.GuaZaiPos, byteBuffer);
    if(!m.SrcItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.SrcItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.SrcItem.length, byteBuffer);
        for(let v of m.SrcItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_GUAZAI_AWAKE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuaZai = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.GuaZai) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_GUAZAI_AWAKE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_ITEM(m.GuaZai, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUAZAI_AWAKEUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.GuaZaiPos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUAZAI_AWAKEUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.GuaZaiPos, byteBuffer);

    return true;
}

var Decode_GMPKG_GUAZAI_AWAKEUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GuaZai = {};
    if(Decode_GMDT_ITEM(byteBuffer, m.GuaZai) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_GUAZAI_AWAKEUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_ITEM(m.GuaZai, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUAZAI_REBIRTH_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfBagSlot = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBagSlot > P.PT_BAG_MAX_SIZE){return false;}
    m.BagSlot = [];
    for(let i = 0; i < sizeOfBagSlot; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.BagSlot.push(v);
    }

    m.IsShow = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_GUAZAI_REBIRTH_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.BagSlot){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BagSlot.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.BagSlot.length, byteBuffer);
        for(let v of m.BagSlot){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }
    NetData.NetWriteUint8(m.IsShow, byteBuffer);

    return true;
}

var Decode_GMPKG_GUAZAI_REBIRTH_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.IsShow = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGetItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItems > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItems = [];
    for(let i = 0; i < sizeOfGetItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItems.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_GUAZAI_REBIRTH_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.IsShow, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(!m.GetItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItems.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItems.length, byteBuffer);
        for(let v of m.GetItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_GUAZAI_HECHENG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfBagSlot = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBagSlot > P.PT_BAG_MAX_SIZE){return false;}
    m.BagSlot = [];
    for(let i = 0; i < sizeOfBagSlot; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.BagSlot.push(v);
    }

    return true;
}

var Encode_GMPKG_GUAZAI_HECHENG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.BagSlot){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BagSlot.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.BagSlot.length, byteBuffer);
        for(let v of m.BagSlot){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_GUAZAI_HECHENG_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGetItems = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGetItems > P.PT_BAG_MAX_SIZE){return false;}
    m.GetItems = [];
    for(let i = 0; i < sizeOfGetItems; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.GetItems.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_GUAZAI_HECHENG_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.GetItems){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.GetItems.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.GetItems.length, byteBuffer);
        for(let v of m.GetItems){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MYSTERY_ACTIVE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MYSTERY_ACTIVE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_MYSTERY_ACTIVE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Mystery = {};
    if(Decode_GMDT_MYSTERY(byteBuffer, m.Mystery) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MYSTERY_ACTIVE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_MYSTERY(m.Mystery, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_MYSTERY_UP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MYSTERY_UP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_MYSTERY_UP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Mystery = {};
    if(Decode_GMDT_MYSTERY(byteBuffer, m.Mystery) == false){
        return false;
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_MYSTERY_UP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_MYSTERY(m.Mystery, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_DRESS_GET_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DRESS_GET_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_DRESS_GET_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Dress = {};
    if(Decode_GMDT_DRESS(byteBuffer, m.Dress) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_DRESS_GET_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_DRESS(m.Dress, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_DRESS_UP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DRESS_UP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_DRESS_UP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Dress = {};
    if(Decode_GMDT_DRESS(byteBuffer, m.Dress) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_DRESS_UP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_DRESS(m.Dress, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_DRESS_WEAR_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.DressID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DRESS_WEAR_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.DressID, byteBuffer);

    return true;
}

var Decode_GMPKG_DRESS_WEAR_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.DressID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_DRESS_WEAR_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    NetData.NetWriteUint16(m.DressID, byteBuffer);

    return true;
}

var Decode_GMPKG_COMMANDER_BATTLEFIELD_ACTIVE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_COMMANDER_BATTLEFIELD_ACTIVE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Pos, byteBuffer);

    return true;
}

var Decode_GMPKG_COMMANDER_BATTLEFIELD_ACTIVE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BattleField = {};
    if(Decode_GMDT_BATTLEFIELD(byteBuffer, m.BattleField) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_COMMANDER_BATTLEFIELD_ACTIVE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BATTLEFIELD(m.BattleField, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_COMMANDER_BATTLEFIELD_PUTON_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Pos = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.CommanderID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_COMMANDER_BATTLEFIELD_PUTON_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Pos, byteBuffer);
    NetData.NetWriteUint16(m.CommanderID, byteBuffer);

    return true;
}

var Decode_GMPKG_COMMANDER_BATTLEFIELD_PUTON_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BattleField = {};
    if(Decode_GMDT_BATTLEFIELD(byteBuffer, m.BattleField) == false){
        return false;
    }

    m.CommanderID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_COMMANDER_BATTLEFIELD_PUTON_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BATTLEFIELD(m.BattleField, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.CommanderID, byteBuffer);

    return true;
}

var Decode_GMPKG_COMMANDER_ACTIVE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_COMMANDER_ACTIVE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_COMMANDER_ACTIVE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Commander = {};
    if(Decode_GMDT_COMMANDER(byteBuffer, m.Commander) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_COMMANDER_ACTIVE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_COMMANDER(m.Commander, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_COMMANDER_LEVELUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_COMMANDER_LEVELUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_COMMANDER_LEVELUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Commander = {};
    if(Decode_GMDT_COMMANDER(byteBuffer, m.Commander) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_COMMANDER_LEVELUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_COMMANDER(m.Commander, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_COMMANDER_QUALITYUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_COMMANDER_QUALITYUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_COMMANDER_QUALITYUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Commander = {};
    if(Decode_GMDT_COMMANDER(byteBuffer, m.Commander) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_COMMANDER_QUALITYUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_COMMANDER(m.Commander, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_COMMANDER_STARUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_COMMANDER_STARUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_COMMANDER_STARUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Commander = {};
    if(Decode_GMDT_COMMANDER(byteBuffer, m.Commander) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_COMMANDER_STARUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_COMMANDER(m.Commander, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_PATROL_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PATROL_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_PATROL_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PatrolBag = {};
    if(Decode_GMDT_PATROL_BAG(byteBuffer, m.PatrolBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_PATROL_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_PATROL_BAG(m.PatrolBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_PATROL_START_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TaskID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PATROL_START_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.TaskID, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);

    return true;
}

var Decode_GMPKG_PATROL_START_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PatrolBag = {};
    if(Decode_GMDT_PATROL_BAG(byteBuffer, m.PatrolBag) == false){
        return false;
    }

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberPatrol = {};
    if(Decode_GMDT_MEMBER_PATROL(byteBuffer, m.MemberPatrol) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_PATROL_START_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_PATROL_BAG(m.PatrolBag, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    if(Encode_GMDT_MEMBER_PATROL(m.MemberPatrol, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_PATROL_END_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TaskID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Three = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PATROL_END_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.TaskID, byteBuffer);
    NetData.NetWriteUint8(m.Three, byteBuffer);

    return true;
}

var Decode_GMPKG_PATROL_END_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PatrolBag = {};
    if(Decode_GMDT_PATROL_BAG(byteBuffer, m.PatrolBag) == false){
        return false;
    }

    m.Member = {};
    if(Decode_GMDT_MEMBER(byteBuffer, m.Member) == false){
        return false;
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_PATROL_END_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_PATROL_BAG(m.PatrolBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_MEMBER(m.Member, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_PATROL_REFRESH_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PATROL_REFRESH_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_PATROL_REFRESH_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PatrolBag = {};
    if(Decode_GMDT_PATROL_BAG(byteBuffer, m.PatrolBag) == false){
        return false;
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_PATROL_REFRESH_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_PATROL_BAG(m.PatrolBag, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_PATROL_BUYSP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PATROL_BUYSP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);

    return true;
}

var Decode_GMPKG_PATROL_BUYSP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.MemberPatrol = {};
    if(Decode_GMDT_MEMBER_PATROL(byteBuffer, m.MemberPatrol) == false){
        return false;
    }

    m.BuySpTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PATROL_BUYSP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    if(Encode_GMDT_MEMBER_PATROL(m.MemberPatrol, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.BuySpTimes, byteBuffer);

    return true;
}

var Decode_GMPKG_PATROL_FLAG_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PATROL_FLAG_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_PATROL_SPEEDUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TaskID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PATROL_SPEEDUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.TaskID, byteBuffer);

    return true;
}

var Decode_GMPKG_PATROL_SPEEDUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.PatrolBag = {};
    if(Decode_GMDT_PATROL_BAG(byteBuffer, m.PatrolBag) == false){
        return false;
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_PATROL_SPEEDUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_PATROL_BAG(m.PatrolBag, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMPKG_PATROL_MEMBER_RECOVER_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.MemberID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Patrol = {};
    if(Decode_GMDT_MEMBER_PATROL(byteBuffer, m.Patrol) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_PATROL_MEMBER_RECOVER_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.MemberID, byteBuffer);
    if(Encode_GMDT_MEMBER_PATROL(m.Patrol, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_EXPLORE_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_EXPLORE_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_EXPLORE_CHEST = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_EXPLORE_CHEST = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ItemID, byteBuffer);
    NetData.NetWriteInt32(m.Count, byteBuffer);

    return true;
}

var Decode_GMDT_EXPLORE_BAG = function(byteBuffer, m){
    var ret = {err : false};
    m.AreaID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Progress = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.NaiLi = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RecoverTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GemEndTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GemTimes = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfChest = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfChest > P.PT_EXPLORE_CHEST_MAX){return false;}
    m.Chest = [];
    for(let i = 0; i < sizeOfChest; i++){
        let v = {};
        if(Decode_GMDT_EXPLORE_CHEST(byteBuffer, v) == false){
            return false;
        }
        m.Chest.push(v);
    }

    return true;
}

var Encode_GMDT_EXPLORE_BAG = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.AreaID, byteBuffer);
    NetData.NetWriteUint16(m.Progress, byteBuffer);
    NetData.NetWriteUint16(m.NaiLi, byteBuffer);
    NetData.NetWriteUint32(m.RecoverTime, byteBuffer);
    NetData.NetWriteUint32(m.GemEndTime, byteBuffer);
    NetData.NetWriteUint16(m.GemTimes, byteBuffer);
    if(!m.Chest){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Chest.length > P.PT_EXPLORE_CHEST_MAX){return false;}
        NetData.NetWriteInt32(m.Chest.length, byteBuffer);
        for(let v of m.Chest){
            if(Encode_GMDT_EXPLORE_CHEST(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_EXPLORE_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ExploreBag = {};
    if(Decode_GMDT_EXPLORE_BAG(byteBuffer, m.ExploreBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_EXPLORE_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_EXPLORE_BAG(m.ExploreBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_EXPLORE_SELECT_AREA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.SelectAreaID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_EXPLORE_SELECT_AREA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.SelectAreaID, byteBuffer);

    return true;
}

var Decode_GMPKG_EXPLORE_SELECT_AREA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ExploreBag = {};
    if(Decode_GMDT_EXPLORE_BAG(byteBuffer, m.ExploreBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_EXPLORE_SELECT_AREA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_EXPLORE_BAG(m.ExploreBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_EXPLORE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_EXPLORE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_EXPLORE_REWARD_VALUE = function(byteBuffer, m){
    var ret = {err : false};
    m.Crit = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.AddExp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.AddGold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldCur = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_EXPLORE_REWARD_VALUE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Crit, byteBuffer);
    NetData.NetWriteInt32(m.AddExp, byteBuffer);
    NetData.NetWriteInt32(m.AddGold, byteBuffer);
    NetData.NetWriteInt32(m.GoldCur, byteBuffer);

    return true;
}

var Decode_GMDT_EXPLORE_REWARD_ITEM = function(byteBuffer, m){
    var ret = {err : false};
    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMDT_EXPLORE_REWARD_ITEM = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_EXPLORE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ExploreBag = {};
    if(Decode_GMDT_EXPLORE_BAG(byteBuffer, m.ExploreBag) == false){
        return false;
    }

    m.RewardType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    if(m.RewardType == P.PT_EXPLORE_REWARD_VALUE){
    m.Value = {};
    if(Decode_GMDT_EXPLORE_REWARD_VALUE(byteBuffer, m.Value) == false){
        return false;
    }
    }

    if(m.RewardType == P.PT_EXPLORE_REWARD_ITEM){
    m.Item = {};
    if(Decode_GMDT_EXPLORE_REWARD_ITEM(byteBuffer, m.Item) == false){
        return false;
    }
    }

    return true;
}

var Encode_GMPKG_EXPLORE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_EXPLORE_BAG(m.ExploreBag, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.RewardType, byteBuffer);
    if(m.RewardType == P.PT_EXPLORE_REWARD_VALUE){
    if(Encode_GMDT_EXPLORE_REWARD_VALUE(m.Value, byteBuffer) == false){
        return false;
    }
    }
    if(m.RewardType == P.PT_EXPLORE_REWARD_ITEM){
    if(Encode_GMDT_EXPLORE_REWARD_ITEM(m.Item, byteBuffer) == false){
        return false;
    }
    }

    return true;
}

var Decode_GMPKG_EXPLORE_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_EXPLORE_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_EXPLORE_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Progress = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_EXPLORE_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.Progress, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_EXPLORE_GEM_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_EXPLORE_GEM_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_EXPLORE_GEM_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GemTimes = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_EXPLORE_GEM_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.GemTimes, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_EXPLORE_OPEN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_EXPLORE_OPEN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_EXPLORE_OPEN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    let sizeOfChest = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfChest > P.PT_EXPLORE_CHEST_MAX){return false;}
    m.Chest = [];
    for(let i = 0; i < sizeOfChest; i++){
        let v = {};
        if(Decode_GMDT_EXPLORE_CHEST(byteBuffer, v) == false){
            return false;
        }
        m.Chest.push(v);
    }

    return true;
}

var Encode_GMPKG_EXPLORE_OPEN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.Chest){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Chest.length > P.PT_EXPLORE_CHEST_MAX){return false;}
        NetData.NetWriteInt32(m.Chest.length, byteBuffer);
        for(let v of m.Chest){
            if(Encode_GMDT_EXPLORE_CHEST(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_EXPLORE_FLAG_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_EXPLORE_FLAG_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_EXPLORE_CHEST_NTF = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfChest = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfChest > P.PT_EXPLORE_CHEST_MAX){return false;}
    m.Chest = [];
    for(let i = 0; i < sizeOfChest; i++){
        let v = {};
        if(Decode_GMDT_EXPLORE_CHEST(byteBuffer, v) == false){
            return false;
        }
        m.Chest.push(v);
    }

    return true;
}

var Encode_GMPKG_EXPLORE_CHEST_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Chest){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Chest.length > P.PT_EXPLORE_CHEST_MAX){return false;}
        NetData.NetWriteInt32(m.Chest.length, byteBuffer);
        for(let v of m.Chest){
            if(Encode_GMDT_EXPLORE_CHEST(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_HONOR_RANKUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HONOR_RANKUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_HONOR_RANKUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Honor = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.RankID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Exp = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfProps = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfProps > P.PTPROP_COUNT){return false;}
    m.Props = [];
    for(let i = 0; i < sizeOfProps; i++){
        let v = {};
        if(Decode_GMDT_PROP(byteBuffer, v) == false){
            return false;
        }
        m.Props.push(v);
    }

    return true;
}

var Encode_GMPKG_HONOR_RANKUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Honor, byteBuffer);
    NetData.NetWriteUint8(m.RankID, byteBuffer);
    NetData.NetWriteInt32(m.Exp, byteBuffer);
    if(!m.Props){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Props.length > P.PTPROP_COUNT){return false;}
        NetData.NetWriteInt32(m.Props.length, byteBuffer);
        for(let v of m.Props){
            if(Encode_GMDT_PROP(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_HONOR_GIVEN_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HONOR_GIVEN_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_HONOR_GIVEN_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Honor = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGiven = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGiven > P.PT_HONOR_GIVEN_MAX){return false;}
    m.Given = [];
    for(let i = 0; i < sizeOfGiven; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Given.push(v);
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HONOR_GIVEN_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.Honor, byteBuffer);
    if(!m.Given){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Given.length > P.PT_HONOR_GIVEN_MAX){return false;}
        NetData.NetWriteInt32(m.Given.length, byteBuffer);
        for(let v of m.Given){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);

    return true;
}

var Decode_GMPKG_HONOR_TUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Tid = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HONOR_TUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Tid, byteBuffer);

    return true;
}

var Decode_GMPKG_HONOR_TUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Tid = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Level = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_HONOR_TUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Tid, byteBuffer);
    NetData.NetWriteUint16(m.Level, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_HONOR_FLAG_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_HONOR_FLAG_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_MAINTASK_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MAINTASK_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_MAINTASK = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_MAINTASK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_MAINTASK_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Index = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Progress = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfMainTask = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMainTask > P.PT_MAINTASK_MAX){return false;}
    m.MainTask = [];
    for(let i = 0; i < sizeOfMainTask; i++){
        let v = {};
        if(Decode_GMDT_MAINTASK(byteBuffer, v) == false){
            return false;
        }
        m.MainTask.push(v);
    }

    return true;
}

var Encode_GMPKG_MAINTASK_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Index, byteBuffer);
    NetData.NetWriteUint16(m.Progress, byteBuffer);
    if(!m.MainTask){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.MainTask.length > P.PT_MAINTASK_MAX){return false;}
        NetData.NetWriteInt32(m.MainTask.length, byteBuffer);
        for(let v of m.MainTask){
            if(Encode_GMDT_MAINTASK(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_MAINTASK_GET_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.TaskType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TaskID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MAINTASK_GET_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.TaskType, byteBuffer);
    NetData.NetWriteUint16(m.TaskID, byteBuffer);

    return true;
}

var Decode_GMPKG_MAINTASK_GET_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Progress = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfMainTask = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfMainTask > P.PT_MAINTASK_MAX){return false;}
    m.MainTask = [];
    for(let i = 0; i < sizeOfMainTask; i++){
        let v = {};
        if(Decode_GMDT_MAINTASK(byteBuffer, v) == false){
            return false;
        }
        m.MainTask.push(v);
    }

    m.Honor = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    m.TaskType = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.TaskID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_MAINTASK_GET_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.Progress, byteBuffer);
    if(!m.MainTask){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.MainTask.length > P.PT_MAINTASK_MAX){return false;}
        NetData.NetWriteInt32(m.MainTask.length, byteBuffer);
        for(let v of m.MainTask){
            if(Encode_GMDT_MAINTASK(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteInt32(m.Honor, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteUint8(m.TaskType, byteBuffer);
    NetData.NetWriteUint16(m.TaskID, byteBuffer);
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_MAINTASK_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MAINTASK_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_MAINTASK_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Index = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Progress = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_MAINTASK_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Index, byteBuffer);
    NetData.NetWriteUint16(m.Progress, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_MAINTASK_FLAG_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_MAINTASK_FLAG_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_BAG_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_BAG_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_UPGRADE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_UPGRADE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMDT_BUILD_VALUE = function(byteBuffer, m){
    var ret = {err : false};
    m.Iron = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Copper = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Quartz = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ResLimit = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Boom = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BUILD_VALUE = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.Iron, byteBuffer);
    NetData.NetWriteInt32(m.Copper, byteBuffer);
    NetData.NetWriteInt32(m.Quartz, byteBuffer);
    NetData.NetWriteInt32(m.ResLimit, byteBuffer);
    NetData.NetWriteInt32(m.Boom, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_UPGRADE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.Queue = {};
    if(Decode_GMDT_QUEUE(byteBuffer, m.Queue) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_UPGRADE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_QUEUE(m.Queue, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_SPEEDUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_SPEEDUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.ItemID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_SPEEDUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.Queue = {};
    if(Decode_GMDT_QUEUE(byteBuffer, m.Queue) == false){
        return false;
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_SPEEDUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_QUEUE(m.Queue, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_CANCEL_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_CANCEL_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_CANCEL_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.Queue = {};
    if(Decode_GMDT_QUEUE(byteBuffer, m.Queue) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_CANCEL_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_QUEUE(m.Queue, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_RES_UPGRADE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_RES_UPGRADE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_RES_UPGRADE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.ResBuild = {};
    if(Decode_GMDT_RESBUILD(byteBuffer, m.ResBuild) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_RES_UPGRADE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_RESBUILD(m.ResBuild, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_RES_SPEEDUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_RES_SPEEDUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.ItemID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_RES_SPEEDUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.ResBuild = {};
    if(Decode_GMDT_RESBUILD(byteBuffer, m.ResBuild) == false){
        return false;
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_RES_SPEEDUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_RESBUILD(m.ResBuild, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_RES_CANCEL_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_RES_CANCEL_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_RES_CANCEL_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.ResBuild = {};
    if(Decode_GMDT_RESBUILD(byteBuffer, m.ResBuild) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_RES_CANCEL_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_RESBUILD(m.ResBuild, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_RES_UNLOCK_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_RES_UNLOCK_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_RES_UNLOCK_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.ResBuild = {};
    if(Decode_GMDT_RESBUILD(byteBuffer, m.ResBuild) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_RES_UNLOCK_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_RESBUILD(m.ResBuild, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_TECH_UPGRADE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_TECH_UPGRADE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_TECH_UPGRADE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.TechBuild = {};
    if(Decode_GMDT_TECHBUILD(byteBuffer, m.TechBuild) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_TECH_UPGRADE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_TECHBUILD(m.TechBuild, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_TECH_SPEEDUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_TECH_SPEEDUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.ItemID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_TECH_SPEEDUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.TechBuild = {};
    if(Decode_GMDT_TECHBUILD(byteBuffer, m.TechBuild) == false){
        return false;
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_TECH_SPEEDUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_TECHBUILD(m.TechBuild, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_TECH_CANCEL_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_TECH_CANCEL_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_TECH_CANCEL_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.TechBuild = {};
    if(Decode_GMDT_TECHBUILD(byteBuffer, m.TechBuild) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_TECH_CANCEL_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_TECHBUILD(m.TechBuild, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_EQUIP_MAKE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_EQUIP_MAKE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_EQUIP_MAKE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    m.EquipBuild = {};
    if(Decode_GMDT_EQUIPBUILD(byteBuffer, m.EquipBuild) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_EQUIP_MAKE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_EQUIPBUILD(m.EquipBuild, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_EQUIP_SPEEDUP_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_EQUIP_SPEEDUP_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);
    NetData.NetWriteUint16(m.ItemID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_EQUIP_SPEEDUP_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EquipBuild = {};
    if(Decode_GMDT_EQUIPBUILD(byteBuffer, m.EquipBuild) == false){
        return false;
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_EQUIP_SPEEDUP_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_EQUIPBUILD(m.EquipBuild, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_EQUIP_GET_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_EQUIP_GET_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_EQUIP_GET_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EquipBuild = {};
    if(Decode_GMDT_EQUIPBUILD(byteBuffer, m.EquipBuild) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_BUILD_EQUIP_GET_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_EQUIPBUILD(m.EquipBuild, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_BUILD_EQUIP_REWARD_GET_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_EQUIP_REWARD_GET_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.ID, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_EQUIP_REWARD_GET_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReward > P.PT_EQUIP_BUILD_REWARD_MAX){return false;}
    m.Reward = [];
    for(let i = 0; i < sizeOfReward; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Reward.push(v);
    }

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_BUILD_EQUIP_REWARD_GET_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Reward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Reward.length > P.PT_EQUIP_BUILD_REWARD_MAX){return false;}
        NetData.NetWriteInt32(m.Reward.length, byteBuffer);
        for(let v of m.Reward){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_BUILD_EQUIP_REWARD_RESET_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_EQUIP_REWARD_RESET_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_EQUIP_REWARD_RESET_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfReward > P.PT_EQUIP_BUILD_REWARD_MAX){return false;}
    m.Reward = [];
    for(let i = 0; i < sizeOfReward; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Reward.push(v);
    }

    m.ResetTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_EQUIP_REWARD_RESET_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Reward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Reward.length > P.PT_EQUIP_BUILD_REWARD_MAX){return false;}
        NetData.NetWriteInt32(m.Reward.length, byteBuffer);
        for(let v of m.Reward){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteUint8(m.ResetTimes, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.BuildBag = {};
    if(Decode_GMDT_BUILD_BAG(byteBuffer, m.BuildBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_BUILD_BAG(m.BuildBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_VALUE_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.BuildValue = {};
    if(Decode_GMDT_BUILD_VALUE(byteBuffer, m.BuildValue) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_BUILD_VALUE_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_BUILD_VALUE(m.BuildValue, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_BUILD_TASK_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_TASK_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_BUILD_TASK = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Var = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_BUILD_TASK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteUint32(m.Var, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_TASK_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfTasks = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfTasks > P.PT_BUILD_TASK_MAX){return false;}
    m.Tasks = [];
    for(let i = 0; i < sizeOfTasks; i++){
        let v = {};
        if(Decode_GMDT_BUILD_TASK(byteBuffer, v) == false){
            return false;
        }
        m.Tasks.push(v);
    }

    return true;
}

var Encode_GMPKG_BUILD_TASK_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Tasks){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Tasks.length > P.PT_BUILD_TASK_MAX){return false;}
        NetData.NetWriteInt32(m.Tasks.length, byteBuffer);
        for(let v of m.Tasks){
            if(Encode_GMDT_BUILD_TASK(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_BUILD_TASK_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_TASK_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMPKG_BUILD_TASK_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Task = {};
    if(Decode_GMDT_BUILD_TASK(byteBuffer, m.Task) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_BUILD_TASK_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_BUILD_TASK(m.Task, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_BUILD_TASK_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.BuildTaskFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_BUILD_TASK_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.BuildTaskFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_FEEDBACK_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FEEDBACK_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMDT_FULI_FEEDBACK = function(byteBuffer, m){
    var ret = {err : false};
    m.VIPLevel = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ID = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Flag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.HeapCZ = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EndTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMDT_FULI_FEEDBACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.VIPLevel, byteBuffer);
    NetData.NetWriteUint8(m.ID, byteBuffer);
    NetData.NetWriteUint8(m.Flag, byteBuffer);
    NetData.NetWriteInt32(m.HeapCZ, byteBuffer);
    NetData.NetWriteUint32(m.EndTime, byteBuffer);

    return true;
}

var Decode_GMPKG_FEEDBACK_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.FeedBack = {};
    if(Decode_GMDT_FULI_FEEDBACK(byteBuffer, m.FeedBack) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_FEEDBACK_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_FULI_FEEDBACK(m.FeedBack, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_FEEDBACK_GET_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FEEDBACK_GET_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FEEDBACK_GET_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.FeedBack = {};
    if(Decode_GMDT_FULI_FEEDBACK(byteBuffer, m.FeedBack) == false){
        return false;
    }

    m.Gold = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Diamond = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FEEDBACK_GET_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_FULI_FEEDBACK(m.FeedBack, byteBuffer) == false){
        return false;
    }
    NetData.NetWriteInt32(m.Gold, byteBuffer);
    NetData.NetWriteInt32(m.Diamond, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FEEDBACK_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.FeedBackFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FEEDBACK_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.FeedBackFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_MILLION_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_MILLION_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_MILLION_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.HeapLogin = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGot = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGot > P.PT_FULI_MILLION_MAX){return false;}
    m.Got = [];
    for(let i = 0; i < sizeOfGot; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.Got.push(v);
    }

    let sizeOfVIPGot = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfVIPGot > P.PT_FULI_MILLION_MAX){return false;}
    m.VIPGot = [];
    for(let i = 0; i < sizeOfVIPGot; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.VIPGot.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_MILLION_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteInt32(m.HeapLogin, byteBuffer);
    if(!m.Got){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Got.length > P.PT_FULI_MILLION_MAX){return false;}
        NetData.NetWriteInt32(m.Got.length, byteBuffer);
        for(let v of m.Got){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }
    if(!m.VIPGot){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.VIPGot.length > P.PT_FULI_MILLION_MAX){return false;}
        NetData.NetWriteInt32(m.VIPGot.length, byteBuffer);
        for(let v of m.VIPGot){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_FULI_MILLION_GET_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.RewardID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.VIPGet = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_MILLION_GET_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.RewardID, byteBuffer);
    NetData.NetWriteUint8(m.VIPGet, byteBuffer);

    return true;
}

var Decode_GMPKG_FULI_MILLION_GET_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfGot = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfGot > P.PT_FULI_MILLION_MAX){return false;}
    m.Got = [];
    for(let i = 0; i < sizeOfGot; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.Got.push(v);
    }

    let sizeOfVIPGot = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfVIPGot > P.PT_FULI_MILLION_MAX){return false;}
    m.VIPGot = [];
    for(let i = 0; i < sizeOfVIPGot; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.VIPGot.push(v);
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FULI_MILLION_GET_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.Got){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Got.length > P.PT_FULI_MILLION_MAX){return false;}
        NetData.NetWriteInt32(m.Got.length, byteBuffer);
        for(let v of m.Got){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }
    if(!m.VIPGot){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.VIPGot.length > P.PT_FULI_MILLION_MAX){return false;}
        NetData.NetWriteInt32(m.VIPGot.length, byteBuffer);
        for(let v of m.VIPGot){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FULI_MILLION_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.StatFlag = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULI_MILLION_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.StatFlag, byteBuffer);

    return true;
}

var Decode_GMPKG_NEW_TASK_GET_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.NewTaskID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_NEW_TASK_GET_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint16(m.NewTaskID, byteBuffer);

    return true;
}

var Decode_GMPKG_NEW_TASK_GET_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.NewTaskBag = {};
    if(Decode_GMDT_NEW_TASK_BAG(byteBuffer, m.NewTaskBag) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_NEW_TASK_GET_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_NEW_TASK_BAG(m.NewTaskBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_NEW_TASK_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.NewTaskBag = {};
    if(Decode_GMDT_NEW_TASK_BAG(byteBuffer, m.NewTaskBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_NEW_TASK_NTF = function(m, byteBuffer){
    if(!m){return false;}
    if(Encode_GMDT_NEW_TASK_BAG(m.NewTaskBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_FLYING_CHESS_GO_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.MultipleDice = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RemoteDice = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FLYING_CHESS_GO_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.MultipleDice, byteBuffer);
    NetData.NetWriteUint8(m.RemoteDice, byteBuffer);

    return true;
}

var Decode_GMPKG_FLYING_CHESS_GO_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.FlyingChessBag = {};
    if(Decode_GMDT_FLYING_CHESS_BAG(byteBuffer, m.FlyingChessBag) == false){
        return false;
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    m.MultipleDice = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.EventIntegration = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.EventHonor = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoResult = {};
    if(Decode_GMDT_FLYING_CHESS_GO_RESULT(byteBuffer, m.GoResult) == false){
        return false;
    }

    m.MultipleGoResult = {};
    if(Decode_GMDT_FLYING_CHESS_MULTIPLE_GO_RESULT(byteBuffer, m.MultipleGoResult) == false){
        return false;
    }

    m.EncounterResult = {};
    if(Decode_GMDT_FLYING_CHESS_ENCOUNTER_RESULT(byteBuffer, m.EncounterResult) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_FLYING_CHESS_GO_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(Encode_GMDT_FLYING_CHESS_BAG(m.FlyingChessBag, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    NetData.NetWriteUint8(m.MultipleDice, byteBuffer);
    NetData.NetWriteUint32(m.EventIntegration, byteBuffer);
    NetData.NetWriteUint32(m.EventHonor, byteBuffer);
    if(Encode_GMDT_FLYING_CHESS_GO_RESULT(m.GoResult, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_FLYING_CHESS_MULTIPLE_GO_RESULT(m.MultipleGoResult, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_FLYING_CHESS_ENCOUNTER_RESULT(m.EncounterResult, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_FLYING_CHESS_PAPER_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Choice = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FLYING_CHESS_PAPER_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Choice, byteBuffer);

    return true;
}

var Decode_GMPKG_FLYING_CHESS_PAPER_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Result = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChessID = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FLYING_CHESS_PAPER_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Result, byteBuffer);
    NetData.NetWriteUint16(m.ChessID, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FLYING_CHESS_BUY_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Times = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FLYING_CHESS_BUY_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.Times, byteBuffer);

    return true;
}

var Decode_GMPKG_FLYING_CHESS_BUY_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Honor = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    let sizeOfItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfItem > P.PT_BAG_MAX_SIZE){return false;}
    m.Item = [];
    for(let i = 0; i < sizeOfItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.Item.push(v);
    }

    return true;
}

var Encode_GMPKG_FLYING_CHESS_BUY_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint32(m.Honor, byteBuffer);
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }
    if(!m.Item){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Item.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.Item.length, byteBuffer);
        for(let v of m.Item){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }

    return true;
}

var Decode_GMPKG_FLYING_CHESS_BUY_DICE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.Count = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FLYING_CHESS_BUY_DICE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint8(m.Count, byteBuffer);

    return true;
}

var Decode_GMPKG_FLYING_CHESS_BUY_DICE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiceBuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiceCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.RemoteDiceBuyTimes = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.RemoteDiceCount = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FLYING_CHESS_BUY_DICE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.DiceBuyTimes, byteBuffer);
    NetData.NetWriteUint16(m.DiceCount, byteBuffer);
    NetData.NetWriteUint8(m.RemoteDiceBuyTimes, byteBuffer);
    NetData.NetWriteUint16(m.RemoteDiceCount, byteBuffer);

    return true;
}

var Decode_GMPKG_FLYING_CHESS_EXCHANGE_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfID > P.PT_CONST_100){return false;}
    m.ID = [];
    for(let i = 0; i < sizeOfID; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.ID.push(v);
    }

    return true;
}

var Encode_GMPKG_FLYING_CHESS_EXCHANGE_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.ID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ID.length > P.PT_CONST_100){return false;}
        NetData.NetWriteInt32(m.ID.length, byteBuffer);
        for(let v of m.ID){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_FLYING_CHESS_EXCHANGE_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfID > P.PT_CONST_100){return false;}
    m.ID = [];
    for(let i = 0; i < sizeOfID; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.ID.push(v);
    }

    m.Honor = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfExchangedReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfExchangedReward > P.PT_FLYING_CHESS_EXCHANGE_MAX){return false;}
    m.ExchangedReward = [];
    for(let i = 0; i < sizeOfExchangedReward; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.ExchangedReward.push(v);
    }

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_FLYING_CHESS_EXCHANGE_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.ID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ID.length > P.PT_CONST_100){return false;}
        NetData.NetWriteInt32(m.ID.length, byteBuffer);
        for(let v of m.ID){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    NetData.NetWriteUint32(m.Honor, byteBuffer);
    if(!m.ExchangedReward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ExchangedReward.length > P.PT_FLYING_CHESS_EXCHANGE_MAX){return false;}
        NetData.NetWriteInt32(m.ExchangedReward.length, byteBuffer);
        for(let v of m.ExchangedReward){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_FLYING_CHESS_HONOR_NTF = function(byteBuffer, m){
    var ret = {err : false};
    m.Honor = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FLYING_CHESS_HONOR_NTF = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint32(m.Honor, byteBuffer);

    return true;
}

var Decode_GMPKG_FULL_BOSS_DATA_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULL_BOSS_DATA_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULL_BOSS_DATA_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.TopDamage = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfDamageReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDamageReward > P.PT_FULL_BOSS_REWARD_MAX){return false;}
    m.DamageReward = [];
    for(let i = 0; i < sizeOfDamageReward; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.DamageReward.push(v);
    }

    m.Juji = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.JujiTotal = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldQH = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldQHAdd = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondQH = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondQHAdd = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULL_BOSS_DATA_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.Attack, byteBuffer);
    NetData.NetWriteUint64(m.TopDamage, byteBuffer);
    if(!m.DamageReward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.DamageReward.length > P.PT_FULL_BOSS_REWARD_MAX){return false;}
        NetData.NetWriteInt32(m.DamageReward.length, byteBuffer);
        for(let v of m.DamageReward){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }
    NetData.NetWriteUint16(m.Juji, byteBuffer);
    NetData.NetWriteUint16(m.JujiTotal, byteBuffer);
    NetData.NetWriteUint16(m.GoldQH, byteBuffer);
    NetData.NetWriteUint16(m.GoldQHAdd, byteBuffer);
    NetData.NetWriteUint16(m.DiamondQH, byteBuffer);
    NetData.NetWriteUint16(m.DiamondQHAdd, byteBuffer);

    return true;
}

var Decode_GMPKG_FULL_BOSS_ATTACK_START_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULL_BOSS_ATTACK_START_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULL_BOSS_ATTACK_START_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.WDay = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.StartTime = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Seed = NetData.NetReadUint32(byteBuffer, ret);
    if(ret.err){return false;}

    m.ChuZhanConf = {};
    if(Decode_GMDT_CHUZHAN_CONF(byteBuffer, m.ChuZhanConf) == false){
        return false;
    }

    m.PropBag = {};
    if(Decode_GMDT_PROP_BAG(byteBuffer, m.PropBag) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_FULL_BOSS_ATTACK_START_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.WDay, byteBuffer);
    NetData.NetWriteUint32(m.StartTime, byteBuffer);
    NetData.NetWriteUint32(m.Seed, byteBuffer);
    if(Encode_GMDT_CHUZHAN_CONF(m.ChuZhanConf, byteBuffer) == false){
        return false;
    }
    if(Encode_GMDT_PROP_BAG(m.PropBag, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_FULL_BOSS_ATTACK_END_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfDamage = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDamage > P.PT_TOKEN_LEN){return false;}
    m.Damage = [];
    for(let i = 0; i < sizeOfDamage; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.Damage.push(v);
    }

    return true;
}

var Encode_GMPKG_FULL_BOSS_ATTACK_END_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.Damage){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.Damage.length > P.PT_TOKEN_LEN){return false;}
        NetData.NetWriteInt32(m.Damage.length, byteBuffer);
        for(let v of m.Damage){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_FULL_BOSS_ATTACK_END_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Attack = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.Damage = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    m.TopDamage = NetData.NetReadUint64(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfBaseRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfBaseRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.BaseRewardItem = [];
    for(let i = 0; i < sizeOfBaseRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.BaseRewardItem.push(v);
    }

    let sizeOfVipRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfVipRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.VipRewardItem = [];
    for(let i = 0; i < sizeOfVipRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.VipRewardItem.push(v);
    }

    let sizeOfDiamondRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDiamondRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.DiamondRewardItem = [];
    for(let i = 0; i < sizeOfDiamondRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.DiamondRewardItem.push(v);
    }

    let sizeOfTotalRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfTotalRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.TotalRewardItem = [];
    for(let i = 0; i < sizeOfTotalRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.TotalRewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_FULL_BOSS_ATTACK_END_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.Attack, byteBuffer);
    NetData.NetWriteUint64(m.Damage, byteBuffer);
    NetData.NetWriteUint64(m.TopDamage, byteBuffer);
    if(!m.BaseRewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.BaseRewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.BaseRewardItem.length, byteBuffer);
        for(let v of m.BaseRewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.VipRewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.VipRewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.VipRewardItem.length, byteBuffer);
        for(let v of m.VipRewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.DiamondRewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.DiamondRewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.DiamondRewardItem.length, byteBuffer);
        for(let v of m.DiamondRewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(!m.TotalRewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.TotalRewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.TotalRewardItem.length, byteBuffer);
        for(let v of m.TotalRewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_FULL_BOSS_ATTACK_QUIT_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULL_BOSS_ATTACK_QUIT_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULL_BOSS_ATTACK_QUIT_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULL_BOSS_ATTACK_QUIT_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);

    return true;
}

var Decode_GMPKG_FULL_BOSS_REWARD_REQ = function(byteBuffer, m){
    var ret = {err : false};
    let sizeOfID = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfID > P.PT_CONST_100){return false;}
    m.ID = [];
    for(let i = 0; i < sizeOfID; i++){
        let v = NetData.NetReadUint8(byteBuffer, ret);
        if(ret.err){return false;}
        m.ID.push(v);
    }

    return true;
}

var Encode_GMPKG_FULL_BOSS_REWARD_REQ = function(m, byteBuffer){
    if(!m){return false;}
    if(!m.ID){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.ID.length > P.PT_CONST_100){return false;}
        NetData.NetWriteInt32(m.ID.length, byteBuffer);
        for(let v of m.ID){
            NetData.NetWriteUint8(v, byteBuffer);
        }
    }

    return true;
}

var Decode_GMPKG_FULL_BOSS_REWARD_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    let sizeOfDamageReward = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfDamageReward > P.PT_FULL_BOSS_REWARD_MAX){return false;}
    m.DamageReward = [];
    for(let i = 0; i < sizeOfDamageReward; i++){
        let v = NetData.NetReadUint16(byteBuffer, ret);
        if(ret.err){return false;}
        m.DamageReward.push(v);
    }

    let sizeOfRewardItem = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}
    if(sizeOfRewardItem > P.PT_BAG_MAX_SIZE){return false;}
    m.RewardItem = [];
    for(let i = 0; i < sizeOfRewardItem; i++){
        let v = {};
        if(Decode_GMDT_ITEM_COUNT(byteBuffer, v) == false){
            return false;
        }
        m.RewardItem.push(v);
    }

    m.ItemChange = {};
    if(Decode_GMDT_ITEM_CHANGE(byteBuffer, m.ItemChange) == false){
        return false;
    }

    return true;
}

var Encode_GMPKG_FULL_BOSS_REWARD_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    if(!m.DamageReward){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.DamageReward.length > P.PT_FULL_BOSS_REWARD_MAX){return false;}
        NetData.NetWriteInt32(m.DamageReward.length, byteBuffer);
        for(let v of m.DamageReward){
            NetData.NetWriteUint16(v, byteBuffer);
        }
    }
    if(!m.RewardItem){
        NetData.NetWriteInt32(0, byteBuffer);
    }else{
        if(m.RewardItem.length > P.PT_BAG_MAX_SIZE){return false;}
        NetData.NetWriteInt32(m.RewardItem.length, byteBuffer);
        for(let v of m.RewardItem){
            if(Encode_GMDT_ITEM_COUNT(v, byteBuffer) == false){
                return false;
            }
        }
    }
    if(Encode_GMDT_ITEM_CHANGE(m.ItemChange, byteBuffer) == false){
        return false;
    }

    return true;
}

var Decode_GMPKG_FULL_BOSS_JUJI_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Reserved = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULL_BOSS_JUJI_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Reserved, byteBuffer);

    return true;
}

var Decode_GMPKG_FULL_BOSS_JUJI_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Juji = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.JujiTotal = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULL_BOSS_JUJI_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint16(m.Juji, byteBuffer);
    NetData.NetWriteUint16(m.JujiTotal, byteBuffer);

    return true;
}

var Decode_GMPKG_FULL_BOSS_QH_REQ = function(byteBuffer, m){
    var ret = {err : false};
    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULL_BOSS_QH_REQ = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteUint8(m.Type, byteBuffer);

    return true;
}

var Decode_GMPKG_FULL_BOSS_QH_ACK = function(byteBuffer, m){
    var ret = {err : false};
    m.ErrCode = NetData.NetReadInt32(byteBuffer, ret);
    if(ret.err){return false;}

    m.Type = NetData.NetReadUint8(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldQH = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.GoldQHAdd = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondQH = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    m.DiamondQHAdd = NetData.NetReadUint16(byteBuffer, ret);
    if(ret.err){return false;}

    return true;
}

var Encode_GMPKG_FULL_BOSS_QH_ACK = function(m, byteBuffer){
    if(!m){return false;}
    NetData.NetWriteInt32(m.ErrCode, byteBuffer);
    NetData.NetWriteUint8(m.Type, byteBuffer);
    NetData.NetWriteUint16(m.GoldQH, byteBuffer);
    NetData.NetWriteUint16(m.GoldQHAdd, byteBuffer);
    NetData.NetWriteUint16(m.DiamondQH, byteBuffer);
    NetData.NetWriteUint16(m.DiamondQHAdd, byteBuffer);

    return true;
}

P.Decode = function(byteBuffer, msg){
    if(byteBuffer.position + 8 > byteBuffer.length){
        return -1;
    }

    let flag = byteBuffer.readUint8();
    let checkSum = byteBuffer.readUint8();
    let msgId = byteBuffer.readUint16();
    let dataLen = byteBuffer.readUint32();

    msg.id = msgId;
    msg.data = {};

    let decodeFunc = P.m_oMapDecodeFunc[msgId];
    if (!decodeFunc){
        return -1;
    }else{
        if(decodeFunc(byteBuffer, msg.data) == false){
            return -1;
        }
        return msgId;
    }
};

P.Encode = function(msgId, msg, byteBuffer){
    let encodeFunc = P.m_oMapEncodeFunc[msgId];
    if(!encodeFunc){
        return -1;
    }else{
        byteBuffer.writeUint32(0);
        byteBuffer.writeUint32(0);
        if(encodeFunc(msg, byteBuffer) < 0){
            return -1;
        }
    }

    let flag = 0xb0;
    let dataLen = byteBuffer.offset - 8;
    let checkSum = NetData.NetHeaderCheckSum(dataLen, msgId);

    byteBuffer.offset = 0;
    byteBuffer.writeUint8(flag);
    byteBuffer.writeUint8(checkSum);
    byteBuffer.writeUint16(msgId);
    byteBuffer.writeUint32(dataLen);
    byteBuffer.offset = dataLen+8;
    return dataLen+8;
};

P.Init = function() {
    P.m_oMapDecodeFunc = {};
    P.m_oMapEncodeFunc = {};

    P.m_oMapDecodeFunc[P.GMID_PING] = Decode_GMPKG_PING;
    P.m_oMapEncodeFunc[P.GMID_PING] = Encode_GMPKG_PING;
    P.m_oMapDecodeFunc[P.GMID_BIGDATA_PING] = Decode_GMPKG_BIGDATA_PING;
    P.m_oMapEncodeFunc[P.GMID_BIGDATA_PING] = Encode_GMPKG_BIGDATA_PING;
    P.m_oMapDecodeFunc[P.GMID_LOG_REQ] = Decode_GMPKG_LOG_REQ;
    P.m_oMapEncodeFunc[P.GMID_LOG_REQ] = Encode_GMPKG_LOG_REQ;
    P.m_oMapDecodeFunc[P.GMID_LOGIN_ACK] = Decode_GMPKG_LOGIN_ACK;
    P.m_oMapEncodeFunc[P.GMID_LOGIN_ACK] = Encode_GMPKG_LOGIN_ACK;
    P.m_oMapDecodeFunc[P.GMID_BIG_LOGIN_REQ] = Decode_GMPKG_BIG_LOGIN_REQ;
    P.m_oMapEncodeFunc[P.GMID_BIG_LOGIN_REQ] = Encode_GMPKG_BIG_LOGIN_REQ;
    P.m_oMapDecodeFunc[P.GMID_BIG_LOGIN_ACK] = Decode_GMPKG_BIG_LOGIN_ACK;
    P.m_oMapEncodeFunc[P.GMID_BIG_LOGIN_ACK] = Encode_GMPKG_BIG_LOGIN_ACK;
    P.m_oMapDecodeFunc[P.GMID_SMALL_LOGIN_REQ] = Decode_GMPKG_SMALL_LOGIN_REQ;
    P.m_oMapEncodeFunc[P.GMID_SMALL_LOGIN_REQ] = Encode_GMPKG_SMALL_LOGIN_REQ;
    P.m_oMapDecodeFunc[P.GMID_SMALL_LOGIN_ACK] = Decode_GMPKG_SMALL_LOGIN_ACK;
    P.m_oMapEncodeFunc[P.GMID_SMALL_LOGIN_ACK] = Encode_GMPKG_SMALL_LOGIN_ACK;
    P.m_oMapDecodeFunc[P.GMID_LOGOUT_REQ] = Decode_GMPKG_LOGOUT_REQ;
    P.m_oMapEncodeFunc[P.GMID_LOGOUT_REQ] = Encode_GMPKG_LOGOUT_REQ;
    P.m_oMapDecodeFunc[P.GMID_LOGOUT_ACK] = Decode_GMPKG_LOGOUT_ACK;
    P.m_oMapEncodeFunc[P.GMID_LOGOUT_ACK] = Encode_GMPKG_LOGOUT_ACK;
    P.m_oMapDecodeFunc[P.GMID_BIND_ACCOUNT_REQ] = Decode_GMPKG_BIND_ACCOUNT_REQ;
    P.m_oMapEncodeFunc[P.GMID_BIND_ACCOUNT_REQ] = Encode_GMPKG_BIND_ACCOUNT_REQ;
    P.m_oMapDecodeFunc[P.GMID_BIND_ACCOUNT_ACK] = Decode_GMPKG_BIND_ACCOUNT_ACK;
    P.m_oMapEncodeFunc[P.GMID_BIND_ACCOUNT_ACK] = Encode_GMPKG_BIND_ACCOUNT_ACK;
    P.m_oMapDecodeFunc[P.GMID_CREATE_ROLE_REQ] = Decode_GMPKG_CREATE_ROLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_CREATE_ROLE_REQ] = Encode_GMPKG_CREATE_ROLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_CREATE_ROLE_ACK] = Decode_GMPKG_CREATE_ROLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_CREATE_ROLE_ACK] = Encode_GMPKG_CREATE_ROLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_CREATE_ROLE_NTF] = Decode_GMPKG_CREATE_ROLE_NTF;
    P.m_oMapEncodeFunc[P.GMID_CREATE_ROLE_NTF] = Encode_GMPKG_CREATE_ROLE_NTF;
    P.m_oMapDecodeFunc[P.GMID_ROLE_RENAME_REQ] = Decode_GMPKG_ROLE_RENAME_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLE_RENAME_REQ] = Encode_GMPKG_ROLE_RENAME_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLE_RENAME_ACK] = Decode_GMPKG_ROLE_RENAME_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLE_RENAME_ACK] = Encode_GMPKG_ROLE_RENAME_ACK;
    P.m_oMapDecodeFunc[P.GMID_KICK_PLAYER_NTF] = Decode_GMPKG_KICK_PLAYER_NTF;
    P.m_oMapEncodeFunc[P.GMID_KICK_PLAYER_NTF] = Encode_GMPKG_KICK_PLAYER_NTF;
    P.m_oMapDecodeFunc[P.GMID_STAT_FLAGS_REQ] = Decode_GMPKG_STAT_FLAGS_REQ;
    P.m_oMapEncodeFunc[P.GMID_STAT_FLAGS_REQ] = Encode_GMPKG_STAT_FLAGS_REQ;
    P.m_oMapDecodeFunc[P.GMID_STAT_FLAGS_NTF] = Decode_GMPKG_STAT_FLAGS_NTF;
    P.m_oMapEncodeFunc[P.GMID_STAT_FLAGS_NTF] = Encode_GMPKG_STAT_FLAGS_NTF;
    P.m_oMapDecodeFunc[P.GMID_CLIENT_EVENT_RPT] = Decode_GMPKG_CLIENT_EVENT_RPT;
    P.m_oMapEncodeFunc[P.GMID_CLIENT_EVENT_RPT] = Encode_GMPKG_CLIENT_EVENT_RPT;
    P.m_oMapDecodeFunc[P.GMID_ENTERGAME_NTF] = Decode_GMPKG_ENTERGAME_NTF;
    P.m_oMapEncodeFunc[P.GMID_ENTERGAME_NTF] = Encode_GMPKG_ENTERGAME_NTF;
    P.m_oMapDecodeFunc[P.GMID_VIEW_PLAYER_REQ] = Decode_GMPKG_VIEW_PLAYER_REQ;
    P.m_oMapEncodeFunc[P.GMID_VIEW_PLAYER_REQ] = Encode_GMPKG_VIEW_PLAYER_REQ;
    P.m_oMapDecodeFunc[P.GMID_VIEW_PLAYER_ACK] = Decode_GMPKG_VIEW_PLAYER_ACK;
    P.m_oMapEncodeFunc[P.GMID_VIEW_PLAYER_ACK] = Encode_GMPKG_VIEW_PLAYER_ACK;
    P.m_oMapDecodeFunc[P.GMID_PLAYER_PROP_REQ] = Decode_GMPKG_PLAYER_PROP_REQ;
    P.m_oMapEncodeFunc[P.GMID_PLAYER_PROP_REQ] = Encode_GMPKG_PLAYER_PROP_REQ;
    P.m_oMapDecodeFunc[P.GMID_PLAYER_PROP_ACK] = Decode_GMPKG_PLAYER_PROP_ACK;
    P.m_oMapEncodeFunc[P.GMID_PLAYER_PROP_ACK] = Encode_GMPKG_PLAYER_PROP_ACK;
    P.m_oMapDecodeFunc[P.GMID_PLAYER_PROP_NTF] = Decode_GMPKG_PLAYER_PROP_NTF;
    P.m_oMapEncodeFunc[P.GMID_PLAYER_PROP_NTF] = Encode_GMPKG_PLAYER_PROP_NTF;
    P.m_oMapDecodeFunc[P.GMID_COMBAT_POINT_REQ] = Decode_GMPKG_COMBAT_POINT_REQ;
    P.m_oMapEncodeFunc[P.GMID_COMBAT_POINT_REQ] = Encode_GMPKG_COMBAT_POINT_REQ;
    P.m_oMapDecodeFunc[P.GMID_COMBAT_POINT_ACK] = Decode_GMPKG_COMBAT_POINT_ACK;
    P.m_oMapEncodeFunc[P.GMID_COMBAT_POINT_ACK] = Encode_GMPKG_COMBAT_POINT_ACK;
    P.m_oMapDecodeFunc[P.GMID_COMBAT_POINT_NTF] = Decode_GMPKG_COMBAT_POINT_NTF;
    P.m_oMapEncodeFunc[P.GMID_COMBAT_POINT_NTF] = Encode_GMPKG_COMBAT_POINT_NTF;
    P.m_oMapDecodeFunc[P.GMID_PLAYER_INFO_PANEL_REQ] = Decode_GMPKG_PLAYER_INFO_PANEL_REQ;
    P.m_oMapEncodeFunc[P.GMID_PLAYER_INFO_PANEL_REQ] = Encode_GMPKG_PLAYER_INFO_PANEL_REQ;
    P.m_oMapDecodeFunc[P.GMID_PLAYER_INFO_PANEL_ACK] = Decode_GMPKG_PLAYER_INFO_PANEL_ACK;
    P.m_oMapEncodeFunc[P.GMID_PLAYER_INFO_PANEL_ACK] = Encode_GMPKG_PLAYER_INFO_PANEL_ACK;
    P.m_oMapDecodeFunc[P.GMID_NOTICE_REQ] = Decode_GMPKG_NOTICE_REQ;
    P.m_oMapEncodeFunc[P.GMID_NOTICE_REQ] = Encode_GMPKG_NOTICE_REQ;
    P.m_oMapDecodeFunc[P.GMID_NOTICE_ACK] = Decode_GMPKG_NOTICE_ACK;
    P.m_oMapEncodeFunc[P.GMID_NOTICE_ACK] = Encode_GMPKG_NOTICE_ACK;
    P.m_oMapDecodeFunc[P.GMID_NOTICE_SCROLL_REQ] = Decode_GMPKG_NOTICE_SCROLL_REQ;
    P.m_oMapEncodeFunc[P.GMID_NOTICE_SCROLL_REQ] = Encode_GMPKG_NOTICE_SCROLL_REQ;
    P.m_oMapDecodeFunc[P.GMID_NOTICE_SCROLL_ACK] = Decode_GMPKG_NOTICE_SCROLL_ACK;
    P.m_oMapEncodeFunc[P.GMID_NOTICE_SCROLL_ACK] = Encode_GMPKG_NOTICE_SCROLL_ACK;
    P.m_oMapDecodeFunc[P.GMID_NOTICE_CHANGE_NTF] = Decode_GMPKG_NOTICE_CHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_NOTICE_CHANGE_NTF] = Encode_GMPKG_NOTICE_CHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_NOTICE_SCROLL_NTF] = Decode_GMPKG_NOTICE_SCROLL_NTF;
    P.m_oMapEncodeFunc[P.GMID_NOTICE_SCROLL_NTF] = Encode_GMPKG_NOTICE_SCROLL_NTF;
    P.m_oMapDecodeFunc[P.GMID_GMCMD_REQ] = Decode_GMPKG_GMCMD_REQ;
    P.m_oMapEncodeFunc[P.GMID_GMCMD_REQ] = Encode_GMPKG_GMCMD_REQ;
    P.m_oMapDecodeFunc[P.GMID_DIAMON_CZ_NTF] = Decode_GMPKG_DIAMON_CZ_NTF;
    P.m_oMapEncodeFunc[P.GMID_DIAMON_CZ_NTF] = Encode_GMPKG_DIAMON_CZ_NTF;
    P.m_oMapDecodeFunc[P.GMID_DIAMOND_CHANGE_NTF] = Decode_GMPKG_DIAMOND_CHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_DIAMOND_CHANGE_NTF] = Encode_GMPKG_DIAMOND_CHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_GOLD_CHANGE_NTF] = Decode_GMPKG_GOLD_CHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_GOLD_CHANGE_NTF] = Encode_GMPKG_GOLD_CHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_VIP_CHANGE_NTF] = Decode_GMPKG_VIP_CHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_VIP_CHANGE_NTF] = Encode_GMPKG_VIP_CHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_VIPEXP_CHANGE_NTF] = Decode_GMPKG_VIPEXP_CHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_VIPEXP_CHANGE_NTF] = Encode_GMPKG_VIPEXP_CHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_EXP_CHANGE_NTF] = Decode_GMPKG_EXP_CHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_EXP_CHANGE_NTF] = Encode_GMPKG_EXP_CHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_DAY_PASS_NTF] = Decode_GMPKG_DAY_PASS_NTF;
    P.m_oMapEncodeFunc[P.GMID_DAY_PASS_NTF] = Encode_GMPKG_DAY_PASS_NTF;
    P.m_oMapDecodeFunc[P.GMID_BAG_ITEM_CHANGE_NTF] = Decode_GMPKG_BAG_ITEM_CHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_BAG_ITEM_CHANGE_NTF] = Encode_GMPKG_BAG_ITEM_CHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_ITEM_COMPOSE_REQ] = Decode_GMPKG_ITEM_COMPOSE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ITEM_COMPOSE_REQ] = Encode_GMPKG_ITEM_COMPOSE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ITEM_COMPOSE_ACK] = Decode_GMPKG_ITEM_COMPOSE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ITEM_COMPOSE_ACK] = Encode_GMPKG_ITEM_COMPOSE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ITEM_SELL_REQ] = Decode_GMPKG_ITEM_SELL_REQ;
    P.m_oMapEncodeFunc[P.GMID_ITEM_SELL_REQ] = Encode_GMPKG_ITEM_SELL_REQ;
    P.m_oMapDecodeFunc[P.GMID_ITEM_SELL_ACK] = Decode_GMPKG_ITEM_SELL_ACK;
    P.m_oMapEncodeFunc[P.GMID_ITEM_SELL_ACK] = Encode_GMPKG_ITEM_SELL_ACK;
    P.m_oMapDecodeFunc[P.GMID_ITEM_USE_REQ] = Decode_GMPKG_ITEM_USE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ITEM_USE_REQ] = Encode_GMPKG_ITEM_USE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ITEM_USE_ACK] = Decode_GMPKG_ITEM_USE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ITEM_USE_ACK] = Encode_GMPKG_ITEM_USE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ITEM_HECHENG_REQ] = Decode_GMPKG_ITEM_HECHENG_REQ;
    P.m_oMapEncodeFunc[P.GMID_ITEM_HECHENG_REQ] = Encode_GMPKG_ITEM_HECHENG_REQ;
    P.m_oMapDecodeFunc[P.GMID_ITEM_HECHENG_ACK] = Decode_GMPKG_ITEM_HECHENG_ACK;
    P.m_oMapEncodeFunc[P.GMID_ITEM_HECHENG_ACK] = Encode_GMPKG_ITEM_HECHENG_ACK;
    P.m_oMapDecodeFunc[P.GMID_ITEM_COMPOSE_BUY_REQ] = Decode_GMPKG_ITEM_COMPOSE_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_ITEM_COMPOSE_BUY_REQ] = Encode_GMPKG_ITEM_COMPOSE_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_ITEM_COMPOSE_BUY_ACK] = Decode_GMPKG_ITEM_COMPOSE_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_ITEM_COMPOSE_BUY_ACK] = Encode_GMPKG_ITEM_COMPOSE_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_ITEM_BUY_REQ] = Decode_GMPKG_ITEM_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_ITEM_BUY_REQ] = Encode_GMPKG_ITEM_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_ITEM_BUY_ACK] = Decode_GMPKG_ITEM_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_ITEM_BUY_ACK] = Encode_GMPKG_ITEM_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_ITEM_NTF] = Decode_GMPKG_ITEM_NTF;
    P.m_oMapEncodeFunc[P.GMID_ITEM_NTF] = Encode_GMPKG_ITEM_NTF;
    P.m_oMapDecodeFunc[P.GMID_ITEM_REAL_REQ] = Decode_GMPKG_ITEM_REAL_REQ;
    P.m_oMapEncodeFunc[P.GMID_ITEM_REAL_REQ] = Encode_GMPKG_ITEM_REAL_REQ;
    P.m_oMapDecodeFunc[P.GMID_ITEM_REAL_ACK] = Decode_GMPKG_ITEM_REAL_ACK;
    P.m_oMapEncodeFunc[P.GMID_ITEM_REAL_ACK] = Encode_GMPKG_ITEM_REAL_ACK;
    P.m_oMapDecodeFunc[P.GMID_ITEM_LIFE_REQ] = Decode_GMPKG_ITEM_LIFE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ITEM_LIFE_REQ] = Encode_GMPKG_ITEM_LIFE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ITEM_LIFE_ACK] = Decode_GMPKG_ITEM_LIFE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ITEM_LIFE_ACK] = Encode_GMPKG_ITEM_LIFE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ITEMBAG_UNLOCK_REQ] = Decode_GMPKG_ITEMBAG_UNLOCK_REQ;
    P.m_oMapEncodeFunc[P.GMID_ITEMBAG_UNLOCK_REQ] = Encode_GMPKG_ITEMBAG_UNLOCK_REQ;
    P.m_oMapDecodeFunc[P.GMID_ITEMBAG_UNLOCK_ACK] = Decode_GMPKG_ITEMBAG_UNLOCK_ACK;
    P.m_oMapEncodeFunc[P.GMID_ITEMBAG_UNLOCK_ACK] = Encode_GMPKG_ITEMBAG_UNLOCK_ACK;
    P.m_oMapDecodeFunc[P.GMID_LEADER_SEL_ICON_REQ] = Decode_GMPKG_LEADER_SEL_ICON_REQ;
    P.m_oMapEncodeFunc[P.GMID_LEADER_SEL_ICON_REQ] = Encode_GMPKG_LEADER_SEL_ICON_REQ;
    P.m_oMapDecodeFunc[P.GMID_LEADER_SEL_ICON_ACK] = Decode_GMPKG_LEADER_SEL_ICON_ACK;
    P.m_oMapEncodeFunc[P.GMID_LEADER_SEL_ICON_ACK] = Encode_GMPKG_LEADER_SEL_ICON_ACK;
    P.m_oMapDecodeFunc[P.GMID_SAVE_CHUZHAN_CONF_REQ] = Decode_GMPKG_SAVE_CHUZHAN_CONF_REQ;
    P.m_oMapEncodeFunc[P.GMID_SAVE_CHUZHAN_CONF_REQ] = Encode_GMPKG_SAVE_CHUZHAN_CONF_REQ;
    P.m_oMapDecodeFunc[P.GMID_SAVE_CHUZHAN_CONF_ACK] = Decode_GMPKG_SAVE_CHUZHAN_CONF_ACK;
    P.m_oMapEncodeFunc[P.GMID_SAVE_CHUZHAN_CONF_ACK] = Encode_GMPKG_SAVE_CHUZHAN_CONF_ACK;
    P.m_oMapDecodeFunc[P.GMID_CHUZHAN_MIX_LEVELUP_REQ] = Decode_GMPKG_CHUZHAN_MIX_LEVELUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_CHUZHAN_MIX_LEVELUP_REQ] = Encode_GMPKG_CHUZHAN_MIX_LEVELUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_CHUZHAN_MIX_LEVELUP_ACK] = Decode_GMPKG_CHUZHAN_MIX_LEVELUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_CHUZHAN_MIX_LEVELUP_ACK] = Encode_GMPKG_CHUZHAN_MIX_LEVELUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_CHUZHAN_MIX_LEVEL_NTF] = Decode_GMPKG_CHUZHAN_MIX_LEVEL_NTF;
    P.m_oMapEncodeFunc[P.GMID_CHUZHAN_MIX_LEVEL_NTF] = Encode_GMPKG_CHUZHAN_MIX_LEVEL_NTF;
    P.m_oMapDecodeFunc[P.GMID_CHUZHAN_DATA_REQ] = Decode_GMPKG_CHUZHAN_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_CHUZHAN_DATA_REQ] = Encode_GMPKG_CHUZHAN_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_CHUZHAN_DATA_ACK] = Decode_GMPKG_CHUZHAN_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_CHUZHAN_DATA_ACK] = Encode_GMPKG_CHUZHAN_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_LEADEREQUIP_LEVELUP_REQ] = Decode_GMPKG_LEADEREQUIP_LEVELUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_LEADEREQUIP_LEVELUP_REQ] = Encode_GMPKG_LEADEREQUIP_LEVELUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_LEADEREQUIP_LEVELUP_ACK] = Decode_GMPKG_LEADEREQUIP_LEVELUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_LEADEREQUIP_LEVELUP_ACK] = Encode_GMPKG_LEADEREQUIP_LEVELUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_LEADEREQUIP_QUALITYUP_REQ] = Decode_GMPKG_LEADEREQUIP_QUALITYUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_LEADEREQUIP_QUALITYUP_REQ] = Encode_GMPKG_LEADEREQUIP_QUALITYUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_LEADEREQUIP_QUALITYUP_ACK] = Decode_GMPKG_LEADEREQUIP_QUALITYUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_LEADEREQUIP_QUALITYUP_ACK] = Encode_GMPKG_LEADEREQUIP_QUALITYUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_ACTIVE_REQ] = Decode_GMPKG_MEMBER_ACTIVE_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_ACTIVE_REQ] = Encode_GMPKG_MEMBER_ACTIVE_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_ACTIVE_ACK] = Decode_GMPKG_MEMBER_ACTIVE_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_ACTIVE_ACK] = Encode_GMPKG_MEMBER_ACTIVE_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_LEVELUP_REQ] = Decode_GMPKG_MEMBER_LEVELUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_LEVELUP_REQ] = Encode_GMPKG_MEMBER_LEVELUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_LEVELUP_ACK] = Decode_GMPKG_MEMBER_LEVELUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_LEVELUP_ACK] = Encode_GMPKG_MEMBER_LEVELUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_QUALITYUP_REQ] = Decode_GMPKG_MEMBER_QUALITYUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_QUALITYUP_REQ] = Encode_GMPKG_MEMBER_QUALITYUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_QUALITYUP_ACK] = Decode_GMPKG_MEMBER_QUALITYUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_QUALITYUP_ACK] = Encode_GMPKG_MEMBER_QUALITYUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_TECH_REFORM_REQ] = Decode_GMPKG_MEMBER_TECH_REFORM_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_TECH_REFORM_REQ] = Encode_GMPKG_MEMBER_TECH_REFORM_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_TECH_REFORM_ACK] = Decode_GMPKG_MEMBER_TECH_REFORM_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_TECH_REFORM_ACK] = Encode_GMPKG_MEMBER_TECH_REFORM_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_TECH_REPLACE_REQ] = Decode_GMPKG_MEMBER_TECH_REPLACE_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_TECH_REPLACE_REQ] = Encode_GMPKG_MEMBER_TECH_REPLACE_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_TECH_REPLACE_ACK] = Decode_GMPKG_MEMBER_TECH_REPLACE_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_TECH_REPLACE_ACK] = Encode_GMPKG_MEMBER_TECH_REPLACE_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_PUTON_REQ] = Decode_GMPKG_MEMBER_EQUIP_PUTON_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_PUTON_REQ] = Encode_GMPKG_MEMBER_EQUIP_PUTON_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_PUTON_ACK] = Decode_GMPKG_MEMBER_EQUIP_PUTON_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_PUTON_ACK] = Encode_GMPKG_MEMBER_EQUIP_PUTON_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_PUTOFF_REQ] = Decode_GMPKG_MEMBER_EQUIP_PUTOFF_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_PUTOFF_REQ] = Encode_GMPKG_MEMBER_EQUIP_PUTOFF_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_PUTOFF_ACK] = Decode_GMPKG_MEMBER_EQUIP_PUTOFF_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_PUTOFF_ACK] = Encode_GMPKG_MEMBER_EQUIP_PUTOFF_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_QUALITYUP_REQ] = Decode_GMPKG_MEMBER_EQUIP_QUALITYUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_QUALITYUP_REQ] = Encode_GMPKG_MEMBER_EQUIP_QUALITYUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_QUALITYUP_ACK] = Decode_GMPKG_MEMBER_EQUIP_QUALITYUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_QUALITYUP_ACK] = Encode_GMPKG_MEMBER_EQUIP_QUALITYUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_SPLIT_REQ] = Decode_GMPKG_MEMBER_EQUIP_SPLIT_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_SPLIT_REQ] = Encode_GMPKG_MEMBER_EQUIP_SPLIT_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_SPLIT_ACK] = Decode_GMPKG_MEMBER_EQUIP_SPLIT_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_SPLIT_ACK] = Encode_GMPKG_MEMBER_EQUIP_SPLIT_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_LEVELUP_REQ] = Decode_GMPKG_MEMBER_EQUIP_LEVELUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_LEVELUP_REQ] = Encode_GMPKG_MEMBER_EQUIP_LEVELUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_LEVELUP_ACK] = Decode_GMPKG_MEMBER_EQUIP_LEVELUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_LEVELUP_ACK] = Encode_GMPKG_MEMBER_EQUIP_LEVELUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_TECH_NTF] = Decode_GMPKG_MEMBER_EQUIP_TECH_NTF;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_TECH_NTF] = Encode_GMPKG_MEMBER_EQUIP_TECH_NTF;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_STARUP_REQ] = Decode_GMPKG_MEMBER_EQUIP_STARUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_STARUP_REQ] = Encode_GMPKG_MEMBER_EQUIP_STARUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_STARUP_ACK] = Decode_GMPKG_MEMBER_EQUIP_STARUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_STARUP_ACK] = Encode_GMPKG_MEMBER_EQUIP_STARUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_REBIRTH_REQ] = Decode_GMPKG_MEMBER_EQUIP_REBIRTH_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_REBIRTH_REQ] = Encode_GMPKG_MEMBER_EQUIP_REBIRTH_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_REBIRTH_ACK] = Decode_GMPKG_MEMBER_EQUIP_REBIRTH_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_REBIRTH_ACK] = Encode_GMPKG_MEMBER_EQUIP_REBIRTH_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_LEVELUP_YJ_REQ] = Decode_GMPKG_MEMBER_EQUIP_LEVELUP_YJ_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_LEVELUP_YJ_REQ] = Encode_GMPKG_MEMBER_EQUIP_LEVELUP_YJ_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_LEVELUP_YJ_ACK] = Decode_GMPKG_MEMBER_EQUIP_LEVELUP_YJ_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_LEVELUP_YJ_ACK] = Encode_GMPKG_MEMBER_EQUIP_LEVELUP_YJ_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_REFINE_REQ] = Decode_GMPKG_MEMBER_EQUIP_REFINE_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_REFINE_REQ] = Encode_GMPKG_MEMBER_EQUIP_REFINE_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_REFINE_ACK] = Decode_GMPKG_MEMBER_EQUIP_REFINE_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_REFINE_ACK] = Encode_GMPKG_MEMBER_EQUIP_REFINE_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_REFINEUP_REQ] = Decode_GMPKG_MEMBER_EQUIP_REFINEUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_REFINEUP_REQ] = Encode_GMPKG_MEMBER_EQUIP_REFINEUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_EQUIP_REFINEUP_ACK] = Decode_GMPKG_MEMBER_EQUIP_REFINEUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_EQUIP_REFINEUP_ACK] = Encode_GMPKG_MEMBER_EQUIP_REFINEUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_STAR_UP_REQ] = Decode_GMPKG_MEMBER_STAR_UP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_STAR_UP_REQ] = Encode_GMPKG_MEMBER_STAR_UP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_STAR_UP_ACK] = Decode_GMPKG_MEMBER_STAR_UP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_STAR_UP_ACK] = Encode_GMPKG_MEMBER_STAR_UP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_REBIRTH_SHOW_REQ] = Decode_GMPKG_MEMBER_REBIRTH_SHOW_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_REBIRTH_SHOW_REQ] = Encode_GMPKG_MEMBER_REBIRTH_SHOW_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_REBIRTH_SHOW_ACK] = Decode_GMPKG_MEMBER_REBIRTH_SHOW_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_REBIRTH_SHOW_ACK] = Encode_GMPKG_MEMBER_REBIRTH_SHOW_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_REBIRTH_REQ] = Decode_GMPKG_MEMBER_REBIRTH_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_REBIRTH_REQ] = Encode_GMPKG_MEMBER_REBIRTH_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_REBIRTH_ACK] = Decode_GMPKG_MEMBER_REBIRTH_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_REBIRTH_ACK] = Encode_GMPKG_MEMBER_REBIRTH_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_SPECIAL_LEVELUP_REQ] = Decode_GMPKG_MEMBER_SPECIAL_LEVELUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_SPECIAL_LEVELUP_REQ] = Encode_GMPKG_MEMBER_SPECIAL_LEVELUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_SPECIAL_LEVELUP_ACK] = Decode_GMPKG_MEMBER_SPECIAL_LEVELUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_SPECIAL_LEVELUP_ACK] = Encode_GMPKG_MEMBER_SPECIAL_LEVELUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_SPECIAL_QUALITYUP_REQ] = Decode_GMPKG_MEMBER_SPECIAL_QUALITYUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_SPECIAL_QUALITYUP_REQ] = Encode_GMPKG_MEMBER_SPECIAL_QUALITYUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_SPECIAL_QUALITYUP_ACK] = Decode_GMPKG_MEMBER_SPECIAL_QUALITYUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_SPECIAL_QUALITYUP_ACK] = Encode_GMPKG_MEMBER_SPECIAL_QUALITYUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_COMBAT_DATA_REQ] = Decode_GMPKG_MEMBER_COMBAT_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_COMBAT_DATA_REQ] = Encode_GMPKG_MEMBER_COMBAT_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_COMBAT_DATA_ACK] = Decode_GMPKG_MEMBER_COMBAT_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_COMBAT_DATA_ACK] = Encode_GMPKG_MEMBER_COMBAT_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_WEAPON_ACTIVE_REQ] = Decode_GMPKG_MEMBER_WEAPON_ACTIVE_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_WEAPON_ACTIVE_REQ] = Encode_GMPKG_MEMBER_WEAPON_ACTIVE_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_WEAPON_ACTIVE_ACK] = Decode_GMPKG_MEMBER_WEAPON_ACTIVE_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_WEAPON_ACTIVE_ACK] = Encode_GMPKG_MEMBER_WEAPON_ACTIVE_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_WEAPON_LEVELUP_REQ] = Decode_GMPKG_MEMBER_WEAPON_LEVELUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_WEAPON_LEVELUP_REQ] = Encode_GMPKG_MEMBER_WEAPON_LEVELUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_WEAPON_LEVELUP_ACK] = Decode_GMPKG_MEMBER_WEAPON_LEVELUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_WEAPON_LEVELUP_ACK] = Encode_GMPKG_MEMBER_WEAPON_LEVELUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_WEAPON_QUALITYUP_REQ] = Decode_GMPKG_MEMBER_WEAPON_QUALITYUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_WEAPON_QUALITYUP_REQ] = Encode_GMPKG_MEMBER_WEAPON_QUALITYUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_WEAPON_QUALITYUP_ACK] = Decode_GMPKG_MEMBER_WEAPON_QUALITYUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_WEAPON_QUALITYUP_ACK] = Encode_GMPKG_MEMBER_WEAPON_QUALITYUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_WEAPON_EQUIP_REQ] = Decode_GMPKG_MEMBER_WEAPON_EQUIP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_WEAPON_EQUIP_REQ] = Encode_GMPKG_MEMBER_WEAPON_EQUIP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_WEAPON_EQUIP_ACK] = Decode_GMPKG_MEMBER_WEAPON_EQUIP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_WEAPON_EQUIP_ACK] = Encode_GMPKG_MEMBER_WEAPON_EQUIP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_PIECE_CRYSTAL_NTF] = Decode_GMPKG_MEMBER_PIECE_CRYSTAL_NTF;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_PIECE_CRYSTAL_NTF] = Encode_GMPKG_MEMBER_PIECE_CRYSTAL_NTF;
    P.m_oMapDecodeFunc[P.GMID_AMS_LIST_REQ] = Decode_GMPKG_AMS_LIST_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_LIST_REQ] = Encode_GMPKG_AMS_LIST_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_LIST_ACK] = Decode_GMPKG_AMS_LIST_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_LIST_ACK] = Encode_GMPKG_AMS_LIST_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_DATA_REQ] = Decode_GMPKG_AMS_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_DATA_REQ] = Encode_GMPKG_AMS_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_DATA_ACK] = Decode_GMPKG_AMS_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_DATA_ACK] = Encode_GMPKG_AMS_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_JOIN_REQ] = Decode_GMPKG_AMS_JOIN_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_JOIN_REQ] = Encode_GMPKG_AMS_JOIN_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_JOIN_ACK] = Decode_GMPKG_AMS_JOIN_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_JOIN_ACK] = Encode_GMPKG_AMS_JOIN_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_FEN_REQ] = Decode_GMPKG_AMS_FEN_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_FEN_REQ] = Encode_GMPKG_AMS_FEN_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_FEN_ACK] = Decode_GMPKG_AMS_FEN_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_FEN_ACK] = Encode_GMPKG_AMS_FEN_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_TREASURY_REQ] = Decode_GMPKG_AMS_TREASURY_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_TREASURY_REQ] = Encode_GMPKG_AMS_TREASURY_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_TREASURY_ACK] = Decode_GMPKG_AMS_TREASURY_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_TREASURY_ACK] = Encode_GMPKG_AMS_TREASURY_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_RANK_REQ] = Decode_GMPKG_AMS_RANK_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_RANK_REQ] = Encode_GMPKG_AMS_RANK_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_RANK_ACK] = Decode_GMPKG_AMS_RANK_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_RANK_ACK] = Encode_GMPKG_AMS_RANK_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_NTF] = Decode_GMPKG_AMS_NTF;
    P.m_oMapEncodeFunc[P.GMID_AMS_NTF] = Encode_GMPKG_AMS_NTF;
    P.m_oMapDecodeFunc[P.GMID_AMS_ACT_NTF] = Decode_GMPKG_AMS_ACT_NTF;
    P.m_oMapEncodeFunc[P.GMID_AMS_ACT_NTF] = Encode_GMPKG_AMS_ACT_NTF;
    P.m_oMapDecodeFunc[P.GMID_AMS_RCG_REQ] = Decode_GMPKG_AMS_RCG_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_RCG_REQ] = Encode_GMPKG_AMS_RCG_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_RCG_ACK] = Decode_GMPKG_AMS_RCG_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_RCG_ACK] = Encode_GMPKG_AMS_RCG_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_RCG_NTF] = Decode_GMPKG_AMS_RCG_NTF;
    P.m_oMapEncodeFunc[P.GMID_AMS_RCG_NTF] = Encode_GMPKG_AMS_RCG_NTF;
    P.m_oMapDecodeFunc[P.GMID_AMS_VAST_REQ] = Decode_GMPKG_AMS_VAST_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_VAST_REQ] = Encode_GMPKG_AMS_VAST_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_VAST_ACK] = Decode_GMPKG_AMS_VAST_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_VAST_ACK] = Encode_GMPKG_AMS_VAST_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_TYPE_ACTID_REQ] = Decode_GMPKG_AMS_TYPE_ACTID_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_TYPE_ACTID_REQ] = Encode_GMPKG_AMS_TYPE_ACTID_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_TYPE_ACTID_ACK] = Decode_GMPKG_AMS_TYPE_ACTID_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_TYPE_ACTID_ACK] = Encode_GMPKG_AMS_TYPE_ACTID_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_HONGBAO_REQ] = Decode_GMPKG_AMS_HONGBAO_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_HONGBAO_REQ] = Encode_GMPKG_AMS_HONGBAO_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_HONGBAO_ACK] = Decode_GMPKG_AMS_HONGBAO_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_HONGBAO_ACK] = Encode_GMPKG_AMS_HONGBAO_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_HONGBAO_EXCHANGE_REQ] = Decode_GMPKG_AMS_HONGBAO_EXCHANGE_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_HONGBAO_EXCHANGE_REQ] = Encode_GMPKG_AMS_HONGBAO_EXCHANGE_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_HONGBAO_EXCHANGE_ACK] = Decode_GMPKG_AMS_HONGBAO_EXCHANGE_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_HONGBAO_EXCHANGE_ACK] = Encode_GMPKG_AMS_HONGBAO_EXCHANGE_ACK;
    P.m_oMapDecodeFunc[P.GMID_AMS_INTEGRAL_NTF] = Decode_GMPKG_AMS_INTEGRAL_NTF;
    P.m_oMapEncodeFunc[P.GMID_AMS_INTEGRAL_NTF] = Encode_GMPKG_AMS_INTEGRAL_NTF;
    P.m_oMapDecodeFunc[P.GMID_AMS_WEEKFUND_REQ] = Decode_GMPKG_AMS_WEEKFUND_REQ;
    P.m_oMapEncodeFunc[P.GMID_AMS_WEEKFUND_REQ] = Encode_GMPKG_AMS_WEEKFUND_REQ;
    P.m_oMapDecodeFunc[P.GMID_AMS_WEEKFUND_ACK] = Decode_GMPKG_AMS_WEEKFUND_ACK;
    P.m_oMapEncodeFunc[P.GMID_AMS_WEEKFUND_ACK] = Encode_GMPKG_AMS_WEEKFUND_ACK;
    P.m_oMapDecodeFunc[P.GMID_CAMP_BAG_REQ] = Decode_GMPKG_CAMP_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_BAG_REQ] = Encode_GMPKG_CAMP_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_BAG_ACK] = Decode_GMPKG_CAMP_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_CAMP_BAG_ACK] = Encode_GMPKG_CAMP_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_CAMP_BEGIN_REQ] = Decode_GMPKG_CAMP_BEGIN_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_BEGIN_REQ] = Encode_GMPKG_CAMP_BEGIN_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_BEGIN_ACK] = Decode_GMPKG_CAMP_BEGIN_ACK;
    P.m_oMapEncodeFunc[P.GMID_CAMP_BEGIN_ACK] = Encode_GMPKG_CAMP_BEGIN_ACK;
    P.m_oMapDecodeFunc[P.GMID_CAMP_RESULT_REQ] = Decode_GMPKG_CAMP_RESULT_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_RESULT_REQ] = Encode_GMPKG_CAMP_RESULT_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_RESULT_ACK] = Decode_GMPKG_CAMP_RESULT_ACK;
    P.m_oMapEncodeFunc[P.GMID_CAMP_RESULT_ACK] = Encode_GMPKG_CAMP_RESULT_ACK;
    P.m_oMapDecodeFunc[P.GMID_CAMP_DRAWREWARD_REQ] = Decode_GMPKG_CAMP_DRAWREWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_DRAWREWARD_REQ] = Encode_GMPKG_CAMP_DRAWREWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_DRAWREWARD_ACK] = Decode_GMPKG_CAMP_DRAWREWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_CAMP_DRAWREWARD_ACK] = Encode_GMPKG_CAMP_DRAWREWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_CAMP_QUIT_REQ] = Decode_GMPKG_CAMP_QUIT_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_QUIT_REQ] = Encode_GMPKG_CAMP_QUIT_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_QUIT_NTF] = Decode_GMPKG_CAMP_QUIT_NTF;
    P.m_oMapEncodeFunc[P.GMID_CAMP_QUIT_NTF] = Encode_GMPKG_CAMP_QUIT_NTF;
    P.m_oMapDecodeFunc[P.GMID_CAMP_CAMPACTIVE_NTF] = Decode_GMPKG_CAMP_CAMPACTIVE_NTF;
    P.m_oMapEncodeFunc[P.GMID_CAMP_CAMPACTIVE_NTF] = Encode_GMPKG_CAMP_CAMPACTIVE_NTF;
    P.m_oMapDecodeFunc[P.GMID_CAMP_CHAPTERACTIVE_NTF] = Decode_GMPKG_CAMP_CHAPTERACTIVE_NTF;
    P.m_oMapEncodeFunc[P.GMID_CAMP_CHAPTERACTIVE_NTF] = Encode_GMPKG_CAMP_CHAPTERACTIVE_NTF;
    P.m_oMapDecodeFunc[P.GMID_CAMP_BUYCOUNT_REQ] = Decode_GMPKG_CAMP_BUYCOUNT_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_BUYCOUNT_REQ] = Encode_GMPKG_CAMP_BUYCOUNT_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_BUYCOUNT_ACK] = Decode_GMPKG_CAMP_BUYCOUNT_ACK;
    P.m_oMapEncodeFunc[P.GMID_CAMP_BUYCOUNT_ACK] = Encode_GMPKG_CAMP_BUYCOUNT_ACK;
    P.m_oMapDecodeFunc[P.GMID_CAMP_CHAPTER_REWARD_REQ] = Decode_GMPKG_CAMP_CHAPTER_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_CHAPTER_REWARD_REQ] = Encode_GMPKG_CAMP_CHAPTER_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_CHAPTER_REWARD_ACK] = Decode_GMPKG_CAMP_CHAPTER_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_CAMP_CHAPTER_REWARD_ACK] = Encode_GMPKG_CAMP_CHAPTER_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_CAMP_SAODANG_REQ] = Decode_GMPKG_CAMP_SAODANG_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_SAODANG_REQ] = Encode_GMPKG_CAMP_SAODANG_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_SAODANG_ACK] = Decode_GMPKG_CAMP_SAODANG_ACK;
    P.m_oMapEncodeFunc[P.GMID_CAMP_SAODANG_ACK] = Encode_GMPKG_CAMP_SAODANG_ACK;
    P.m_oMapDecodeFunc[P.GMID_CAMP_SAODANG_DRAW_REQ] = Decode_GMPKG_CAMP_SAODANG_DRAW_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_SAODANG_DRAW_REQ] = Encode_GMPKG_CAMP_SAODANG_DRAW_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_SAODANG_DRAW_ACK] = Decode_GMPKG_CAMP_SAODANG_DRAW_ACK;
    P.m_oMapEncodeFunc[P.GMID_CAMP_SAODANG_DRAW_ACK] = Encode_GMPKG_CAMP_SAODANG_DRAW_ACK;
    P.m_oMapDecodeFunc[P.GMID_CAMP_REVIVE_REQ] = Decode_GMPKG_CAMP_REVIVE_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_REVIVE_REQ] = Encode_GMPKG_CAMP_REVIVE_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_REVIVE_ACK] = Decode_GMPKG_CAMP_REVIVE_ACK;
    P.m_oMapEncodeFunc[P.GMID_CAMP_REVIVE_ACK] = Encode_GMPKG_CAMP_REVIVE_ACK;
    P.m_oMapDecodeFunc[P.GMID_CAMP_FREEDRAW_REQ] = Decode_GMPKG_CAMP_FREEDRAW_REQ;
    P.m_oMapEncodeFunc[P.GMID_CAMP_FREEDRAW_REQ] = Encode_GMPKG_CAMP_FREEDRAW_REQ;
    P.m_oMapDecodeFunc[P.GMID_CAMP_FREEDRAW_ACK] = Decode_GMPKG_CAMP_FREEDRAW_ACK;
    P.m_oMapEncodeFunc[P.GMID_CAMP_FREEDRAW_ACK] = Encode_GMPKG_CAMP_FREEDRAW_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_BAG_REQ] = Decode_GMPKG_ENDLESS_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_BAG_REQ] = Encode_GMPKG_ENDLESS_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_BAG_ACK] = Decode_GMPKG_ENDLESS_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_BAG_ACK] = Encode_GMPKG_ENDLESS_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_RANKUP_REQ] = Decode_GMPKG_ENDLESS_RANKUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_RANKUP_REQ] = Encode_GMPKG_ENDLESS_RANKUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_RANKUP_ACK] = Decode_GMPKG_ENDLESS_RANKUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_RANKUP_ACK] = Encode_GMPKG_ENDLESS_RANKUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_POWERPOINT_NTF] = Decode_GMPKG_ENDLESS_POWERPOINT_NTF;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_POWERPOINT_NTF] = Encode_GMPKG_ENDLESS_POWERPOINT_NTF;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_STARTBATTLE_REQ] = Decode_GMPKG_ENDLESS_STARTBATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_STARTBATTLE_REQ] = Encode_GMPKG_ENDLESS_STARTBATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_STARTBATTLE_ACK] = Decode_GMPKG_ENDLESS_STARTBATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_STARTBATTLE_ACK] = Encode_GMPKG_ENDLESS_STARTBATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_ENDBATTLE_REQ] = Decode_GMPKG_ENDLESS_ENDBATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_ENDBATTLE_REQ] = Encode_GMPKG_ENDLESS_ENDBATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_ENDBATTLE_ACK] = Decode_GMPKG_ENDLESS_ENDBATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_ENDBATTLE_ACK] = Encode_GMPKG_ENDLESS_ENDBATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_QUITBATTLE_REQ] = Decode_GMPKG_ENDLESS_QUITBATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_QUITBATTLE_REQ] = Encode_GMPKG_ENDLESS_QUITBATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_QUITBATTLE_ACK] = Decode_GMPKG_ENDLESS_QUITBATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_QUITBATTLE_ACK] = Encode_GMPKG_ENDLESS_QUITBATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_BUYBLESS_REQ] = Decode_GMPKG_ENDLESS_BUYBLESS_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_BUYBLESS_REQ] = Encode_GMPKG_ENDLESS_BUYBLESS_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_BUYBLESS_ACK] = Decode_GMPKG_ENDLESS_BUYBLESS_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_BUYBLESS_ACK] = Encode_GMPKG_ENDLESS_BUYBLESS_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_BUYSTATUS_REQ] = Decode_GMPKG_ENDLESS_BUYSTATUS_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_BUYSTATUS_REQ] = Encode_GMPKG_ENDLESS_BUYSTATUS_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_BUYSTATUS_ACK] = Decode_GMPKG_ENDLESS_BUYSTATUS_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_BUYSTATUS_ACK] = Encode_GMPKG_ENDLESS_BUYSTATUS_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_USESTATUS_REQ] = Decode_GMPKG_ENDLESS_USESTATUS_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_USESTATUS_REQ] = Encode_GMPKG_ENDLESS_USESTATUS_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_USESTATUS_ACK] = Decode_GMPKG_ENDLESS_USESTATUS_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_USESTATUS_ACK] = Encode_GMPKG_ENDLESS_USESTATUS_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_STATUS_NTF] = Decode_GMPKG_ENDLESS_STATUS_NTF;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_STATUS_NTF] = Encode_GMPKG_ENDLESS_STATUS_NTF;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_BUY_POWERPOINT_REQ] = Decode_GMPKG_ENDLESS_BUY_POWERPOINT_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_BUY_POWERPOINT_REQ] = Encode_GMPKG_ENDLESS_BUY_POWERPOINT_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_BUY_POWERPOINT_ACK] = Decode_GMPKG_ENDLESS_BUY_POWERPOINT_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_BUY_POWERPOINT_ACK] = Encode_GMPKG_ENDLESS_BUY_POWERPOINT_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_GETGOLD_REQ] = Decode_GMPKG_ENDLESS_GETGOLD_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_GETGOLD_REQ] = Encode_GMPKG_ENDLESS_GETGOLD_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_GETGOLD_ACK] = Decode_GMPKG_ENDLESS_GETGOLD_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_GETGOLD_ACK] = Encode_GMPKG_ENDLESS_GETGOLD_ACK;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_CHARGE_REWARD_REQ] = Decode_GMPKG_ENDLESS_CHARGE_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_CHARGE_REWARD_REQ] = Encode_GMPKG_ENDLESS_CHARGE_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_ENDLESS_CHARGE_REWARD_ACK] = Decode_GMPKG_ENDLESS_CHARGE_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_ENDLESS_CHARGE_REWARD_ACK] = Encode_GMPKG_ENDLESS_CHARGE_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_RCG_BAG_REQ] = Decode_GMPKG_RCG_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_RCG_BAG_REQ] = Encode_GMPKG_RCG_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_RCG_BAG_ACK] = Decode_GMPKG_RCG_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_RCG_BAG_ACK] = Encode_GMPKG_RCG_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_RCG_REQ] = Decode_GMPKG_RCG_REQ;
    P.m_oMapEncodeFunc[P.GMID_RCG_REQ] = Encode_GMPKG_RCG_REQ;
    P.m_oMapDecodeFunc[P.GMID_RCG_ACK] = Decode_GMPKG_RCG_ACK;
    P.m_oMapEncodeFunc[P.GMID_RCG_ACK] = Encode_GMPKG_RCG_ACK;
    P.m_oMapDecodeFunc[P.GMID_RCG_HUIKUI_BAG_REQ] = Decode_GMPKG_RCG_HUIKUI_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_RCG_HUIKUI_BAG_REQ] = Encode_GMPKG_RCG_HUIKUI_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_RCG_HUIKUI_BAG_ACK] = Decode_GMPKG_RCG_HUIKUI_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_RCG_HUIKUI_BAG_ACK] = Encode_GMPKG_RCG_HUIKUI_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_RCG_HUIKUI_GETREWARD_REQ] = Decode_GMPKG_RCG_HUIKUI_GETREWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_RCG_HUIKUI_GETREWARD_REQ] = Encode_GMPKG_RCG_HUIKUI_GETREWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_RCG_HUIKUI_GETREWARD_ACK] = Decode_GMPKG_RCG_HUIKUI_GETREWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_RCG_HUIKUI_GETREWARD_ACK] = Encode_GMPKG_RCG_HUIKUI_GETREWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_RCG_HUIKUI_NEW_NTF] = Decode_GMPKG_RCG_HUIKUI_NEW_NTF;
    P.m_oMapEncodeFunc[P.GMID_RCG_HUIKUI_NEW_NTF] = Encode_GMPKG_RCG_HUIKUI_NEW_NTF;
    P.m_oMapDecodeFunc[P.GMID_VOUCHER_EXCHANGE_REQ] = Decode_GMPKG_VOUCHER_EXCHANGE_REQ;
    P.m_oMapEncodeFunc[P.GMID_VOUCHER_EXCHANGE_REQ] = Encode_GMPKG_VOUCHER_EXCHANGE_REQ;
    P.m_oMapDecodeFunc[P.GMID_VOUCHER_EXCHANGE_ACK] = Decode_GMPKG_VOUCHER_EXCHANGE_ACK;
    P.m_oMapEncodeFunc[P.GMID_VOUCHER_EXCHANGE_ACK] = Encode_GMPKG_VOUCHER_EXCHANGE_ACK;
    P.m_oMapDecodeFunc[P.GMID_VIP_PACKAGE_GET_REQ] = Decode_GMPKG_VIP_PACKAGE_GET_REQ;
    P.m_oMapEncodeFunc[P.GMID_VIP_PACKAGE_GET_REQ] = Encode_GMPKG_VIP_PACKAGE_GET_REQ;
    P.m_oMapDecodeFunc[P.GMID_VIP_PACKAGE_GET_ACK] = Decode_GMPKG_VIP_PACKAGE_GET_ACK;
    P.m_oMapEncodeFunc[P.GMID_VIP_PACKAGE_GET_ACK] = Encode_GMPKG_VIP_PACKAGE_GET_ACK;
    P.m_oMapDecodeFunc[P.GMID_GET_FREE_DIAMOND_REQ] = Decode_GMPKG_GET_FREE_DIAMOND_REQ;
    P.m_oMapEncodeFunc[P.GMID_GET_FREE_DIAMOND_REQ] = Encode_GMPKG_GET_FREE_DIAMOND_REQ;
    P.m_oMapDecodeFunc[P.GMID_GET_FREE_DIAMOND_ACK] = Decode_GMPKG_GET_FREE_DIAMOND_ACK;
    P.m_oMapEncodeFunc[P.GMID_GET_FREE_DIAMOND_ACK] = Encode_GMPKG_GET_FREE_DIAMOND_ACK;
    P.m_oMapDecodeFunc[P.GMID_GET_FREE_GOLD_REQ] = Decode_GMPKG_GET_FREE_GOLD_REQ;
    P.m_oMapEncodeFunc[P.GMID_GET_FREE_GOLD_REQ] = Encode_GMPKG_GET_FREE_GOLD_REQ;
    P.m_oMapDecodeFunc[P.GMID_GET_FREE_GOLD_ACK] = Decode_GMPKG_GET_FREE_GOLD_ACK;
    P.m_oMapEncodeFunc[P.GMID_GET_FREE_GOLD_ACK] = Encode_GMPKG_GET_FREE_GOLD_ACK;
    P.m_oMapDecodeFunc[P.GMID_SP_BUY_REQ] = Decode_GMPKG_SP_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_SP_BUY_REQ] = Encode_GMPKG_SP_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_SP_BUY_ACK] = Decode_GMPKG_SP_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_SP_BUY_ACK] = Encode_GMPKG_SP_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_SP_GETBACK_REQ] = Decode_GMPKG_SP_GETBACK_REQ;
    P.m_oMapEncodeFunc[P.GMID_SP_GETBACK_REQ] = Encode_GMPKG_SP_GETBACK_REQ;
    P.m_oMapDecodeFunc[P.GMID_SP_GETBACK_ACK] = Decode_GMPKG_SP_GETBACK_ACK;
    P.m_oMapEncodeFunc[P.GMID_SP_GETBACK_ACK] = Encode_GMPKG_SP_GETBACK_ACK;
    P.m_oMapDecodeFunc[P.GMID_SP_CHANGE_NTF] = Decode_GMPKG_SP_CHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_SP_CHANGE_NTF] = Encode_GMPKG_SP_CHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_STORE_DATA_REQ] = Decode_GMPKG_STORE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_STORE_DATA_REQ] = Encode_GMPKG_STORE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_STORE_DATA_ACK] = Decode_GMPKG_STORE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_STORE_DATA_ACK] = Encode_GMPKG_STORE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_STORE_REFRESH_REQ] = Decode_GMPKG_STORE_REFRESH_REQ;
    P.m_oMapEncodeFunc[P.GMID_STORE_REFRESH_REQ] = Encode_GMPKG_STORE_REFRESH_REQ;
    P.m_oMapDecodeFunc[P.GMID_STORE_REFRESH_ACK] = Decode_GMPKG_STORE_REFRESH_ACK;
    P.m_oMapEncodeFunc[P.GMID_STORE_REFRESH_ACK] = Encode_GMPKG_STORE_REFRESH_ACK;
    P.m_oMapDecodeFunc[P.GMID_STORE_BUY_REQ] = Decode_GMPKG_STORE_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_STORE_BUY_REQ] = Encode_GMPKG_STORE_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_STORE_BUY_ACK] = Decode_GMPKG_STORE_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_STORE_BUY_ACK] = Encode_GMPKG_STORE_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_STORE_NTF] = Decode_GMPKG_STORE_NTF;
    P.m_oMapEncodeFunc[P.GMID_STORE_NTF] = Encode_GMPKG_STORE_NTF;
    P.m_oMapDecodeFunc[P.GMID_STORE_BUY_NUM_REQ] = Decode_GMPKG_STORE_BUY_NUM_REQ;
    P.m_oMapEncodeFunc[P.GMID_STORE_BUY_NUM_REQ] = Encode_GMPKG_STORE_BUY_NUM_REQ;
    P.m_oMapDecodeFunc[P.GMID_STORE_BUY_NUM_ACK] = Decode_GMPKG_STORE_BUY_NUM_ACK;
    P.m_oMapEncodeFunc[P.GMID_STORE_BUY_NUM_ACK] = Encode_GMPKG_STORE_BUY_NUM_ACK;
    P.m_oMapDecodeFunc[P.GMID_TREASURE_DATA_REQ] = Decode_GMPKG_TREASURE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_TREASURE_DATA_REQ] = Encode_GMPKG_TREASURE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_TREASURE_DATA_ACK] = Decode_GMPKG_TREASURE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_TREASURE_DATA_ACK] = Encode_GMPKG_TREASURE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_TREASURE_MINING_REQ] = Decode_GMPKG_TREASURE_MINING_REQ;
    P.m_oMapEncodeFunc[P.GMID_TREASURE_MINING_REQ] = Encode_GMPKG_TREASURE_MINING_REQ;
    P.m_oMapDecodeFunc[P.GMID_TREASURE_MINING_ACK] = Decode_GMPKG_TREASURE_MINING_ACK;
    P.m_oMapEncodeFunc[P.GMID_TREASURE_MINING_ACK] = Encode_GMPKG_TREASURE_MINING_ACK;
    P.m_oMapDecodeFunc[P.GMID_TREASURE_NTF] = Decode_GMPKG_TREASURE_NTF;
    P.m_oMapEncodeFunc[P.GMID_TREASURE_NTF] = Encode_GMPKG_TREASURE_NTF;
    P.m_oMapDecodeFunc[P.GMID_TREASURE_GOLDMINING_REWARD_REQ] = Decode_GMPKG_TREASURE_GOLDMINING_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_TREASURE_GOLDMINING_REWARD_REQ] = Encode_GMPKG_TREASURE_GOLDMINING_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_TREASURE_GOLDMINING_REWARD_ACK] = Decode_GMPKG_TREASURE_GOLDMINING_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_TREASURE_GOLDMINING_REWARD_ACK] = Encode_GMPKG_TREASURE_GOLDMINING_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_LOTTERY_DATA_REQ] = Decode_GMPKG_LOTTERY_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_LOTTERY_DATA_REQ] = Encode_GMPKG_LOTTERY_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_LOTTERY_DATA_ACK] = Decode_GMPKG_LOTTERY_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_LOTTERY_DATA_ACK] = Encode_GMPKG_LOTTERY_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_LOTTERY_REQ] = Decode_GMPKG_LOTTERY_REQ;
    P.m_oMapEncodeFunc[P.GMID_LOTTERY_REQ] = Encode_GMPKG_LOTTERY_REQ;
    P.m_oMapDecodeFunc[P.GMID_LOTTERY_ACK] = Decode_GMPKG_LOTTERY_ACK;
    P.m_oMapEncodeFunc[P.GMID_LOTTERY_ACK] = Encode_GMPKG_LOTTERY_ACK;
    P.m_oMapDecodeFunc[P.GMID_LOTTERY_TEN_REQ] = Decode_GMPKG_LOTTERY_TEN_REQ;
    P.m_oMapEncodeFunc[P.GMID_LOTTERY_TEN_REQ] = Encode_GMPKG_LOTTERY_TEN_REQ;
    P.m_oMapDecodeFunc[P.GMID_LOTTERY_TEN_ACK] = Decode_GMPKG_LOTTERY_TEN_ACK;
    P.m_oMapEncodeFunc[P.GMID_LOTTERY_TEN_ACK] = Encode_GMPKG_LOTTERY_TEN_ACK;
    P.m_oMapDecodeFunc[P.GMID_LOTTERY_NTF] = Decode_GMPKG_LOTTERY_NTF;
    P.m_oMapEncodeFunc[P.GMID_LOTTERY_NTF] = Encode_GMPKG_LOTTERY_NTF;
    P.m_oMapDecodeFunc[P.GMID_SIGNIN_DATA_REQ] = Decode_GMPKG_SIGNIN_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_SIGNIN_DATA_REQ] = Encode_GMPKG_SIGNIN_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_SIGNIN_DATA_ACK] = Decode_GMPKG_SIGNIN_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_SIGNIN_DATA_ACK] = Encode_GMPKG_SIGNIN_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_SIGNIN_REQ] = Decode_GMPKG_SIGNIN_REQ;
    P.m_oMapEncodeFunc[P.GMID_SIGNIN_REQ] = Encode_GMPKG_SIGNIN_REQ;
    P.m_oMapDecodeFunc[P.GMID_SIGNIN_ACK] = Decode_GMPKG_SIGNIN_ACK;
    P.m_oMapEncodeFunc[P.GMID_SIGNIN_ACK] = Encode_GMPKG_SIGNIN_ACK;
    P.m_oMapDecodeFunc[P.GMID_SIGNIN_HEAP_REQ] = Decode_GMPKG_SIGNIN_HEAP_REQ;
    P.m_oMapEncodeFunc[P.GMID_SIGNIN_HEAP_REQ] = Encode_GMPKG_SIGNIN_HEAP_REQ;
    P.m_oMapDecodeFunc[P.GMID_SIGNIN_HEAP_ACK] = Decode_GMPKG_SIGNIN_HEAP_ACK;
    P.m_oMapEncodeFunc[P.GMID_SIGNIN_HEAP_ACK] = Encode_GMPKG_SIGNIN_HEAP_ACK;
    P.m_oMapDecodeFunc[P.GMID_SIGNIN_NTF_REQ] = Decode_GMPKG_SIGNIN_NTF_REQ;
    P.m_oMapEncodeFunc[P.GMID_SIGNIN_NTF_REQ] = Encode_GMPKG_SIGNIN_NTF_REQ;
    P.m_oMapDecodeFunc[P.GMID_SIGNIN_NTF] = Decode_GMPKG_SIGNIN_NTF;
    P.m_oMapEncodeFunc[P.GMID_SIGNIN_NTF] = Encode_GMPKG_SIGNIN_NTF;
    P.m_oMapDecodeFunc[P.GMID_DAILY_DATA_REQ] = Decode_GMPKG_DAILY_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_DAILY_DATA_REQ] = Encode_GMPKG_DAILY_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_DAILY_DATA_ACK] = Decode_GMPKG_DAILY_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_DAILY_DATA_ACK] = Encode_GMPKG_DAILY_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_DAILY_ACTIVE_REWARD_REQ] = Decode_GMPKG_DAILY_ACTIVE_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_DAILY_ACTIVE_REWARD_REQ] = Encode_GMPKG_DAILY_ACTIVE_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_DAILY_ACTIVE_REWARD_ACK] = Decode_GMPKG_DAILY_ACTIVE_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_DAILY_ACTIVE_REWARD_ACK] = Encode_GMPKG_DAILY_ACTIVE_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_DAILY_REWARD_REQ] = Decode_GMPKG_DAILY_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_DAILY_REWARD_REQ] = Encode_GMPKG_DAILY_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_DAILY_REWARD_ACK] = Decode_GMPKG_DAILY_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_DAILY_REWARD_ACK] = Encode_GMPKG_DAILY_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_DAILY_NTF] = Decode_GMPKG_DAILY_NTF;
    P.m_oMapEncodeFunc[P.GMID_DAILY_NTF] = Encode_GMPKG_DAILY_NTF;
    P.m_oMapDecodeFunc[P.GMID_DAILY_SHARE_REQ] = Decode_GMPKG_DAILY_SHARE_REQ;
    P.m_oMapEncodeFunc[P.GMID_DAILY_SHARE_REQ] = Encode_GMPKG_DAILY_SHARE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ACHIEVE_DATA_REQ] = Decode_GMPKG_ACHIEVE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_ACHIEVE_DATA_REQ] = Encode_GMPKG_ACHIEVE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_ACHIEVE_DATA_ACK] = Decode_GMPKG_ACHIEVE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_ACHIEVE_DATA_ACK] = Encode_GMPKG_ACHIEVE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_ACHIEVE_REWARD_REQ] = Decode_GMPKG_ACHIEVE_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_ACHIEVE_REWARD_REQ] = Encode_GMPKG_ACHIEVE_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_ACHIEVE_REWARD_ACK] = Decode_GMPKG_ACHIEVE_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_ACHIEVE_REWARD_ACK] = Encode_GMPKG_ACHIEVE_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_ACHIEVE_NTF] = Decode_GMPKG_ACHIEVE_NTF;
    P.m_oMapEncodeFunc[P.GMID_ACHIEVE_NTF] = Encode_GMPKG_ACHIEVE_NTF;
    P.m_oMapDecodeFunc[P.GMID_MAIL_GET_LIST_REQ] = Decode_GMPKG_MAIL_GET_LIST_REQ;
    P.m_oMapEncodeFunc[P.GMID_MAIL_GET_LIST_REQ] = Encode_GMPKG_MAIL_GET_LIST_REQ;
    P.m_oMapDecodeFunc[P.GMID_MAIL_GET_LIST_ACK] = Decode_GMPKG_MAIL_GET_LIST_ACK;
    P.m_oMapEncodeFunc[P.GMID_MAIL_GET_LIST_ACK] = Encode_GMPKG_MAIL_GET_LIST_ACK;
    P.m_oMapDecodeFunc[P.GMID_MAIL_READ_REQ] = Decode_GMPKG_MAIL_READ_REQ;
    P.m_oMapEncodeFunc[P.GMID_MAIL_READ_REQ] = Encode_GMPKG_MAIL_READ_REQ;
    P.m_oMapDecodeFunc[P.GMID_MAIL_READ_ACK] = Decode_GMPKG_MAIL_READ_ACK;
    P.m_oMapEncodeFunc[P.GMID_MAIL_READ_ACK] = Encode_GMPKG_MAIL_READ_ACK;
    P.m_oMapDecodeFunc[P.GMID_MAIL_RECEIVE_NTF] = Decode_GMPKG_MAIL_RECEIVE_NTF;
    P.m_oMapEncodeFunc[P.GMID_MAIL_RECEIVE_NTF] = Encode_GMPKG_MAIL_RECEIVE_NTF;
    P.m_oMapDecodeFunc[P.GMID_MAIL_DEL_NTF] = Decode_GMPKG_MAIL_DEL_NTF;
    P.m_oMapEncodeFunc[P.GMID_MAIL_DEL_NTF] = Encode_GMPKG_MAIL_DEL_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUILD_CREATE_REQ] = Decode_GMPKG_GUILD_CREATE_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_CREATE_REQ] = Encode_GMPKG_GUILD_CREATE_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_CREATE_ACK] = Decode_GMPKG_GUILD_CREATE_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_CREATE_ACK] = Encode_GMPKG_GUILD_CREATE_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_SEARCH_REQ] = Decode_GMPKG_GUILD_SEARCH_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_SEARCH_REQ] = Encode_GMPKG_GUILD_SEARCH_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_SEARCH_ACK] = Decode_GMPKG_GUILD_SEARCH_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_SEARCH_ACK] = Encode_GMPKG_GUILD_SEARCH_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_APPLY_REQ] = Decode_GMPKG_GUILD_APPLY_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_APPLY_REQ] = Encode_GMPKG_GUILD_APPLY_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_APPLY_ACK] = Decode_GMPKG_GUILD_APPLY_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_APPLY_ACK] = Encode_GMPKG_GUILD_APPLY_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_APPLY_NTF] = Decode_GMPKG_GUILD_APPLY_NTF;
    P.m_oMapEncodeFunc[P.GMID_GUILD_APPLY_NTF] = Encode_GMPKG_GUILD_APPLY_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUILD_EDIT_ANNOUNCEMENT_REQ] = Decode_GMPKG_GUILD_EDIT_ANNOUNCEMENT_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_EDIT_ANNOUNCEMENT_REQ] = Encode_GMPKG_GUILD_EDIT_ANNOUNCEMENT_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_EDIT_ANNOUNCEMENT_ACK] = Decode_GMPKG_GUILD_EDIT_ANNOUNCEMENT_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_EDIT_ANNOUNCEMENT_ACK] = Encode_GMPKG_GUILD_EDIT_ANNOUNCEMENT_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_ACCEPT_REQ] = Decode_GMPKG_GUILD_ACCEPT_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_ACCEPT_REQ] = Encode_GMPKG_GUILD_ACCEPT_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_ACCEPT_ACK] = Decode_GMPKG_GUILD_ACCEPT_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_ACCEPT_ACK] = Encode_GMPKG_GUILD_ACCEPT_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_ACCEPT_NTF] = Decode_GMPKG_GUILD_ACCEPT_NTF;
    P.m_oMapEncodeFunc[P.GMID_GUILD_ACCEPT_NTF] = Encode_GMPKG_GUILD_ACCEPT_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUILD_REFUSE_REQ] = Decode_GMPKG_GUILD_REFUSE_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_REFUSE_REQ] = Encode_GMPKG_GUILD_REFUSE_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_REFUSE_ACK] = Decode_GMPKG_GUILD_REFUSE_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_REFUSE_ACK] = Encode_GMPKG_GUILD_REFUSE_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_REFUSE_NTF] = Decode_GMPKG_GUILD_REFUSE_NTF;
    P.m_oMapEncodeFunc[P.GMID_GUILD_REFUSE_NTF] = Encode_GMPKG_GUILD_REFUSE_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUILD_SETLIMIT_REQ] = Decode_GMPKG_GUILD_SETLIMIT_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_SETLIMIT_REQ] = Encode_GMPKG_GUILD_SETLIMIT_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_SETLIMIT_ACK] = Decode_GMPKG_GUILD_SETLIMIT_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_SETLIMIT_ACK] = Encode_GMPKG_GUILD_SETLIMIT_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_CONTRIBUTE_REQ] = Decode_GMPKG_GUILD_CONTRIBUTE_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_CONTRIBUTE_REQ] = Encode_GMPKG_GUILD_CONTRIBUTE_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_CONTRIBUTE_ACK] = Decode_GMPKG_GUILD_CONTRIBUTE_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_CONTRIBUTE_ACK] = Encode_GMPKG_GUILD_CONTRIBUTE_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_FIRE_REQ] = Decode_GMPKG_GUILD_FIRE_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_FIRE_REQ] = Encode_GMPKG_GUILD_FIRE_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_FIRE_ACK] = Decode_GMPKG_GUILD_FIRE_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_FIRE_ACK] = Encode_GMPKG_GUILD_FIRE_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_FIRE_NTF] = Decode_GMPKG_GUILD_FIRE_NTF;
    P.m_oMapEncodeFunc[P.GMID_GUILD_FIRE_NTF] = Encode_GMPKG_GUILD_FIRE_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUILD_NOMINATE_REQ] = Decode_GMPKG_GUILD_NOMINATE_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_NOMINATE_REQ] = Encode_GMPKG_GUILD_NOMINATE_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_NOMINATE_ACK] = Decode_GMPKG_GUILD_NOMINATE_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_NOMINATE_ACK] = Encode_GMPKG_GUILD_NOMINATE_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_NOMINATE_NTF] = Decode_GMPKG_GUILD_NOMINATE_NTF;
    P.m_oMapEncodeFunc[P.GMID_GUILD_NOMINATE_NTF] = Encode_GMPKG_GUILD_NOMINATE_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUILD_RELIEVE_REQ] = Decode_GMPKG_GUILD_RELIEVE_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_RELIEVE_REQ] = Encode_GMPKG_GUILD_RELIEVE_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_RELIEVE_ACK] = Decode_GMPKG_GUILD_RELIEVE_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_RELIEVE_ACK] = Encode_GMPKG_GUILD_RELIEVE_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_RELIEVE_NTF] = Decode_GMPKG_GUILD_RELIEVE_NTF;
    P.m_oMapEncodeFunc[P.GMID_GUILD_RELIEVE_NTF] = Encode_GMPKG_GUILD_RELIEVE_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUILD_DISMISS_REQ] = Decode_GMPKG_GUILD_DISMISS_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_DISMISS_REQ] = Encode_GMPKG_GUILD_DISMISS_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_DISMISS_ACK] = Decode_GMPKG_GUILD_DISMISS_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_DISMISS_ACK] = Encode_GMPKG_GUILD_DISMISS_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_NEWS_REQ] = Decode_GMPKG_GUILD_NEWS_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_NEWS_REQ] = Encode_GMPKG_GUILD_NEWS_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_NEWS_ACK] = Decode_GMPKG_GUILD_NEWS_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_NEWS_ACK] = Encode_GMPKG_GUILD_NEWS_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_ACTIVE_MEDAL_REQ] = Decode_GMPKG_GUILD_ACTIVE_MEDAL_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_ACTIVE_MEDAL_REQ] = Encode_GMPKG_GUILD_ACTIVE_MEDAL_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_ACTIVE_MEDAL_ACK] = Decode_GMPKG_GUILD_ACTIVE_MEDAL_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_ACTIVE_MEDAL_ACK] = Encode_GMPKG_GUILD_ACTIVE_MEDAL_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_UPGRADE_MEDAL_REQ] = Decode_GMPKG_GUILD_UPGRADE_MEDAL_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_UPGRADE_MEDAL_REQ] = Encode_GMPKG_GUILD_UPGRADE_MEDAL_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_UPGRADE_MEDAL_ACK] = Decode_GMPKG_GUILD_UPGRADE_MEDAL_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_UPGRADE_MEDAL_ACK] = Encode_GMPKG_GUILD_UPGRADE_MEDAL_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_INFO_REQ] = Decode_GMPKG_GUILD_INFO_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_INFO_REQ] = Encode_GMPKG_GUILD_INFO_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_INFO_ACK] = Decode_GMPKG_GUILD_INFO_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_INFO_ACK] = Encode_GMPKG_GUILD_INFO_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_REQ_LIST_REQ] = Decode_GMPKG_GUILD_REQ_LIST_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_REQ_LIST_REQ] = Encode_GMPKG_GUILD_REQ_LIST_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_REQ_LIST_ACK] = Decode_GMPKG_GUILD_REQ_LIST_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_REQ_LIST_ACK] = Encode_GMPKG_GUILD_REQ_LIST_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_MEMBER_LIST_REQ] = Decode_GMPKG_GUILD_MEMBER_LIST_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_MEMBER_LIST_REQ] = Encode_GMPKG_GUILD_MEMBER_LIST_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_MEMBER_LIST_ACK] = Decode_GMPKG_GUILD_MEMBER_LIST_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_MEMBER_LIST_ACK] = Encode_GMPKG_GUILD_MEMBER_LIST_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_MEMBER_WEEKLY_REFRESH_NTF] = Decode_GMPKG_GUILD_MEMBER_WEEKLY_REFRESH_NTF;
    P.m_oMapEncodeFunc[P.GMID_GUILD_MEMBER_WEEKLY_REFRESH_NTF] = Encode_GMPKG_GUILD_MEMBER_WEEKLY_REFRESH_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUILD_QUIT_REQ] = Decode_GMPKG_GUILD_QUIT_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_QUIT_REQ] = Encode_GMPKG_GUILD_QUIT_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_QUIT_ACK] = Decode_GMPKG_GUILD_QUIT_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_QUIT_ACK] = Encode_GMPKG_GUILD_QUIT_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BUBBLE_REQ] = Decode_GMPKG_GUILD_BUBBLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BUBBLE_REQ] = Encode_GMPKG_GUILD_BUBBLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BUBBLE_ACK] = Decode_GMPKG_GUILD_BUBBLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BUBBLE_ACK] = Encode_GMPKG_GUILD_BUBBLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BUBBLE_RECEIVED_RPT] = Decode_GMPKG_GUILD_BUBBLE_RECEIVED_RPT;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BUBBLE_RECEIVED_RPT] = Encode_GMPKG_GUILD_BUBBLE_RECEIVED_RPT;
    P.m_oMapDecodeFunc[P.GMID_GUILD_ENDLESS_RANKING_REQ] = Decode_GMPKG_GUILD_ENDLESS_RANKING_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_ENDLESS_RANKING_REQ] = Encode_GMPKG_GUILD_ENDLESS_RANKING_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_ENDLESS_RANKING_ACK] = Decode_GMPKG_GUILD_ENDLESS_RANKING_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_ENDLESS_RANKING_ACK] = Encode_GMPKG_GUILD_ENDLESS_RANKING_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_ENDLESS_RANKING_LIKE_REQ] = Decode_GMPKG_GUILD_ENDLESS_RANKING_LIKE_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_ENDLESS_RANKING_LIKE_REQ] = Encode_GMPKG_GUILD_ENDLESS_RANKING_LIKE_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_ENDLESS_RANKING_LIKE_ACK] = Decode_GMPKG_GUILD_ENDLESS_RANKING_LIKE_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_ENDLESS_RANKING_LIKE_ACK] = Encode_GMPKG_GUILD_ENDLESS_RANKING_LIKE_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_LIST_RAN_REQ] = Decode_GMPKG_GUILD_LIST_RAN_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_LIST_RAN_REQ] = Encode_GMPKG_GUILD_LIST_RAN_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_LIST_RAN_ACK] = Decode_GMPKG_GUILD_LIST_RAN_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_LIST_RAN_ACK] = Encode_GMPKG_GUILD_LIST_RAN_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_LUCKY_DRAW_REQ] = Decode_GMPKG_GUILD_LUCKY_DRAW_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_LUCKY_DRAW_REQ] = Encode_GMPKG_GUILD_LUCKY_DRAW_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_LUCKY_DRAW_ACK] = Decode_GMPKG_GUILD_LUCKY_DRAW_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_LUCKY_DRAW_ACK] = Encode_GMPKG_GUILD_LUCKY_DRAW_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_TRANSFER_CAPTAIN_REQ] = Decode_GMPKG_GUILD_TRANSFER_CAPTAIN_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_TRANSFER_CAPTAIN_REQ] = Encode_GMPKG_GUILD_TRANSFER_CAPTAIN_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_TRANSFER_CAPTAIN_ACK] = Decode_GMPKG_GUILD_TRANSFER_CAPTAIN_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_TRANSFER_CAPTAIN_ACK] = Encode_GMPKG_GUILD_TRANSFER_CAPTAIN_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_TRANSFER_CAPTAIN_NTF] = Decode_GMPKG_GUILD_TRANSFER_CAPTAIN_NTF;
    P.m_oMapEncodeFunc[P.GMID_GUILD_TRANSFER_CAPTAIN_NTF] = Encode_GMPKG_GUILD_TRANSFER_CAPTAIN_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUILD_GET_CAPTAIN_REQ] = Decode_GMPKG_GUILD_GET_CAPTAIN_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_GET_CAPTAIN_REQ] = Encode_GMPKG_GUILD_GET_CAPTAIN_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_GET_CAPTAIN_ACK] = Decode_GMPKG_GUILD_GET_CAPTAIN_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_GET_CAPTAIN_ACK] = Encode_GMPKG_GUILD_GET_CAPTAIN_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_LIST_REQ] = Decode_GMPKG_GUILD_LIST_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_LIST_REQ] = Encode_GMPKG_GUILD_LIST_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_LIST_ACK] = Decode_GMPKG_GUILD_LIST_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_LIST_ACK] = Encode_GMPKG_GUILD_LIST_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_BAG_REQ] = Decode_GMPKG_GUILD_BOSS_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_BAG_REQ] = Encode_GMPKG_GUILD_BOSS_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_BAG_ACK] = Decode_GMPKG_GUILD_BOSS_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_BAG_ACK] = Encode_GMPKG_GUILD_BOSS_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_CHANLLEGE_REQ] = Decode_GMPKG_GUILD_BOSS_CHANLLEGE_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_CHANLLEGE_REQ] = Encode_GMPKG_GUILD_BOSS_CHANLLEGE_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_CHANLLEGE_ACK] = Decode_GMPKG_GUILD_BOSS_CHANLLEGE_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_CHANLLEGE_ACK] = Encode_GMPKG_GUILD_BOSS_CHANLLEGE_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_GET_REWARD_REQ] = Decode_GMPKG_GUILD_BOSS_GET_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_GET_REWARD_REQ] = Encode_GMPKG_GUILD_BOSS_GET_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_GET_REWARD_ACK] = Decode_GMPKG_GUILD_BOSS_GET_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_GET_REWARD_ACK] = Encode_GMPKG_GUILD_BOSS_GET_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_PLAYER_RANK_REQ] = Decode_GMPKG_GUILD_BOSS_PLAYER_RANK_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_PLAYER_RANK_REQ] = Encode_GMPKG_GUILD_BOSS_PLAYER_RANK_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_PLAYER_RANK_ACK] = Decode_GMPKG_GUILD_BOSS_PLAYER_RANK_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_PLAYER_RANK_ACK] = Encode_GMPKG_GUILD_BOSS_PLAYER_RANK_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_GUILD_RANK_REQ] = Decode_GMPKG_GUILD_BOSS_GUILD_RANK_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_GUILD_RANK_REQ] = Encode_GMPKG_GUILD_BOSS_GUILD_RANK_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_GUILD_RANK_ACK] = Decode_GMPKG_GUILD_BOSS_GUILD_RANK_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_GUILD_RANK_ACK] = Encode_GMPKG_GUILD_BOSS_GUILD_RANK_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_START_NTF] = Decode_GMPKG_GUILD_BOSS_START_NTF;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_START_NTF] = Encode_GMPKG_GUILD_BOSS_START_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_BUY_REQ] = Decode_GMPKG_GUILD_BOSS_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_BUY_REQ] = Encode_GMPKG_GUILD_BOSS_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUILD_BOSS_BUY_ACK] = Decode_GMPKG_GUILD_BOSS_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUILD_BOSS_BUY_ACK] = Encode_GMPKG_GUILD_BOSS_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_BAG_REQ] = Decode_GMPKG_BOSSTOWER_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_BAG_REQ] = Encode_GMPKG_BOSSTOWER_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_BAG_ACK] = Decode_GMPKG_BOSSTOWER_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_BAG_ACK] = Encode_GMPKG_BOSSTOWER_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_EXPLORE_REQ] = Decode_GMPKG_BOSSTOWER_EXPLORE_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_EXPLORE_REQ] = Encode_GMPKG_BOSSTOWER_EXPLORE_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_EXPLORE_ACK] = Decode_GMPKG_BOSSTOWER_EXPLORE_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_EXPLORE_ACK] = Encode_GMPKG_BOSSTOWER_EXPLORE_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_REFRESH_BUFF_REQ] = Decode_GMPKG_BOSSTOWER_REFRESH_BUFF_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_REFRESH_BUFF_REQ] = Encode_GMPKG_BOSSTOWER_REFRESH_BUFF_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_REFRESH_BUFF_ACK] = Decode_GMPKG_BOSSTOWER_REFRESH_BUFF_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_REFRESH_BUFF_ACK] = Encode_GMPKG_BOSSTOWER_REFRESH_BUFF_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_START_BATTLE_REQ] = Decode_GMPKG_BOSSTOWER_START_BATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_START_BATTLE_REQ] = Encode_GMPKG_BOSSTOWER_START_BATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_START_BATTLE_ACK] = Decode_GMPKG_BOSSTOWER_START_BATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_START_BATTLE_ACK] = Encode_GMPKG_BOSSTOWER_START_BATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_ENDBATTLE_REQ] = Decode_GMPKG_BOSSTOWER_ENDBATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_ENDBATTLE_REQ] = Encode_GMPKG_BOSSTOWER_ENDBATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_ENDBATTLE_ACK] = Decode_GMPKG_BOSSTOWER_ENDBATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_ENDBATTLE_ACK] = Encode_GMPKG_BOSSTOWER_ENDBATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_QUITBATTLE_REQ] = Decode_GMPKG_BOSSTOWER_QUITBATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_QUITBATTLE_REQ] = Encode_GMPKG_BOSSTOWER_QUITBATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_QUITBATTLE_ACK] = Decode_GMPKG_BOSSTOWER_QUITBATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_QUITBATTLE_ACK] = Encode_GMPKG_BOSSTOWER_QUITBATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_SAODANG_REQ] = Decode_GMPKG_BOSSTOWER_SAODANG_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_SAODANG_REQ] = Encode_GMPKG_BOSSTOWER_SAODANG_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_SAODANG_ACK] = Decode_GMPKG_BOSSTOWER_SAODANG_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_SAODANG_ACK] = Encode_GMPKG_BOSSTOWER_SAODANG_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_GETREWARD_REQ] = Decode_GMPKG_BOSSTOWER_GETREWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_GETREWARD_REQ] = Encode_GMPKG_BOSSTOWER_GETREWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_GETREWARD_ACK] = Decode_GMPKG_BOSSTOWER_GETREWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_GETREWARD_ACK] = Encode_GMPKG_BOSSTOWER_GETREWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_NEXTFLOOR_REQ] = Decode_GMPKG_BOSSTOWER_NEXTFLOOR_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_NEXTFLOOR_REQ] = Encode_GMPKG_BOSSTOWER_NEXTFLOOR_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_NEXTFLOOR_ACK] = Decode_GMPKG_BOSSTOWER_NEXTFLOOR_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_NEXTFLOOR_ACK] = Encode_GMPKG_BOSSTOWER_NEXTFLOOR_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_RESET_REQ] = Decode_GMPKG_BOSSTOWER_RESET_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_RESET_REQ] = Encode_GMPKG_BOSSTOWER_RESET_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_RESET_ACK] = Decode_GMPKG_BOSSTOWER_RESET_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_RESET_ACK] = Encode_GMPKG_BOSSTOWER_RESET_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_UNLOCK_REQ] = Decode_GMPKG_BOSSTOWER_UNLOCK_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_UNLOCK_REQ] = Encode_GMPKG_BOSSTOWER_UNLOCK_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_UNLOCK_ACK] = Decode_GMPKG_BOSSTOWER_UNLOCK_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_UNLOCK_ACK] = Encode_GMPKG_BOSSTOWER_UNLOCK_ACK;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_MTBOX_BUY_REQ] = Decode_GMPKG_BOSSTOWER_MTBOX_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_MTBOX_BUY_REQ] = Encode_GMPKG_BOSSTOWER_MTBOX_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_BOSSTOWER_MTBOX_BUY_ACK] = Decode_GMPKG_BOSSTOWER_MTBOX_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_BOSSTOWER_MTBOX_BUY_ACK] = Encode_GMPKG_BOSSTOWER_MTBOX_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_BAG_REQ] = Decode_GMPKG_NUCLEAR_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_BAG_REQ] = Encode_GMPKG_NUCLEAR_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_BAG_ACK] = Decode_GMPKG_NUCLEAR_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_BAG_ACK] = Encode_GMPKG_NUCLEAR_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_START_BATTLE_REQ] = Decode_GMPKG_NUCLEAR_START_BATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_START_BATTLE_REQ] = Encode_GMPKG_NUCLEAR_START_BATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_START_BATTLE_ACK] = Decode_GMPKG_NUCLEAR_START_BATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_START_BATTLE_ACK] = Encode_GMPKG_NUCLEAR_START_BATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_END_BATTLE_REQ] = Decode_GMPKG_NUCLEAR_END_BATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_END_BATTLE_REQ] = Encode_GMPKG_NUCLEAR_END_BATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_END_BATTLE_ACK] = Decode_GMPKG_NUCLEAR_END_BATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_END_BATTLE_ACK] = Encode_GMPKG_NUCLEAR_END_BATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_QUIT_BATTLE_REQ] = Decode_GMPKG_NUCLEAR_QUIT_BATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_QUIT_BATTLE_REQ] = Encode_GMPKG_NUCLEAR_QUIT_BATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_QUIT_BATTLE_ACK] = Decode_GMPKG_NUCLEAR_QUIT_BATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_QUIT_BATTLE_ACK] = Encode_GMPKG_NUCLEAR_QUIT_BATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_GET_REWARD_REQ] = Decode_GMPKG_NUCLEAR_GET_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_GET_REWARD_REQ] = Encode_GMPKG_NUCLEAR_GET_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_GET_REWARD_ACK] = Decode_GMPKG_NUCLEAR_GET_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_GET_REWARD_ACK] = Encode_GMPKG_NUCLEAR_GET_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_GET_RANKLIST_REQ] = Decode_GMPKG_NUCLEAR_GET_RANKLIST_REQ;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_GET_RANKLIST_REQ] = Encode_GMPKG_NUCLEAR_GET_RANKLIST_REQ;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_GET_RANKLIST_ACK] = Decode_GMPKG_NUCLEAR_GET_RANKLIST_ACK;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_GET_RANKLIST_ACK] = Encode_GMPKG_NUCLEAR_GET_RANKLIST_ACK;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_NTF] = Decode_GMPKG_NUCLEAR_NTF;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_NTF] = Encode_GMPKG_NUCLEAR_NTF;
    P.m_oMapDecodeFunc[P.GMID_FULI_GIFT_DATA_REQ] = Decode_GMPKG_FULI_GIFT_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_GIFT_DATA_REQ] = Encode_GMPKG_FULI_GIFT_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_GIFT_DATA_ACK] = Decode_GMPKG_FULI_GIFT_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_GIFT_DATA_ACK] = Encode_GMPKG_FULI_GIFT_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_GIFT_BUY_REQ] = Decode_GMPKG_FULI_GIFT_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_GIFT_BUY_REQ] = Encode_GMPKG_FULI_GIFT_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_GIFT_BUY_ACK] = Decode_GMPKG_FULI_GIFT_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_GIFT_BUY_ACK] = Encode_GMPKG_FULI_GIFT_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_GIFT_NTF] = Decode_GMPKG_FULI_GIFT_NTF;
    P.m_oMapEncodeFunc[P.GMID_FULI_GIFT_NTF] = Encode_GMPKG_FULI_GIFT_NTF;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_DATA_REQ] = Decode_GMPKG_FULI_SEVEN_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_DATA_REQ] = Encode_GMPKG_FULI_SEVEN_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_DATA_ACK] = Decode_GMPKG_FULI_SEVEN_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_DATA_ACK] = Encode_GMPKG_FULI_SEVEN_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_ALL_REQ] = Decode_GMPKG_FULI_SEVEN_ALL_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_ALL_REQ] = Encode_GMPKG_FULI_SEVEN_ALL_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_ALL_ACK] = Decode_GMPKG_FULI_SEVEN_ALL_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_ALL_ACK] = Encode_GMPKG_FULI_SEVEN_ALL_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_CZ_REQ] = Decode_GMPKG_FULI_SEVEN_CZ_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_CZ_REQ] = Encode_GMPKG_FULI_SEVEN_CZ_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_CZ_ACK] = Decode_GMPKG_FULI_SEVEN_CZ_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_CZ_ACK] = Encode_GMPKG_FULI_SEVEN_CZ_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_DARE_REQ] = Decode_GMPKG_FULI_SEVEN_DARE_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_DARE_REQ] = Encode_GMPKG_FULI_SEVEN_DARE_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_DARE_ACK] = Decode_GMPKG_FULI_SEVEN_DARE_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_DARE_ACK] = Encode_GMPKG_FULI_SEVEN_DARE_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_NTF] = Decode_GMPKG_FULI_SEVEN_NTF;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_NTF] = Encode_GMPKG_FULI_SEVEN_NTF;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_BUY_REQ] = Decode_GMPKG_FULI_SEVEN_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_BUY_REQ] = Encode_GMPKG_FULI_SEVEN_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_BUY_ACK] = Decode_GMPKG_FULI_SEVEN_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_BUY_ACK] = Encode_GMPKG_FULI_SEVEN_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_SEVEN_DAY_NTF] = Decode_GMPKG_FULI_SEVEN_DAY_NTF;
    P.m_oMapEncodeFunc[P.GMID_FULI_SEVEN_DAY_NTF] = Encode_GMPKG_FULI_SEVEN_DAY_NTF;
    P.m_oMapDecodeFunc[P.GMID_FULI_CZ_DATA_REQ] = Decode_GMPKG_FULI_CZ_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_CZ_DATA_REQ] = Encode_GMPKG_FULI_CZ_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_CZ_DATA_ACK] = Decode_GMPKG_FULI_CZ_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_CZ_DATA_ACK] = Encode_GMPKG_FULI_CZ_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_CZ_REQ] = Decode_GMPKG_FULI_CZ_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_CZ_REQ] = Encode_GMPKG_FULI_CZ_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_CZ_ACK] = Decode_GMPKG_FULI_CZ_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_CZ_ACK] = Encode_GMPKG_FULI_CZ_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_CZ_BUY_REQ] = Decode_GMPKG_FULI_CZ_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_CZ_BUY_REQ] = Encode_GMPKG_FULI_CZ_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_CZ_BUY_ACK] = Decode_GMPKG_FULI_CZ_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_CZ_BUY_ACK] = Encode_GMPKG_FULI_CZ_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_CZ_NTF] = Decode_GMPKG_FULI_CZ_NTF;
    P.m_oMapEncodeFunc[P.GMID_FULI_CZ_NTF] = Encode_GMPKG_FULI_CZ_NTF;
    P.m_oMapDecodeFunc[P.GMID_FULI_VIPBONUS_DATA_REQ] = Decode_GMPKG_FULI_VIPBONUS_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_VIPBONUS_DATA_REQ] = Encode_GMPKG_FULI_VIPBONUS_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_VIPBONUS_DATA_ACK] = Decode_GMPKG_FULI_VIPBONUS_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_VIPBONUS_DATA_ACK] = Encode_GMPKG_FULI_VIPBONUS_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_VIPBONUS_CZ_REQ] = Decode_GMPKG_FULI_VIPBONUS_CZ_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_VIPBONUS_CZ_REQ] = Encode_GMPKG_FULI_VIPBONUS_CZ_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_VIPBONUS_CZ_ACK] = Decode_GMPKG_FULI_VIPBONUS_CZ_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_VIPBONUS_CZ_ACK] = Encode_GMPKG_FULI_VIPBONUS_CZ_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_VIPBONUS_VIP_REQ] = Decode_GMPKG_FULI_VIPBONUS_VIP_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_VIPBONUS_VIP_REQ] = Encode_GMPKG_FULI_VIPBONUS_VIP_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_VIPBONUS_VIP_ACK] = Decode_GMPKG_FULI_VIPBONUS_VIP_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_VIPBONUS_VIP_ACK] = Encode_GMPKG_FULI_VIPBONUS_VIP_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_VIPBONUS_NTF] = Decode_GMPKG_FULI_VIPBONUS_NTF;
    P.m_oMapEncodeFunc[P.GMID_FULI_VIPBONUS_NTF] = Encode_GMPKG_FULI_VIPBONUS_NTF;
    P.m_oMapDecodeFunc[P.GMID_FULI_SHARE_DAILY_REQ] = Decode_GMPKG_FULI_SHARE_DAILY_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_SHARE_DAILY_REQ] = Encode_GMPKG_FULI_SHARE_DAILY_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_SHARE_DAILY_ACK] = Decode_GMPKG_FULI_SHARE_DAILY_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_SHARE_DAILY_ACK] = Encode_GMPKG_FULI_SHARE_DAILY_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_SHARE_RECOMMAND_REQ] = Decode_GMPKG_FULI_SHARE_RECOMMAND_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_SHARE_RECOMMAND_REQ] = Encode_GMPKG_FULI_SHARE_RECOMMAND_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_SHARE_RECOMMAND_ACK] = Decode_GMPKG_FULI_SHARE_RECOMMAND_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_SHARE_RECOMMAND_ACK] = Encode_GMPKG_FULI_SHARE_RECOMMAND_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_SHARE_MEMBER_TESTPLAY_REQ] = Decode_GMPKG_FULI_SHARE_MEMBER_TESTPLAY_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_SHARE_MEMBER_TESTPLAY_REQ] = Encode_GMPKG_FULI_SHARE_MEMBER_TESTPLAY_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_SHARE_MEMBER_TESTPLAY_ACK] = Decode_GMPKG_FULI_SHARE_MEMBER_TESTPLAY_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_SHARE_MEMBER_TESTPLAY_ACK] = Encode_GMPKG_FULI_SHARE_MEMBER_TESTPLAY_ACK;
    P.m_oMapDecodeFunc[P.GMID_ARENA_OPEN_REQ] = Decode_GMPKG_ARENA_OPEN_REQ;
    P.m_oMapEncodeFunc[P.GMID_ARENA_OPEN_REQ] = Encode_GMPKG_ARENA_OPEN_REQ;
    P.m_oMapDecodeFunc[P.GMID_ARENA_OPEN_ACK] = Decode_GMPKG_ARENA_OPEN_ACK;
    P.m_oMapEncodeFunc[P.GMID_ARENA_OPEN_ACK] = Encode_GMPKG_ARENA_OPEN_ACK;
    P.m_oMapDecodeFunc[P.GMID_ARENA_REPORT_REQ] = Decode_GMPKG_ARENA_REPORT_REQ;
    P.m_oMapEncodeFunc[P.GMID_ARENA_REPORT_REQ] = Encode_GMPKG_ARENA_REPORT_REQ;
    P.m_oMapDecodeFunc[P.GMID_ARENA_REPORT_ACK] = Decode_GMPKG_ARENA_REPORT_ACK;
    P.m_oMapEncodeFunc[P.GMID_ARENA_REPORT_ACK] = Encode_GMPKG_ARENA_REPORT_ACK;
    P.m_oMapDecodeFunc[P.GMID_ARENA_RANK_TOP_LIST_REQ] = Decode_GMPKG_ARENA_RANK_TOP_LIST_REQ;
    P.m_oMapEncodeFunc[P.GMID_ARENA_RANK_TOP_LIST_REQ] = Encode_GMPKG_ARENA_RANK_TOP_LIST_REQ;
    P.m_oMapDecodeFunc[P.GMID_ARENA_RANK_TOP_LIST_ACK] = Decode_GMPKG_ARENA_RANK_TOP_LIST_ACK;
    P.m_oMapEncodeFunc[P.GMID_ARENA_RANK_TOP_LIST_ACK] = Encode_GMPKG_ARENA_RANK_TOP_LIST_ACK;
    P.m_oMapDecodeFunc[P.GMID_ARENA_LIKE_REQ] = Decode_GMPKG_ARENA_LIKE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ARENA_LIKE_REQ] = Encode_GMPKG_ARENA_LIKE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ARENA_LIKE_ACK] = Decode_GMPKG_ARENA_LIKE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ARENA_LIKE_ACK] = Encode_GMPKG_ARENA_LIKE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ARENA_CHALLENGE_REQ] = Decode_GMPKG_ARENA_CHALLENGE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ARENA_CHALLENGE_REQ] = Encode_GMPKG_ARENA_CHALLENGE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ARENA_CHALLENGE_ACK] = Decode_GMPKG_ARENA_CHALLENGE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ARENA_CHALLENGE_ACK] = Encode_GMPKG_ARENA_CHALLENGE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ARENA_CHALLENGE_COUNT_BUY_REQ] = Decode_GMPKG_ARENA_CHALLENGE_COUNT_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_ARENA_CHALLENGE_COUNT_BUY_REQ] = Encode_GMPKG_ARENA_CHALLENGE_COUNT_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_ARENA_CHALLENGE_COUNT_BUY_ACK] = Decode_GMPKG_ARENA_CHALLENGE_COUNT_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_ARENA_CHALLENGE_COUNT_BUY_ACK] = Encode_GMPKG_ARENA_CHALLENGE_COUNT_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_ARENA_POINTS_CHANGE_NTF] = Decode_GMPKG_ARENA_POINTS_CHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_ARENA_POINTS_CHANGE_NTF] = Encode_GMPKG_ARENA_POINTS_CHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_ARENA_DAY_REWARD_REQ] = Decode_GMPKG_ARENA_DAY_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_ARENA_DAY_REWARD_REQ] = Encode_GMPKG_ARENA_DAY_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_ARENA_DAY_REWARD_ACK] = Decode_GMPKG_ARENA_DAY_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_ARENA_DAY_REWARD_ACK] = Encode_GMPKG_ARENA_DAY_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_ARENA_SAODANG_REQ] = Decode_GMPKG_ARENA_SAODANG_REQ;
    P.m_oMapEncodeFunc[P.GMID_ARENA_SAODANG_REQ] = Encode_GMPKG_ARENA_SAODANG_REQ;
    P.m_oMapDecodeFunc[P.GMID_ARENA_SAODANG_ACK] = Decode_GMPKG_ARENA_SAODANG_ACK;
    P.m_oMapEncodeFunc[P.GMID_ARENA_SAODANG_ACK] = Encode_GMPKG_ARENA_SAODANG_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_PIECE_DATA_REQ] = Decode_GMPKG_MEMBER_PIECE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_PIECE_DATA_REQ] = Encode_GMPKG_MEMBER_PIECE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_PIECE_DATA_ACK] = Decode_GMPKG_MEMBER_PIECE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_PIECE_DATA_ACK] = Encode_GMPKG_MEMBER_PIECE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_PIECE_BREAK_REQ] = Decode_GMPKG_MEMBER_PIECE_BREAK_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_PIECE_BREAK_REQ] = Encode_GMPKG_MEMBER_PIECE_BREAK_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_PIECE_BREAK_ACK] = Decode_GMPKG_MEMBER_PIECE_BREAK_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_PIECE_BREAK_ACK] = Encode_GMPKG_MEMBER_PIECE_BREAK_ACK;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_PIECE_COM_REQ] = Decode_GMPKG_MEMBER_PIECE_COM_REQ;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_PIECE_COM_REQ] = Encode_GMPKG_MEMBER_PIECE_COM_REQ;
    P.m_oMapDecodeFunc[P.GMID_MEMBER_PIECE_COM_ACK] = Decode_GMPKG_MEMBER_PIECE_COM_ACK;
    P.m_oMapEncodeFunc[P.GMID_MEMBER_PIECE_COM_ACK] = Encode_GMPKG_MEMBER_PIECE_COM_ACK;
    P.m_oMapDecodeFunc[P.GMID_GIFT_CARD_REQ] = Decode_GMPKG_GIFT_CARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_GIFT_CARD_REQ] = Encode_GMPKG_GIFT_CARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_GIFT_CARD_ACK] = Decode_GMPKG_GIFT_CARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_GIFT_CARD_ACK] = Encode_GMPKG_GIFT_CARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_BAG_REQ] = Decode_GMPKG_ROLEEQUIP_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_BAG_REQ] = Encode_GMPKG_ROLEEQUIP_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_BAG_ACK] = Decode_GMPKG_ROLEEQUIP_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_BAG_ACK] = Encode_GMPKG_ROLEEQUIP_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_PUTON_REQ] = Decode_GMPKG_ROLEEQUIP_PUTON_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_PUTON_REQ] = Encode_GMPKG_ROLEEQUIP_PUTON_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_PUTON_ACK] = Decode_GMPKG_ROLEEQUIP_PUTON_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_PUTON_ACK] = Encode_GMPKG_ROLEEQUIP_PUTON_ACK;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_PUTOFF_REQ] = Decode_GMPKG_ROLEEQUIP_PUTOFF_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_PUTOFF_REQ] = Encode_GMPKG_ROLEEQUIP_PUTOFF_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_PUTOFF_ACK] = Decode_GMPKG_ROLEEQUIP_PUTOFF_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_PUTOFF_ACK] = Encode_GMPKG_ROLEEQUIP_PUTOFF_ACK;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_LINGWU_REQ] = Decode_GMPKG_ROLEEQUIP_LINGWU_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_LINGWU_REQ] = Encode_GMPKG_ROLEEQUIP_LINGWU_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_LINGWU_ACK] = Decode_GMPKG_ROLEEQUIP_LINGWU_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_LINGWU_ACK] = Encode_GMPKG_ROLEEQUIP_LINGWU_ACK;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_SPLIT_REQ] = Decode_GMPKG_ROLEEQUIP_SPLIT_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_SPLIT_REQ] = Encode_GMPKG_ROLEEQUIP_SPLIT_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_SPLIT_ACK] = Decode_GMPKG_ROLEEQUIP_SPLIT_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_SPLIT_ACK] = Encode_GMPKG_ROLEEQUIP_SPLIT_ACK;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_CHANGE_NTF] = Decode_GMPKG_ROLEEQUIP_CHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_CHANGE_NTF] = Encode_GMPKG_ROLEEQUIP_CHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_COMPOSE_REQ] = Decode_GMPKG_ROLEEQUIP_COMPOSE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_COMPOSE_REQ] = Encode_GMPKG_ROLEEQUIP_COMPOSE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_COMPOSE_ACK] = Decode_GMPKG_ROLEEQUIP_COMPOSE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_COMPOSE_ACK] = Encode_GMPKG_ROLEEQUIP_COMPOSE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_GEM_UPGRADE_REQ] = Decode_GMPKG_ROLEEQUIP_GEM_UPGRADE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_GEM_UPGRADE_REQ] = Encode_GMPKG_ROLEEQUIP_GEM_UPGRADE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_GEM_UPGRADE_ACK] = Decode_GMPKG_ROLEEQUIP_GEM_UPGRADE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_GEM_UPGRADE_ACK] = Encode_GMPKG_ROLEEQUIP_GEM_UPGRADE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_GEM_COMPOSE_REQ] = Decode_GMPKG_ROLEEQUIP_GEM_COMPOSE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_GEM_COMPOSE_REQ] = Encode_GMPKG_ROLEEQUIP_GEM_COMPOSE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_GEM_COMPOSE_ACK] = Decode_GMPKG_ROLEEQUIP_GEM_COMPOSE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_GEM_COMPOSE_ACK] = Encode_GMPKG_ROLEEQUIP_GEM_COMPOSE_ACK;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_QIANGHUA_REQ] = Decode_GMPKG_ROLEEQUIP_QIANGHUA_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_QIANGHUA_REQ] = Encode_GMPKG_ROLEEQUIP_QIANGHUA_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_QIANGHUA_ACK] = Decode_GMPKG_ROLEEQUIP_QIANGHUA_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_QIANGHUA_ACK] = Encode_GMPKG_ROLEEQUIP_QIANGHUA_ACK;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_GEM_COMTEN_REQ] = Decode_GMPKG_ROLEEQUIP_GEM_COMTEN_REQ;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_GEM_COMTEN_REQ] = Encode_GMPKG_ROLEEQUIP_GEM_COMTEN_REQ;
    P.m_oMapDecodeFunc[P.GMID_ROLEEQUIP_GEM_COMTEN_ACK] = Decode_GMPKG_ROLEEQUIP_GEM_COMTEN_ACK;
    P.m_oMapEncodeFunc[P.GMID_ROLEEQUIP_GEM_COMTEN_ACK] = Encode_GMPKG_ROLEEQUIP_GEM_COMTEN_ACK;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_BAG_REQ] = Decode_GMPKG_NEBULA_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_BAG_REQ] = Encode_GMPKG_NEBULA_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_BAG_ACK] = Decode_GMPKG_NEBULA_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_BAG_ACK] = Encode_GMPKG_NEBULA_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_MINE_REQ] = Decode_GMPKG_NEBULA_MINE_REQ;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_MINE_REQ] = Encode_GMPKG_NEBULA_MINE_REQ;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_MINE_ACK] = Decode_GMPKG_NEBULA_MINE_ACK;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_MINE_ACK] = Encode_GMPKG_NEBULA_MINE_ACK;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_OPENCHEST_REQ] = Decode_GMPKG_NEBULA_OPENCHEST_REQ;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_OPENCHEST_REQ] = Encode_GMPKG_NEBULA_OPENCHEST_REQ;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_OPENCHEST_ACK] = Decode_GMPKG_NEBULA_OPENCHEST_ACK;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_OPENCHEST_ACK] = Encode_GMPKG_NEBULA_OPENCHEST_ACK;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_ROB_REQ] = Decode_GMPKG_NEBULA_ROB_REQ;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_ROB_REQ] = Encode_GMPKG_NEBULA_ROB_REQ;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_ROB_ACK] = Decode_GMPKG_NEBULA_ROB_ACK;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_ROB_ACK] = Encode_GMPKG_NEBULA_ROB_ACK;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_ROB_LIST_REFRESH_REQ] = Decode_GMPKG_NEBULA_ROB_LIST_REFRESH_REQ;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_ROB_LIST_REFRESH_REQ] = Encode_GMPKG_NEBULA_ROB_LIST_REFRESH_REQ;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_ROB_LIST_REFRESH_ACK] = Decode_GMPKG_NEBULA_ROB_LIST_REFRESH_ACK;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_ROB_LIST_REFRESH_ACK] = Encode_GMPKG_NEBULA_ROB_LIST_REFRESH_ACK;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_ROB_LIST_REQ] = Decode_GMPKG_NEBULA_ROB_LIST_REQ;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_ROB_LIST_REQ] = Encode_GMPKG_NEBULA_ROB_LIST_REQ;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_ROB_LIST_ACK] = Decode_GMPKG_NEBULA_ROB_LIST_ACK;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_ROB_LIST_ACK] = Encode_GMPKG_NEBULA_ROB_LIST_ACK;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_BUYENERGY_REQ] = Decode_GMPKG_NEBULA_BUYENERGY_REQ;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_BUYENERGY_REQ] = Encode_GMPKG_NEBULA_BUYENERGY_REQ;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_BUYENERGY_ACK] = Decode_GMPKG_NEBULA_BUYENERGY_ACK;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_BUYENERGY_ACK] = Encode_GMPKG_NEBULA_BUYENERGY_ACK;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_NERGY_NTF] = Decode_GMPKG_NEBULA_NERGY_NTF;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_NERGY_NTF] = Encode_GMPKG_NEBULA_NERGY_NTF;
    P.m_oMapDecodeFunc[P.GMID_NEBULA_ZIZUAN_NTF] = Decode_GMPKG_NEBULA_ZIZUAN_NTF;
    P.m_oMapEncodeFunc[P.GMID_NEBULA_ZIZUAN_NTF] = Encode_GMPKG_NEBULA_ZIZUAN_NTF;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_BAG_REQ] = Decode_GMPKG_HEROCAMP_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_BAG_REQ] = Encode_GMPKG_HEROCAMP_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_BAG_ACK] = Decode_GMPKG_HEROCAMP_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_BAG_ACK] = Encode_GMPKG_HEROCAMP_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_BEGIN_REQ] = Decode_GMPKG_HEROCAMP_BEGIN_REQ;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_BEGIN_REQ] = Encode_GMPKG_HEROCAMP_BEGIN_REQ;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_BEGIN_ACK] = Decode_GMPKG_HEROCAMP_BEGIN_ACK;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_BEGIN_ACK] = Encode_GMPKG_HEROCAMP_BEGIN_ACK;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_END_REQ] = Decode_GMPKG_HEROCAMP_END_REQ;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_END_REQ] = Encode_GMPKG_HEROCAMP_END_REQ;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_END_ACK] = Decode_GMPKG_HEROCAMP_END_ACK;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_END_ACK] = Encode_GMPKG_HEROCAMP_END_ACK;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_QUIT_REQ] = Decode_GMPKG_HEROCAMP_QUIT_REQ;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_QUIT_REQ] = Encode_GMPKG_HEROCAMP_QUIT_REQ;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_QUIT_NTF] = Decode_GMPKG_HEROCAMP_QUIT_NTF;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_QUIT_NTF] = Encode_GMPKG_HEROCAMP_QUIT_NTF;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_REVIVE_REQ] = Decode_GMPKG_HEROCAMP_REVIVE_REQ;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_REVIVE_REQ] = Encode_GMPKG_HEROCAMP_REVIVE_REQ;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_REVIVE_ACK] = Decode_GMPKG_HEROCAMP_REVIVE_ACK;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_REVIVE_ACK] = Encode_GMPKG_HEROCAMP_REVIVE_ACK;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_SAODANG_REQ] = Decode_GMPKG_HEROCAMP_SAODANG_REQ;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_SAODANG_REQ] = Encode_GMPKG_HEROCAMP_SAODANG_REQ;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_SAODANG_ACK] = Decode_GMPKG_HEROCAMP_SAODANG_ACK;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_SAODANG_ACK] = Encode_GMPKG_HEROCAMP_SAODANG_ACK;
    P.m_oMapDecodeFunc[P.GMID_HEROCHEST_OPEN_REQ] = Decode_GMPKG_HEROCHEST_OPEN_REQ;
    P.m_oMapEncodeFunc[P.GMID_HEROCHEST_OPEN_REQ] = Encode_GMPKG_HEROCHEST_OPEN_REQ;
    P.m_oMapDecodeFunc[P.GMID_HEROCHEST_OPEN_ACK] = Decode_GMPKG_HEROCHEST_OPEN_ACK;
    P.m_oMapEncodeFunc[P.GMID_HEROCHEST_OPEN_ACK] = Encode_GMPKG_HEROCHEST_OPEN_ACK;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_BUYCOUNT_REQ] = Decode_GMPKG_HEROCAMP_BUYCOUNT_REQ;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_BUYCOUNT_REQ] = Encode_GMPKG_HEROCAMP_BUYCOUNT_REQ;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_BUYCOUNT_ACK] = Decode_GMPKG_HEROCAMP_BUYCOUNT_ACK;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_BUYCOUNT_ACK] = Encode_GMPKG_HEROCAMP_BUYCOUNT_ACK;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_BUYSP_REQ] = Decode_GMPKG_HEROCAMP_BUYSP_REQ;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_BUYSP_REQ] = Encode_GMPKG_HEROCAMP_BUYSP_REQ;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_BUYSP_ACK] = Decode_GMPKG_HEROCAMP_BUYSP_ACK;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_BUYSP_ACK] = Encode_GMPKG_HEROCAMP_BUYSP_ACK;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_SPCHANGE_NTF] = Decode_GMPKG_HEROCAMP_SPCHANGE_NTF;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_SPCHANGE_NTF] = Encode_GMPKG_HEROCAMP_SPCHANGE_NTF;
    P.m_oMapDecodeFunc[P.GMID_HEROCAMP_ACTIVE_NTF] = Decode_GMPKG_HEROCAMP_ACTIVE_NTF;
    P.m_oMapEncodeFunc[P.GMID_HEROCAMP_ACTIVE_NTF] = Encode_GMPKG_HEROCAMP_ACTIVE_NTF;
    P.m_oMapDecodeFunc[P.GMID_MIBAO_STORE_DATA_REQ] = Decode_GMPKG_MIBAO_STORE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_MIBAO_STORE_DATA_REQ] = Encode_GMPKG_MIBAO_STORE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_MIBAO_STORE_DATA_ACK] = Decode_GMPKG_MIBAO_STORE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_MIBAO_STORE_DATA_ACK] = Encode_GMPKG_MIBAO_STORE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_MIBAO_STORE_BUY_REQ] = Decode_GMPKG_MIBAO_STORE_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_MIBAO_STORE_BUY_REQ] = Encode_GMPKG_MIBAO_STORE_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_MIBAO_STORE_BUY_ACK] = Decode_GMPKG_MIBAO_STORE_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_MIBAO_STORE_BUY_ACK] = Encode_GMPKG_MIBAO_STORE_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_VIP_STORE_DATA_REQ] = Decode_GMPKG_VIP_STORE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_VIP_STORE_DATA_REQ] = Encode_GMPKG_VIP_STORE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_VIP_STORE_DATA_ACK] = Decode_GMPKG_VIP_STORE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_VIP_STORE_DATA_ACK] = Encode_GMPKG_VIP_STORE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_VIP_STORE_BUY_REQ] = Decode_GMPKG_VIP_STORE_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_VIP_STORE_BUY_REQ] = Encode_GMPKG_VIP_STORE_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_VIP_STORE_BUY_ACK] = Decode_GMPKG_VIP_STORE_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_VIP_STORE_BUY_ACK] = Encode_GMPKG_VIP_STORE_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_STORE_DATA_REQ] = Decode_GMPKG_NUCLEAR_STORE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_STORE_DATA_REQ] = Encode_GMPKG_NUCLEAR_STORE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_STORE_DATA_ACK] = Decode_GMPKG_NUCLEAR_STORE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_STORE_DATA_ACK] = Encode_GMPKG_NUCLEAR_STORE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_STORE_BUY_REQ] = Decode_GMPKG_NUCLEAR_STORE_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_STORE_BUY_REQ] = Encode_GMPKG_NUCLEAR_STORE_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_NUCLEAR_STORE_BUY_ACK] = Decode_GMPKG_NUCLEAR_STORE_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_NUCLEAR_STORE_BUY_ACK] = Encode_GMPKG_NUCLEAR_STORE_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_TOWER_FLOOR_STORE_DATA_REQ] = Decode_GMPKG_TOWER_FLOOR_STORE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_TOWER_FLOOR_STORE_DATA_REQ] = Encode_GMPKG_TOWER_FLOOR_STORE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_TOWER_FLOOR_STORE_DATA_ACK] = Decode_GMPKG_TOWER_FLOOR_STORE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_TOWER_FLOOR_STORE_DATA_ACK] = Encode_GMPKG_TOWER_FLOOR_STORE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_TOWER_FLOOR_STORE_BUY_REQ] = Decode_GMPKG_TOWER_FLOOR_STORE_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_TOWER_FLOOR_STORE_BUY_REQ] = Encode_GMPKG_TOWER_FLOOR_STORE_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_TOWER_FLOOR_STORE_BUY_ACK] = Decode_GMPKG_TOWER_FLOOR_STORE_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_TOWER_FLOOR_STORE_BUY_ACK] = Encode_GMPKG_TOWER_FLOOR_STORE_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_TOWER_FLOOR_STORE_NEXT_REQ] = Decode_GMPKG_TOWER_FLOOR_STORE_NEXT_REQ;
    P.m_oMapEncodeFunc[P.GMID_TOWER_FLOOR_STORE_NEXT_REQ] = Encode_GMPKG_TOWER_FLOOR_STORE_NEXT_REQ;
    P.m_oMapDecodeFunc[P.GMID_TOWER_FLOOR_STORE_NEXT_ACK] = Decode_GMPKG_TOWER_FLOOR_STORE_NEXT_ACK;
    P.m_oMapEncodeFunc[P.GMID_TOWER_FLOOR_STORE_NEXT_ACK] = Encode_GMPKG_TOWER_FLOOR_STORE_NEXT_ACK;
    P.m_oMapDecodeFunc[P.GMID_RANK_STORE_DATA_REQ] = Decode_GMPKG_RANK_STORE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_RANK_STORE_DATA_REQ] = Encode_GMPKG_RANK_STORE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_RANK_STORE_DATA_ACK] = Decode_GMPKG_RANK_STORE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_RANK_STORE_DATA_ACK] = Encode_GMPKG_RANK_STORE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_RANK_STORE_BUY_REQ] = Decode_GMPKG_RANK_STORE_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_RANK_STORE_BUY_REQ] = Encode_GMPKG_RANK_STORE_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_RANK_STORE_BUY_ACK] = Decode_GMPKG_RANK_STORE_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_RANK_STORE_BUY_ACK] = Encode_GMPKG_RANK_STORE_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_DEVIL_STORE_DATA_REQ] = Decode_GMPKG_DEVIL_STORE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_DEVIL_STORE_DATA_REQ] = Encode_GMPKG_DEVIL_STORE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_DEVIL_STORE_DATA_ACK] = Decode_GMPKG_DEVIL_STORE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_DEVIL_STORE_DATA_ACK] = Encode_GMPKG_DEVIL_STORE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_DEVIL_STORE_BUY_REQ] = Decode_GMPKG_DEVIL_STORE_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_DEVIL_STORE_BUY_REQ] = Encode_GMPKG_DEVIL_STORE_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_DEVIL_STORE_BUY_ACK] = Decode_GMPKG_DEVIL_STORE_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_DEVIL_STORE_BUY_ACK] = Encode_GMPKG_DEVIL_STORE_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_WAR_BAG_REQ] = Decode_GMPKG_WAR_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_WAR_BAG_REQ] = Encode_GMPKG_WAR_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_WAR_BAG_ACK] = Decode_GMPKG_WAR_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_WAR_BAG_ACK] = Encode_GMPKG_WAR_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_WAR_START_REQ] = Decode_GMPKG_WAR_START_REQ;
    P.m_oMapEncodeFunc[P.GMID_WAR_START_REQ] = Encode_GMPKG_WAR_START_REQ;
    P.m_oMapDecodeFunc[P.GMID_WAR_START_ACK] = Decode_GMPKG_WAR_START_ACK;
    P.m_oMapEncodeFunc[P.GMID_WAR_START_ACK] = Encode_GMPKG_WAR_START_ACK;
    P.m_oMapDecodeFunc[P.GMID_WAR_END_REQ] = Decode_GMPKG_WAR_END_REQ;
    P.m_oMapEncodeFunc[P.GMID_WAR_END_REQ] = Encode_GMPKG_WAR_END_REQ;
    P.m_oMapDecodeFunc[P.GMID_WAR_END_ACK] = Decode_GMPKG_WAR_END_ACK;
    P.m_oMapEncodeFunc[P.GMID_WAR_END_ACK] = Encode_GMPKG_WAR_END_ACK;
    P.m_oMapDecodeFunc[P.GMID_WAR_QUIT_REQ] = Decode_GMPKG_WAR_QUIT_REQ;
    P.m_oMapEncodeFunc[P.GMID_WAR_QUIT_REQ] = Encode_GMPKG_WAR_QUIT_REQ;
    P.m_oMapDecodeFunc[P.GMID_WAR_QUIT_ACK] = Decode_GMPKG_WAR_QUIT_ACK;
    P.m_oMapEncodeFunc[P.GMID_WAR_QUIT_ACK] = Encode_GMPKG_WAR_QUIT_ACK;
    P.m_oMapDecodeFunc[P.GMID_WAR_SAODANG_REQ] = Decode_GMPKG_WAR_SAODANG_REQ;
    P.m_oMapEncodeFunc[P.GMID_WAR_SAODANG_REQ] = Encode_GMPKG_WAR_SAODANG_REQ;
    P.m_oMapDecodeFunc[P.GMID_WAR_SAODANG_ACK] = Decode_GMPKG_WAR_SAODANG_ACK;
    P.m_oMapEncodeFunc[P.GMID_WAR_SAODANG_ACK] = Encode_GMPKG_WAR_SAODANG_ACK;
    P.m_oMapDecodeFunc[P.GMID_WAR_REWARD_REQ] = Decode_GMPKG_WAR_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_WAR_REWARD_REQ] = Encode_GMPKG_WAR_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_WAR_REWARD_ACK] = Decode_GMPKG_WAR_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_WAR_REWARD_ACK] = Encode_GMPKG_WAR_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_WAR_BUY_REQ] = Decode_GMPKG_WAR_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_WAR_BUY_REQ] = Encode_GMPKG_WAR_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_WAR_BUY_ACK] = Decode_GMPKG_WAR_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_WAR_BUY_ACK] = Encode_GMPKG_WAR_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_WAR_POINT_NTF] = Decode_GMPKG_WAR_POINT_NTF;
    P.m_oMapEncodeFunc[P.GMID_WAR_POINT_NTF] = Encode_GMPKG_WAR_POINT_NTF;
    P.m_oMapDecodeFunc[P.GMID_ZIZUAN_GIFT_DATA_REQ] = Decode_GMPKG_ZIZUAN_GIFT_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_ZIZUAN_GIFT_DATA_REQ] = Encode_GMPKG_ZIZUAN_GIFT_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_ZIZUAN_GIFT_DATA_ACK] = Decode_GMPKG_ZIZUAN_GIFT_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_ZIZUAN_GIFT_DATA_ACK] = Encode_GMPKG_ZIZUAN_GIFT_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_ZIZUAN_GIFT_BUY_REQ] = Decode_GMPKG_ZIZUAN_GIFT_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_ZIZUAN_GIFT_BUY_REQ] = Encode_GMPKG_ZIZUAN_GIFT_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_ZIZUAN_GIFT_BUY_ACK] = Decode_GMPKG_ZIZUAN_GIFT_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_ZIZUAN_GIFT_BUY_ACK] = Encode_GMPKG_ZIZUAN_GIFT_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_ZIZUAN_EXCHANGE_REQ] = Decode_GMPKG_ZIZUAN_EXCHANGE_REQ;
    P.m_oMapEncodeFunc[P.GMID_ZIZUAN_EXCHANGE_REQ] = Encode_GMPKG_ZIZUAN_EXCHANGE_REQ;
    P.m_oMapDecodeFunc[P.GMID_ZIZUAN_EXCHANGE_ACK] = Decode_GMPKG_ZIZUAN_EXCHANGE_ACK;
    P.m_oMapEncodeFunc[P.GMID_ZIZUAN_EXCHANGE_ACK] = Encode_GMPKG_ZIZUAN_EXCHANGE_ACK;
    P.m_oMapDecodeFunc[P.GMID_RANK_REQ] = Decode_GMPKG_RANK_REQ;
    P.m_oMapEncodeFunc[P.GMID_RANK_REQ] = Encode_GMPKG_RANK_REQ;
    P.m_oMapDecodeFunc[P.GMID_RANK_ACK] = Decode_GMPKG_RANK_ACK;
    P.m_oMapEncodeFunc[P.GMID_RANK_ACK] = Encode_GMPKG_RANK_ACK;
    P.m_oMapDecodeFunc[P.GMID_RANK_DIANZAN_REQ] = Decode_GMPKG_RANK_DIANZAN_REQ;
    P.m_oMapEncodeFunc[P.GMID_RANK_DIANZAN_REQ] = Encode_GMPKG_RANK_DIANZAN_REQ;
    P.m_oMapDecodeFunc[P.GMID_RANK_DIANZAN_ACK] = Decode_GMPKG_RANK_DIANZAN_ACK;
    P.m_oMapEncodeFunc[P.GMID_RANK_DIANZAN_ACK] = Encode_GMPKG_RANK_DIANZAN_ACK;
    P.m_oMapDecodeFunc[P.GMID_FUND_DATA_REQ] = Decode_GMPKG_FUND_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_FUND_DATA_REQ] = Encode_GMPKG_FUND_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_FUND_DATA_ACK] = Decode_GMPKG_FUND_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_FUND_DATA_ACK] = Encode_GMPKG_FUND_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_FUND_BUY_REQ] = Decode_GMPKG_FUND_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_FUND_BUY_REQ] = Encode_GMPKG_FUND_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_FUND_BUY_ACK] = Decode_GMPKG_FUND_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_FUND_BUY_ACK] = Encode_GMPKG_FUND_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_FUND_GET_REQ] = Decode_GMPKG_FUND_GET_REQ;
    P.m_oMapEncodeFunc[P.GMID_FUND_GET_REQ] = Encode_GMPKG_FUND_GET_REQ;
    P.m_oMapDecodeFunc[P.GMID_FUND_GET_ACK] = Decode_GMPKG_FUND_GET_ACK;
    P.m_oMapEncodeFunc[P.GMID_FUND_GET_ACK] = Encode_GMPKG_FUND_GET_ACK;
    P.m_oMapDecodeFunc[P.GMID_FUND_NTF] = Decode_GMPKG_FUND_NTF;
    P.m_oMapEncodeFunc[P.GMID_FUND_NTF] = Encode_GMPKG_FUND_NTF;
    P.m_oMapDecodeFunc[P.GMID_REWARD_CENTER_REQ] = Decode_GMPKG_REWARD_CENTER_REQ;
    P.m_oMapEncodeFunc[P.GMID_REWARD_CENTER_REQ] = Encode_GMPKG_REWARD_CENTER_REQ;
    P.m_oMapDecodeFunc[P.GMID_REWARD_CENTER_NTF] = Decode_GMPKG_REWARD_CENTER_NTF;
    P.m_oMapEncodeFunc[P.GMID_REWARD_CENTER_NTF] = Encode_GMPKG_REWARD_CENTER_NTF;
    P.m_oMapDecodeFunc[P.GMID_REWARD_CENTER_GETREWARD_REQ] = Decode_GMPKG_REWARD_CENTER_GETREWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_REWARD_CENTER_GETREWARD_REQ] = Encode_GMPKG_REWARD_CENTER_GETREWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_REWARD_CENTER_GETREWARD_ACK] = Decode_GMPKG_REWARD_CENTER_GETREWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_REWARD_CENTER_GETREWARD_ACK] = Encode_GMPKG_REWARD_CENTER_GETREWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_REWARD_CENTER_ALLREWARD_REQ] = Decode_GMPKG_REWARD_CENTER_ALLREWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_REWARD_CENTER_ALLREWARD_REQ] = Encode_GMPKG_REWARD_CENTER_ALLREWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_REWARD_CENTER_ALLREWARD_ACK] = Decode_GMPKG_REWARD_CENTER_ALLREWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_REWARD_CENTER_ALLREWARD_ACK] = Encode_GMPKG_REWARD_CENTER_ALLREWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_BAG_REQ] = Decode_GMPKG_DARK_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_BAG_REQ] = Encode_GMPKG_DARK_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_BAG_ACK] = Decode_GMPKG_DARK_BAG_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_BAG_ACK] = Encode_GMPKG_DARK_BAG_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_START_BATTLE_REQ] = Decode_GMPKG_DARK_START_BATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_START_BATTLE_REQ] = Encode_GMPKG_DARK_START_BATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_START_BATTLE_ACK] = Decode_GMPKG_DARK_START_BATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_START_BATTLE_ACK] = Encode_GMPKG_DARK_START_BATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_END_BATTLE_REQ] = Decode_GMPKG_DARK_END_BATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_END_BATTLE_REQ] = Encode_GMPKG_DARK_END_BATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_END_BATTLE_ACK] = Decode_GMPKG_DARK_END_BATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_END_BATTLE_ACK] = Encode_GMPKG_DARK_END_BATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_BATTLE_DRAW_REQ] = Decode_GMPKG_DARK_BATTLE_DRAW_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_BATTLE_DRAW_REQ] = Encode_GMPKG_DARK_BATTLE_DRAW_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_BATTLE_DRAW_ACK] = Decode_GMPKG_DARK_BATTLE_DRAW_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_BATTLE_DRAW_ACK] = Encode_GMPKG_DARK_BATTLE_DRAW_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_QUIT_BATTLE_REQ] = Decode_GMPKG_DARK_QUIT_BATTLE_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_QUIT_BATTLE_REQ] = Encode_GMPKG_DARK_QUIT_BATTLE_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_QUIT_BATTLE_ACK] = Decode_GMPKG_DARK_QUIT_BATTLE_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_QUIT_BATTLE_ACK] = Encode_GMPKG_DARK_QUIT_BATTLE_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_SAODANG_REQ] = Decode_GMPKG_DARK_SAODANG_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_SAODANG_REQ] = Encode_GMPKG_DARK_SAODANG_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_SAODANG_ACK] = Decode_GMPKG_DARK_SAODANG_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_SAODANG_ACK] = Encode_GMPKG_DARK_SAODANG_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_SAODANG_DRAW_REQ] = Decode_GMPKG_DARK_SAODANG_DRAW_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_SAODANG_DRAW_REQ] = Encode_GMPKG_DARK_SAODANG_DRAW_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_SAODANG_DRAW_ACK] = Decode_GMPKG_DARK_SAODANG_DRAW_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_SAODANG_DRAW_ACK] = Encode_GMPKG_DARK_SAODANG_DRAW_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_SAODANG_QUIT_REQ] = Decode_GMPKG_DARK_SAODANG_QUIT_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_SAODANG_QUIT_REQ] = Encode_GMPKG_DARK_SAODANG_QUIT_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_SAODANG_QUIT_ACK] = Decode_GMPKG_DARK_SAODANG_QUIT_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_SAODANG_QUIT_ACK] = Encode_GMPKG_DARK_SAODANG_QUIT_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_REFRESH_BOSS_REQ] = Decode_GMPKG_DARK_REFRESH_BOSS_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_REFRESH_BOSS_REQ] = Encode_GMPKG_DARK_REFRESH_BOSS_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_REFRESH_BOSS_ACK] = Decode_GMPKG_DARK_REFRESH_BOSS_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_REFRESH_BOSS_ACK] = Encode_GMPKG_DARK_REFRESH_BOSS_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_BUY_ITEM_REQ] = Decode_GMPKG_DARK_BUY_ITEM_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_BUY_ITEM_REQ] = Encode_GMPKG_DARK_BUY_ITEM_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_BUY_ITEM_ACK] = Decode_GMPKG_DARK_BUY_ITEM_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_BUY_ITEM_ACK] = Encode_GMPKG_DARK_BUY_ITEM_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_SELL_ITEM_REQ] = Decode_GMPKG_DARK_SELL_ITEM_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_SELL_ITEM_REQ] = Encode_GMPKG_DARK_SELL_ITEM_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_SELL_ITEM_ACK] = Decode_GMPKG_DARK_SELL_ITEM_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_SELL_ITEM_ACK] = Encode_GMPKG_DARK_SELL_ITEM_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_ITEM_NTF] = Decode_GMPKG_DARK_ITEM_NTF;
    P.m_oMapEncodeFunc[P.GMID_DARK_ITEM_NTF] = Encode_GMPKG_DARK_ITEM_NTF;
    P.m_oMapDecodeFunc[P.GMID_DARK_ACTIVE_TECH_REQ] = Decode_GMPKG_DARK_ACTIVE_TECH_REQ;
    P.m_oMapEncodeFunc[P.GMID_DARK_ACTIVE_TECH_REQ] = Encode_GMPKG_DARK_ACTIVE_TECH_REQ;
    P.m_oMapDecodeFunc[P.GMID_DARK_ACTIVE_TECH_ACK] = Decode_GMPKG_DARK_ACTIVE_TECH_ACK;
    P.m_oMapEncodeFunc[P.GMID_DARK_ACTIVE_TECH_ACK] = Encode_GMPKG_DARK_ACTIVE_TECH_ACK;
    P.m_oMapDecodeFunc[P.GMID_DARK_POINT_NTF] = Decode_GMPKG_DARK_POINT_NTF;
    P.m_oMapEncodeFunc[P.GMID_DARK_POINT_NTF] = Encode_GMPKG_DARK_POINT_NTF;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_PUTON_REQ] = Decode_GMPKG_GUAZAI_PUTON_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_PUTON_REQ] = Encode_GMPKG_GUAZAI_PUTON_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_PUTON_ACK] = Decode_GMPKG_GUAZAI_PUTON_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_PUTON_ACK] = Encode_GMPKG_GUAZAI_PUTON_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_QUALITYUP_REQ] = Decode_GMPKG_GUAZAI_QUALITYUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_QUALITYUP_REQ] = Encode_GMPKG_GUAZAI_QUALITYUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_QUALITYUP_ACK] = Decode_GMPKG_GUAZAI_QUALITYUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_QUALITYUP_ACK] = Encode_GMPKG_GUAZAI_QUALITYUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_LEVELUP_REQ] = Decode_GMPKG_GUAZAI_LEVELUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_LEVELUP_REQ] = Encode_GMPKG_GUAZAI_LEVELUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_LEVELUP_ACK] = Decode_GMPKG_GUAZAI_LEVELUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_LEVELUP_ACK] = Encode_GMPKG_GUAZAI_LEVELUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_STARUP_REQ] = Decode_GMPKG_GUAZAI_STARUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_STARUP_REQ] = Encode_GMPKG_GUAZAI_STARUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_STARUP_ACK] = Decode_GMPKG_GUAZAI_STARUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_STARUP_ACK] = Encode_GMPKG_GUAZAI_STARUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_REBIRTH_REQ] = Decode_GMPKG_GUAZAI_REBIRTH_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_REBIRTH_REQ] = Encode_GMPKG_GUAZAI_REBIRTH_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_REBIRTH_ACK] = Decode_GMPKG_GUAZAI_REBIRTH_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_REBIRTH_ACK] = Encode_GMPKG_GUAZAI_REBIRTH_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_HECHENG_REQ] = Decode_GMPKG_GUAZAI_HECHENG_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_HECHENG_REQ] = Encode_GMPKG_GUAZAI_HECHENG_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_HECHENG_ACK] = Decode_GMPKG_GUAZAI_HECHENG_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_HECHENG_ACK] = Encode_GMPKG_GUAZAI_HECHENG_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_AWAKE_REQ] = Decode_GMPKG_GUAZAI_AWAKE_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_AWAKE_REQ] = Encode_GMPKG_GUAZAI_AWAKE_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_AWAKE_ACK] = Decode_GMPKG_GUAZAI_AWAKE_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_AWAKE_ACK] = Encode_GMPKG_GUAZAI_AWAKE_ACK;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_AWAKEUP_REQ] = Decode_GMPKG_GUAZAI_AWAKEUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_AWAKEUP_REQ] = Encode_GMPKG_GUAZAI_AWAKEUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_GUAZAI_AWAKEUP_ACK] = Decode_GMPKG_GUAZAI_AWAKEUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_GUAZAI_AWAKEUP_ACK] = Encode_GMPKG_GUAZAI_AWAKEUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_MYSTERY_ACTIVE_REQ] = Decode_GMPKG_MYSTERY_ACTIVE_REQ;
    P.m_oMapEncodeFunc[P.GMID_MYSTERY_ACTIVE_REQ] = Encode_GMPKG_MYSTERY_ACTIVE_REQ;
    P.m_oMapDecodeFunc[P.GMID_MYSTERY_ACTIVE_ACK] = Decode_GMPKG_MYSTERY_ACTIVE_ACK;
    P.m_oMapEncodeFunc[P.GMID_MYSTERY_ACTIVE_ACK] = Encode_GMPKG_MYSTERY_ACTIVE_ACK;
    P.m_oMapDecodeFunc[P.GMID_MYSTERY_UP_REQ] = Decode_GMPKG_MYSTERY_UP_REQ;
    P.m_oMapEncodeFunc[P.GMID_MYSTERY_UP_REQ] = Encode_GMPKG_MYSTERY_UP_REQ;
    P.m_oMapDecodeFunc[P.GMID_MYSTERY_UP_ACK] = Decode_GMPKG_MYSTERY_UP_ACK;
    P.m_oMapEncodeFunc[P.GMID_MYSTERY_UP_ACK] = Encode_GMPKG_MYSTERY_UP_ACK;
    P.m_oMapDecodeFunc[P.GMID_DRESS_GET_REQ] = Decode_GMPKG_DRESS_GET_REQ;
    P.m_oMapEncodeFunc[P.GMID_DRESS_GET_REQ] = Encode_GMPKG_DRESS_GET_REQ;
    P.m_oMapDecodeFunc[P.GMID_DRESS_GET_ACK] = Decode_GMPKG_DRESS_GET_ACK;
    P.m_oMapEncodeFunc[P.GMID_DRESS_GET_ACK] = Encode_GMPKG_DRESS_GET_ACK;
    P.m_oMapDecodeFunc[P.GMID_DRESS_UP_REQ] = Decode_GMPKG_DRESS_UP_REQ;
    P.m_oMapEncodeFunc[P.GMID_DRESS_UP_REQ] = Encode_GMPKG_DRESS_UP_REQ;
    P.m_oMapDecodeFunc[P.GMID_DRESS_UP_ACK] = Decode_GMPKG_DRESS_UP_ACK;
    P.m_oMapEncodeFunc[P.GMID_DRESS_UP_ACK] = Encode_GMPKG_DRESS_UP_ACK;
    P.m_oMapDecodeFunc[P.GMID_DRESS_WEAR_REQ] = Decode_GMPKG_DRESS_WEAR_REQ;
    P.m_oMapEncodeFunc[P.GMID_DRESS_WEAR_REQ] = Encode_GMPKG_DRESS_WEAR_REQ;
    P.m_oMapDecodeFunc[P.GMID_DRESS_WEAR_ACK] = Decode_GMPKG_DRESS_WEAR_ACK;
    P.m_oMapEncodeFunc[P.GMID_DRESS_WEAR_ACK] = Encode_GMPKG_DRESS_WEAR_ACK;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_BATTLEFIELD_ACTIVE_REQ] = Decode_GMPKG_COMMANDER_BATTLEFIELD_ACTIVE_REQ;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_BATTLEFIELD_ACTIVE_REQ] = Encode_GMPKG_COMMANDER_BATTLEFIELD_ACTIVE_REQ;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_BATTLEFIELD_ACTIVE_ACK] = Decode_GMPKG_COMMANDER_BATTLEFIELD_ACTIVE_ACK;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_BATTLEFIELD_ACTIVE_ACK] = Encode_GMPKG_COMMANDER_BATTLEFIELD_ACTIVE_ACK;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_BATTLEFIELD_PUTON_REQ] = Decode_GMPKG_COMMANDER_BATTLEFIELD_PUTON_REQ;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_BATTLEFIELD_PUTON_REQ] = Encode_GMPKG_COMMANDER_BATTLEFIELD_PUTON_REQ;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_BATTLEFIELD_PUTON_ACK] = Decode_GMPKG_COMMANDER_BATTLEFIELD_PUTON_ACK;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_BATTLEFIELD_PUTON_ACK] = Encode_GMPKG_COMMANDER_BATTLEFIELD_PUTON_ACK;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_ACTIVE_REQ] = Decode_GMPKG_COMMANDER_ACTIVE_REQ;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_ACTIVE_REQ] = Encode_GMPKG_COMMANDER_ACTIVE_REQ;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_ACTIVE_ACK] = Decode_GMPKG_COMMANDER_ACTIVE_ACK;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_ACTIVE_ACK] = Encode_GMPKG_COMMANDER_ACTIVE_ACK;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_LEVELUP_REQ] = Decode_GMPKG_COMMANDER_LEVELUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_LEVELUP_REQ] = Encode_GMPKG_COMMANDER_LEVELUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_LEVELUP_ACK] = Decode_GMPKG_COMMANDER_LEVELUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_LEVELUP_ACK] = Encode_GMPKG_COMMANDER_LEVELUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_QUALITYUP_REQ] = Decode_GMPKG_COMMANDER_QUALITYUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_QUALITYUP_REQ] = Encode_GMPKG_COMMANDER_QUALITYUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_QUALITYUP_ACK] = Decode_GMPKG_COMMANDER_QUALITYUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_QUALITYUP_ACK] = Encode_GMPKG_COMMANDER_QUALITYUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_STARUP_REQ] = Decode_GMPKG_COMMANDER_STARUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_STARUP_REQ] = Encode_GMPKG_COMMANDER_STARUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_COMMANDER_STARUP_ACK] = Decode_GMPKG_COMMANDER_STARUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_COMMANDER_STARUP_ACK] = Encode_GMPKG_COMMANDER_STARUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_PATROL_DATA_REQ] = Decode_GMPKG_PATROL_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_PATROL_DATA_REQ] = Encode_GMPKG_PATROL_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_PATROL_DATA_ACK] = Decode_GMPKG_PATROL_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_PATROL_DATA_ACK] = Encode_GMPKG_PATROL_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_PATROL_START_REQ] = Decode_GMPKG_PATROL_START_REQ;
    P.m_oMapEncodeFunc[P.GMID_PATROL_START_REQ] = Encode_GMPKG_PATROL_START_REQ;
    P.m_oMapDecodeFunc[P.GMID_PATROL_START_ACK] = Decode_GMPKG_PATROL_START_ACK;
    P.m_oMapEncodeFunc[P.GMID_PATROL_START_ACK] = Encode_GMPKG_PATROL_START_ACK;
    P.m_oMapDecodeFunc[P.GMID_PATROL_END_REQ] = Decode_GMPKG_PATROL_END_REQ;
    P.m_oMapEncodeFunc[P.GMID_PATROL_END_REQ] = Encode_GMPKG_PATROL_END_REQ;
    P.m_oMapDecodeFunc[P.GMID_PATROL_END_ACK] = Decode_GMPKG_PATROL_END_ACK;
    P.m_oMapEncodeFunc[P.GMID_PATROL_END_ACK] = Encode_GMPKG_PATROL_END_ACK;
    P.m_oMapDecodeFunc[P.GMID_PATROL_REFRESH_REQ] = Decode_GMPKG_PATROL_REFRESH_REQ;
    P.m_oMapEncodeFunc[P.GMID_PATROL_REFRESH_REQ] = Encode_GMPKG_PATROL_REFRESH_REQ;
    P.m_oMapDecodeFunc[P.GMID_PATROL_REFRESH_ACK] = Decode_GMPKG_PATROL_REFRESH_ACK;
    P.m_oMapEncodeFunc[P.GMID_PATROL_REFRESH_ACK] = Encode_GMPKG_PATROL_REFRESH_ACK;
    P.m_oMapDecodeFunc[P.GMID_PATROL_BUYSP_REQ] = Decode_GMPKG_PATROL_BUYSP_REQ;
    P.m_oMapEncodeFunc[P.GMID_PATROL_BUYSP_REQ] = Encode_GMPKG_PATROL_BUYSP_REQ;
    P.m_oMapDecodeFunc[P.GMID_PATROL_BUYSP_ACK] = Decode_GMPKG_PATROL_BUYSP_ACK;
    P.m_oMapEncodeFunc[P.GMID_PATROL_BUYSP_ACK] = Encode_GMPKG_PATROL_BUYSP_ACK;
    P.m_oMapDecodeFunc[P.GMID_PATROL_FLAG_NTF] = Decode_GMPKG_PATROL_FLAG_NTF;
    P.m_oMapEncodeFunc[P.GMID_PATROL_FLAG_NTF] = Encode_GMPKG_PATROL_FLAG_NTF;
    P.m_oMapDecodeFunc[P.GMID_PATROL_SPEEDUP_REQ] = Decode_GMPKG_PATROL_SPEEDUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_PATROL_SPEEDUP_REQ] = Encode_GMPKG_PATROL_SPEEDUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_PATROL_SPEEDUP_ACK] = Decode_GMPKG_PATROL_SPEEDUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_PATROL_SPEEDUP_ACK] = Encode_GMPKG_PATROL_SPEEDUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_PATROL_MEMBER_RECOVER_NTF] = Decode_GMPKG_PATROL_MEMBER_RECOVER_NTF;
    P.m_oMapEncodeFunc[P.GMID_PATROL_MEMBER_RECOVER_NTF] = Encode_GMPKG_PATROL_MEMBER_RECOVER_NTF;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_DATA_REQ] = Decode_GMPKG_EXPLORE_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_DATA_REQ] = Encode_GMPKG_EXPLORE_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_DATA_ACK] = Decode_GMPKG_EXPLORE_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_DATA_ACK] = Encode_GMPKG_EXPLORE_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_SELECT_AREA_REQ] = Decode_GMPKG_EXPLORE_SELECT_AREA_REQ;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_SELECT_AREA_REQ] = Encode_GMPKG_EXPLORE_SELECT_AREA_REQ;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_SELECT_AREA_ACK] = Decode_GMPKG_EXPLORE_SELECT_AREA_ACK;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_SELECT_AREA_ACK] = Encode_GMPKG_EXPLORE_SELECT_AREA_ACK;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_REQ] = Decode_GMPKG_EXPLORE_REQ;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_REQ] = Encode_GMPKG_EXPLORE_REQ;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_ACK] = Decode_GMPKG_EXPLORE_ACK;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_ACK] = Encode_GMPKG_EXPLORE_ACK;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_REWARD_REQ] = Decode_GMPKG_EXPLORE_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_REWARD_REQ] = Encode_GMPKG_EXPLORE_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_REWARD_ACK] = Decode_GMPKG_EXPLORE_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_REWARD_ACK] = Encode_GMPKG_EXPLORE_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_GEM_REQ] = Decode_GMPKG_EXPLORE_GEM_REQ;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_GEM_REQ] = Encode_GMPKG_EXPLORE_GEM_REQ;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_GEM_ACK] = Decode_GMPKG_EXPLORE_GEM_ACK;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_GEM_ACK] = Encode_GMPKG_EXPLORE_GEM_ACK;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_OPEN_REQ] = Decode_GMPKG_EXPLORE_OPEN_REQ;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_OPEN_REQ] = Encode_GMPKG_EXPLORE_OPEN_REQ;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_OPEN_ACK] = Decode_GMPKG_EXPLORE_OPEN_ACK;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_OPEN_ACK] = Encode_GMPKG_EXPLORE_OPEN_ACK;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_FLAG_NTF] = Decode_GMPKG_EXPLORE_FLAG_NTF;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_FLAG_NTF] = Encode_GMPKG_EXPLORE_FLAG_NTF;
    P.m_oMapDecodeFunc[P.GMID_EXPLORE_CHEST_NTF] = Decode_GMPKG_EXPLORE_CHEST_NTF;
    P.m_oMapEncodeFunc[P.GMID_EXPLORE_CHEST_NTF] = Encode_GMPKG_EXPLORE_CHEST_NTF;
    P.m_oMapDecodeFunc[P.GMID_HONOR_RANKUP_REQ] = Decode_GMPKG_HONOR_RANKUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_HONOR_RANKUP_REQ] = Encode_GMPKG_HONOR_RANKUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_HONOR_RANKUP_ACK] = Decode_GMPKG_HONOR_RANKUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_HONOR_RANKUP_ACK] = Encode_GMPKG_HONOR_RANKUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_HONOR_GIVEN_REQ] = Decode_GMPKG_HONOR_GIVEN_REQ;
    P.m_oMapEncodeFunc[P.GMID_HONOR_GIVEN_REQ] = Encode_GMPKG_HONOR_GIVEN_REQ;
    P.m_oMapDecodeFunc[P.GMID_HONOR_GIVEN_ACK] = Decode_GMPKG_HONOR_GIVEN_ACK;
    P.m_oMapEncodeFunc[P.GMID_HONOR_GIVEN_ACK] = Encode_GMPKG_HONOR_GIVEN_ACK;
    P.m_oMapDecodeFunc[P.GMID_HONOR_TUP_REQ] = Decode_GMPKG_HONOR_TUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_HONOR_TUP_REQ] = Encode_GMPKG_HONOR_TUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_HONOR_TUP_ACK] = Decode_GMPKG_HONOR_TUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_HONOR_TUP_ACK] = Encode_GMPKG_HONOR_TUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_HONOR_FLAG_NTF] = Decode_GMPKG_HONOR_FLAG_NTF;
    P.m_oMapEncodeFunc[P.GMID_HONOR_FLAG_NTF] = Encode_GMPKG_HONOR_FLAG_NTF;
    P.m_oMapDecodeFunc[P.GMID_MAINTASK_DATA_REQ] = Decode_GMPKG_MAINTASK_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_MAINTASK_DATA_REQ] = Encode_GMPKG_MAINTASK_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_MAINTASK_DATA_ACK] = Decode_GMPKG_MAINTASK_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_MAINTASK_DATA_ACK] = Encode_GMPKG_MAINTASK_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_MAINTASK_GET_REQ] = Decode_GMPKG_MAINTASK_GET_REQ;
    P.m_oMapEncodeFunc[P.GMID_MAINTASK_GET_REQ] = Encode_GMPKG_MAINTASK_GET_REQ;
    P.m_oMapDecodeFunc[P.GMID_MAINTASK_GET_ACK] = Decode_GMPKG_MAINTASK_GET_ACK;
    P.m_oMapEncodeFunc[P.GMID_MAINTASK_GET_ACK] = Encode_GMPKG_MAINTASK_GET_ACK;
    P.m_oMapDecodeFunc[P.GMID_MAINTASK_REWARD_REQ] = Decode_GMPKG_MAINTASK_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_MAINTASK_REWARD_REQ] = Encode_GMPKG_MAINTASK_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_MAINTASK_REWARD_ACK] = Decode_GMPKG_MAINTASK_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_MAINTASK_REWARD_ACK] = Encode_GMPKG_MAINTASK_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_MAINTASK_FLAG_NTF] = Decode_GMPKG_MAINTASK_FLAG_NTF;
    P.m_oMapEncodeFunc[P.GMID_MAINTASK_FLAG_NTF] = Encode_GMPKG_MAINTASK_FLAG_NTF;
    P.m_oMapDecodeFunc[P.GMID_BUILD_UPGRADE_REQ] = Decode_GMPKG_BUILD_UPGRADE_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_UPGRADE_REQ] = Encode_GMPKG_BUILD_UPGRADE_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_UPGRADE_ACK] = Decode_GMPKG_BUILD_UPGRADE_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_UPGRADE_ACK] = Encode_GMPKG_BUILD_UPGRADE_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_SPEEDUP_REQ] = Decode_GMPKG_BUILD_SPEEDUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_SPEEDUP_REQ] = Encode_GMPKG_BUILD_SPEEDUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_SPEEDUP_ACK] = Decode_GMPKG_BUILD_SPEEDUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_SPEEDUP_ACK] = Encode_GMPKG_BUILD_SPEEDUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_CANCEL_REQ] = Decode_GMPKG_BUILD_CANCEL_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_CANCEL_REQ] = Encode_GMPKG_BUILD_CANCEL_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_CANCEL_ACK] = Decode_GMPKG_BUILD_CANCEL_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_CANCEL_ACK] = Encode_GMPKG_BUILD_CANCEL_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_RES_UPGRADE_REQ] = Decode_GMPKG_BUILD_RES_UPGRADE_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_RES_UPGRADE_REQ] = Encode_GMPKG_BUILD_RES_UPGRADE_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_RES_UPGRADE_ACK] = Decode_GMPKG_BUILD_RES_UPGRADE_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_RES_UPGRADE_ACK] = Encode_GMPKG_BUILD_RES_UPGRADE_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_RES_SPEEDUP_REQ] = Decode_GMPKG_BUILD_RES_SPEEDUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_RES_SPEEDUP_REQ] = Encode_GMPKG_BUILD_RES_SPEEDUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_RES_SPEEDUP_ACK] = Decode_GMPKG_BUILD_RES_SPEEDUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_RES_SPEEDUP_ACK] = Encode_GMPKG_BUILD_RES_SPEEDUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_RES_CANCEL_REQ] = Decode_GMPKG_BUILD_RES_CANCEL_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_RES_CANCEL_REQ] = Encode_GMPKG_BUILD_RES_CANCEL_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_RES_CANCEL_ACK] = Decode_GMPKG_BUILD_RES_CANCEL_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_RES_CANCEL_ACK] = Encode_GMPKG_BUILD_RES_CANCEL_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_RES_UNLOCK_REQ] = Decode_GMPKG_BUILD_RES_UNLOCK_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_RES_UNLOCK_REQ] = Encode_GMPKG_BUILD_RES_UNLOCK_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_RES_UNLOCK_ACK] = Decode_GMPKG_BUILD_RES_UNLOCK_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_RES_UNLOCK_ACK] = Encode_GMPKG_BUILD_RES_UNLOCK_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TECH_UPGRADE_REQ] = Decode_GMPKG_BUILD_TECH_UPGRADE_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TECH_UPGRADE_REQ] = Encode_GMPKG_BUILD_TECH_UPGRADE_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TECH_UPGRADE_ACK] = Decode_GMPKG_BUILD_TECH_UPGRADE_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TECH_UPGRADE_ACK] = Encode_GMPKG_BUILD_TECH_UPGRADE_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TECH_SPEEDUP_REQ] = Decode_GMPKG_BUILD_TECH_SPEEDUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TECH_SPEEDUP_REQ] = Encode_GMPKG_BUILD_TECH_SPEEDUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TECH_SPEEDUP_ACK] = Decode_GMPKG_BUILD_TECH_SPEEDUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TECH_SPEEDUP_ACK] = Encode_GMPKG_BUILD_TECH_SPEEDUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TECH_CANCEL_REQ] = Decode_GMPKG_BUILD_TECH_CANCEL_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TECH_CANCEL_REQ] = Encode_GMPKG_BUILD_TECH_CANCEL_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TECH_CANCEL_ACK] = Decode_GMPKG_BUILD_TECH_CANCEL_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TECH_CANCEL_ACK] = Encode_GMPKG_BUILD_TECH_CANCEL_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_EQUIP_MAKE_REQ] = Decode_GMPKG_BUILD_EQUIP_MAKE_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_EQUIP_MAKE_REQ] = Encode_GMPKG_BUILD_EQUIP_MAKE_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_EQUIP_MAKE_ACK] = Decode_GMPKG_BUILD_EQUIP_MAKE_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_EQUIP_MAKE_ACK] = Encode_GMPKG_BUILD_EQUIP_MAKE_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_EQUIP_SPEEDUP_REQ] = Decode_GMPKG_BUILD_EQUIP_SPEEDUP_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_EQUIP_SPEEDUP_REQ] = Encode_GMPKG_BUILD_EQUIP_SPEEDUP_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_EQUIP_SPEEDUP_ACK] = Decode_GMPKG_BUILD_EQUIP_SPEEDUP_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_EQUIP_SPEEDUP_ACK] = Encode_GMPKG_BUILD_EQUIP_SPEEDUP_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_EQUIP_GET_REQ] = Decode_GMPKG_BUILD_EQUIP_GET_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_EQUIP_GET_REQ] = Encode_GMPKG_BUILD_EQUIP_GET_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_EQUIP_GET_ACK] = Decode_GMPKG_BUILD_EQUIP_GET_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_EQUIP_GET_ACK] = Encode_GMPKG_BUILD_EQUIP_GET_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_EQUIP_REWARD_GET_REQ] = Decode_GMPKG_BUILD_EQUIP_REWARD_GET_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_EQUIP_REWARD_GET_REQ] = Encode_GMPKG_BUILD_EQUIP_REWARD_GET_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_EQUIP_REWARD_GET_ACK] = Decode_GMPKG_BUILD_EQUIP_REWARD_GET_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_EQUIP_REWARD_GET_ACK] = Encode_GMPKG_BUILD_EQUIP_REWARD_GET_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_EQUIP_REWARD_RESET_REQ] = Decode_GMPKG_BUILD_EQUIP_REWARD_RESET_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_EQUIP_REWARD_RESET_REQ] = Encode_GMPKG_BUILD_EQUIP_REWARD_RESET_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_EQUIP_REWARD_RESET_ACK] = Decode_GMPKG_BUILD_EQUIP_REWARD_RESET_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_EQUIP_REWARD_RESET_ACK] = Encode_GMPKG_BUILD_EQUIP_REWARD_RESET_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_NTF] = Decode_GMPKG_BUILD_NTF;
    P.m_oMapEncodeFunc[P.GMID_BUILD_NTF] = Encode_GMPKG_BUILD_NTF;
    P.m_oMapDecodeFunc[P.GMID_BUILD_VALUE_NTF] = Decode_GMPKG_BUILD_VALUE_NTF;
    P.m_oMapEncodeFunc[P.GMID_BUILD_VALUE_NTF] = Encode_GMPKG_BUILD_VALUE_NTF;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TASK_DATA_REQ] = Decode_GMPKG_BUILD_TASK_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TASK_DATA_REQ] = Encode_GMPKG_BUILD_TASK_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TASK_DATA_ACK] = Decode_GMPKG_BUILD_TASK_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TASK_DATA_ACK] = Encode_GMPKG_BUILD_TASK_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TASK_REWARD_REQ] = Decode_GMPKG_BUILD_TASK_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TASK_REWARD_REQ] = Encode_GMPKG_BUILD_TASK_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TASK_REWARD_ACK] = Decode_GMPKG_BUILD_TASK_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TASK_REWARD_ACK] = Encode_GMPKG_BUILD_TASK_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_BUILD_TASK_NTF] = Decode_GMPKG_BUILD_TASK_NTF;
    P.m_oMapEncodeFunc[P.GMID_BUILD_TASK_NTF] = Encode_GMPKG_BUILD_TASK_NTF;
    P.m_oMapDecodeFunc[P.GMID_BUILD_BAG_REQ] = Decode_GMPKG_BUILD_BAG_REQ;
    P.m_oMapEncodeFunc[P.GMID_BUILD_BAG_REQ] = Encode_GMPKG_BUILD_BAG_REQ;
    P.m_oMapDecodeFunc[P.GMID_FEEDBACK_DATA_REQ] = Decode_GMPKG_FEEDBACK_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_FEEDBACK_DATA_REQ] = Encode_GMPKG_FEEDBACK_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_FEEDBACK_DATA_ACK] = Decode_GMPKG_FEEDBACK_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_FEEDBACK_DATA_ACK] = Encode_GMPKG_FEEDBACK_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_FEEDBACK_GET_REQ] = Decode_GMPKG_FEEDBACK_GET_REQ;
    P.m_oMapEncodeFunc[P.GMID_FEEDBACK_GET_REQ] = Encode_GMPKG_FEEDBACK_GET_REQ;
    P.m_oMapDecodeFunc[P.GMID_FEEDBACK_GET_ACK] = Decode_GMPKG_FEEDBACK_GET_ACK;
    P.m_oMapEncodeFunc[P.GMID_FEEDBACK_GET_ACK] = Encode_GMPKG_FEEDBACK_GET_ACK;
    P.m_oMapDecodeFunc[P.GMID_FEEDBACK_NTF] = Decode_GMPKG_FEEDBACK_NTF;
    P.m_oMapEncodeFunc[P.GMID_FEEDBACK_NTF] = Encode_GMPKG_FEEDBACK_NTF;
    P.m_oMapDecodeFunc[P.GMID_FULI_MILLION_DATA_REQ] = Decode_GMPKG_FULI_MILLION_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_MILLION_DATA_REQ] = Encode_GMPKG_FULI_MILLION_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_MILLION_DATA_ACK] = Decode_GMPKG_FULI_MILLION_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_MILLION_DATA_ACK] = Encode_GMPKG_FULI_MILLION_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_MILLION_GET_REQ] = Decode_GMPKG_FULI_MILLION_GET_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULI_MILLION_GET_REQ] = Encode_GMPKG_FULI_MILLION_GET_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULI_MILLION_GET_ACK] = Decode_GMPKG_FULI_MILLION_GET_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULI_MILLION_GET_ACK] = Encode_GMPKG_FULI_MILLION_GET_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULI_MILLION_NTF] = Decode_GMPKG_FULI_MILLION_NTF;
    P.m_oMapEncodeFunc[P.GMID_FULI_MILLION_NTF] = Encode_GMPKG_FULI_MILLION_NTF;
    P.m_oMapDecodeFunc[P.GMID_NEW_TASK_GET_REWARD_REQ] = Decode_GMPKG_NEW_TASK_GET_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_NEW_TASK_GET_REWARD_REQ] = Encode_GMPKG_NEW_TASK_GET_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_NEW_TASK_GET_REWARD_ACK] = Decode_GMPKG_NEW_TASK_GET_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_NEW_TASK_GET_REWARD_ACK] = Encode_GMPKG_NEW_TASK_GET_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_NEW_TASK_NTF] = Decode_GMPKG_NEW_TASK_NTF;
    P.m_oMapEncodeFunc[P.GMID_NEW_TASK_NTF] = Encode_GMPKG_NEW_TASK_NTF;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_GO_REQ] = Decode_GMPKG_FLYING_CHESS_GO_REQ;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_GO_REQ] = Encode_GMPKG_FLYING_CHESS_GO_REQ;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_GO_ACK] = Decode_GMPKG_FLYING_CHESS_GO_ACK;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_GO_ACK] = Encode_GMPKG_FLYING_CHESS_GO_ACK;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_PAPER_REQ] = Decode_GMPKG_FLYING_CHESS_PAPER_REQ;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_PAPER_REQ] = Encode_GMPKG_FLYING_CHESS_PAPER_REQ;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_PAPER_ACK] = Decode_GMPKG_FLYING_CHESS_PAPER_ACK;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_PAPER_ACK] = Encode_GMPKG_FLYING_CHESS_PAPER_ACK;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_BUY_REQ] = Decode_GMPKG_FLYING_CHESS_BUY_REQ;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_BUY_REQ] = Encode_GMPKG_FLYING_CHESS_BUY_REQ;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_BUY_ACK] = Decode_GMPKG_FLYING_CHESS_BUY_ACK;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_BUY_ACK] = Encode_GMPKG_FLYING_CHESS_BUY_ACK;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_BUY_DICE_REQ] = Decode_GMPKG_FLYING_CHESS_BUY_DICE_REQ;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_BUY_DICE_REQ] = Encode_GMPKG_FLYING_CHESS_BUY_DICE_REQ;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_BUY_DICE_ACK] = Decode_GMPKG_FLYING_CHESS_BUY_DICE_ACK;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_BUY_DICE_ACK] = Encode_GMPKG_FLYING_CHESS_BUY_DICE_ACK;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_EXCHANGE_REQ] = Decode_GMPKG_FLYING_CHESS_EXCHANGE_REQ;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_EXCHANGE_REQ] = Encode_GMPKG_FLYING_CHESS_EXCHANGE_REQ;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_EXCHANGE_ACK] = Decode_GMPKG_FLYING_CHESS_EXCHANGE_ACK;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_EXCHANGE_ACK] = Encode_GMPKG_FLYING_CHESS_EXCHANGE_ACK;
    P.m_oMapDecodeFunc[P.GMID_FLYING_CHESS_HONOR_NTF] = Decode_GMPKG_FLYING_CHESS_HONOR_NTF;
    P.m_oMapEncodeFunc[P.GMID_FLYING_CHESS_HONOR_NTF] = Encode_GMPKG_FLYING_CHESS_HONOR_NTF;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_DATA_REQ] = Decode_GMPKG_FULL_BOSS_DATA_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_DATA_REQ] = Encode_GMPKG_FULL_BOSS_DATA_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_DATA_ACK] = Decode_GMPKG_FULL_BOSS_DATA_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_DATA_ACK] = Encode_GMPKG_FULL_BOSS_DATA_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_ATTACK_START_REQ] = Decode_GMPKG_FULL_BOSS_ATTACK_START_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_ATTACK_START_REQ] = Encode_GMPKG_FULL_BOSS_ATTACK_START_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_ATTACK_START_ACK] = Decode_GMPKG_FULL_BOSS_ATTACK_START_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_ATTACK_START_ACK] = Encode_GMPKG_FULL_BOSS_ATTACK_START_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_ATTACK_END_REQ] = Decode_GMPKG_FULL_BOSS_ATTACK_END_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_ATTACK_END_REQ] = Encode_GMPKG_FULL_BOSS_ATTACK_END_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_ATTACK_END_ACK] = Decode_GMPKG_FULL_BOSS_ATTACK_END_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_ATTACK_END_ACK] = Encode_GMPKG_FULL_BOSS_ATTACK_END_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_ATTACK_QUIT_REQ] = Decode_GMPKG_FULL_BOSS_ATTACK_QUIT_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_ATTACK_QUIT_REQ] = Encode_GMPKG_FULL_BOSS_ATTACK_QUIT_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_ATTACK_QUIT_ACK] = Decode_GMPKG_FULL_BOSS_ATTACK_QUIT_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_ATTACK_QUIT_ACK] = Encode_GMPKG_FULL_BOSS_ATTACK_QUIT_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_REWARD_REQ] = Decode_GMPKG_FULL_BOSS_REWARD_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_REWARD_REQ] = Encode_GMPKG_FULL_BOSS_REWARD_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_REWARD_ACK] = Decode_GMPKG_FULL_BOSS_REWARD_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_REWARD_ACK] = Encode_GMPKG_FULL_BOSS_REWARD_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_JUJI_REQ] = Decode_GMPKG_FULL_BOSS_JUJI_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_JUJI_REQ] = Encode_GMPKG_FULL_BOSS_JUJI_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_JUJI_ACK] = Decode_GMPKG_FULL_BOSS_JUJI_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_JUJI_ACK] = Encode_GMPKG_FULL_BOSS_JUJI_ACK;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_QH_REQ] = Decode_GMPKG_FULL_BOSS_QH_REQ;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_QH_REQ] = Encode_GMPKG_FULL_BOSS_QH_REQ;
    P.m_oMapDecodeFunc[P.GMID_FULL_BOSS_QH_ACK] = Decode_GMPKG_FULL_BOSS_QH_ACK;
    P.m_oMapEncodeFunc[P.GMID_FULL_BOSS_QH_ACK] = Encode_GMPKG_FULL_BOSS_QH_ACK;
};

module.exports = P;
